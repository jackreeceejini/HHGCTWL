(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    903543,      18502]
NotebookOptionsPosition[    843184,      17045]
NotebookOutlinePosition[    843555,      17061]
CellTagsIndexPosition[    843512,      17058]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
HitchHikers Guide to Computational Thinking With the Wolfram Language 
By, Jackreece Ejini\
\>", "Title",
 CellChangeTimes->{{3.7109966899173326`*^9, 3.7109967120799217`*^9}, {
  3.711003018086796*^9, 
  3.711003043201936*^9}},ExpressionUUID->"7c3dbef3-8a63-485f-b543-\
fc7190da5a74"],

Cell[TextData[StyleBox["\n\n\n\nThis is just another introduction to \
programming and computational thinking with the Wolfram Language. The Wolfram \
Language is the most sophisticated programming Language out there for doing \
all kinds of things programming. Despite its sophistication it is also one of \
the easiest programming language you can learn, my journey to becoming a \
computer programmer was a horrendous one because I did not know of the \
Wolfram Language. I know of many people that have abandoned thier dreams of \
becoming computer programmers because after foraying into the jungle of low \
level languages like C or \[OpenCurlyDoubleQuote]Object Oriented\
\[CloseCurlyDoubleQuote] languages like C++ and JAVA, they still did not know \
what programming was all about, they could follow through with the syntax of \
these langauges, that just requires having a good memory, but when it came to \
applying what they have learnt, expressing the solutions to real life \
problems computationally, they found it very had to make that abstract leap \
that is most essential to thinking about things computationally. The book AN \
ELEMENTARY INTRODUCTION TO THE WOLFRAM LANGUAGE, by STEPHEN WOLFRAM, is the \
best introduction to the WOLFRAM LANGUAGE and computational thinking I have \
ever come accross, and best of all the online version of this book is free! \
you can also get a hard copy for a fair price. This work is merely to \
supplement that but I strongly recommend that you read that to strengthen \
your foundations. This book is also necessary as a refresher that will \
strengthen the concepts you learnt in that book further. \n\nThe WOLFRAM \
LANGUAGE is unique because you can do things that will be ridiculously \
difficult to do in order languages in a very short period of time, being a \
knowledge based language, most of the kinds of data you would have to obtain \
from other sources, most times at a great price, are already available for \
instant computation within the language itself, this is perfect for most \
beginers because obtaining high quality curated data is not usually an easy \
endeavour.\n\nAlthough you can literally build piece of software completely \
with the WOLFRAM language alone, in the real world you might have to work at \
other software projects, sometimes because of the job you might happen to be \
involved in, I STRONGLY RECOMMEND THAT IF YOU HAVE NOT PROGRAMMMED A COMPUTER \
BEFORE YOU SHOULD PLEASE START YOUR JOURNEY WITH THE WOLFRAM LANGUAGE. I \
cannot over emphasize this point, it will save you many horrors, your \
learning rate is going to be near exponential. \n\nThe WOLFRAM LANGUAGE \
provides what we call a NOTEBOOK, personally I call it an interactive \
exploration ground, you input code and you get results instantly, although \
some form on interactive programming is available in python, the WOLFRAM \
NOTEBOOK  environment is the most sophisticate programming education \
environment I have come across, from fancy visualization to the ability to \
tame the errors of beginning programmers. Another advantage to using the \
Wolfram Language is that because it is so high level, we focus more on the \
problem we want to solve and less on the specific details of the language. I \
usually call the Wolfram Language a disciplined kind of English Language \
because it is so clear and direct. The goal of any Wolfram Language \
programmer, like you are about to become is to reach a stage after a fair \
period of practice where you can start thinking directly in the Wolfram \
Language, this is what I call Wolfram Language Enlightenment! \n\nWithout \
further ado, let us dive in to Computational thinking with the Wolfram \
Language.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7109967297973957`*^9, 3.7109977306034737`*^9}, {
  3.7109979860482674`*^9, 3.7109980354913425`*^9}, {3.710999084037817*^9, 
  3.7109992660102377`*^9}, {3.711002992210678*^9, 
  3.7110030109935627`*^9}},ExpressionUUID->"4506d9e4-679f-4218-99c7-\
2df9db597aec"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.710998071821119*^9, 
  3.710998072266555*^9}},ExpressionUUID->"1a4bcd99-2b7d-4fac-8f7b-\
acf730cb1afc"],

Cell[CellGroupData[{

Cell["WHAT DOES A COMPUTER REALLY DO?", "Chapter",
 CellChangeTimes->{{3.7109980997532167`*^9, 
  3.7109981162078075`*^9}},ExpressionUUID->"8ed0e206-5ba5-4164-94fd-\
fc0ec228641f"],

Cell[TextData[StyleBox["Basically:\n1. Performs billions to trillions of \
Calculations per second!\n2. Remembers the results of the calculations and \
sometimes display it!",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.71099812572711*^9, 3.7109982768728657`*^9}, {
  3.7109993044260273`*^9, 
  3.7109993104828463`*^9}},ExpressionUUID->"9fbe5778-9c47-4d08-b51b-\
a055b519420a"],

Cell[TextData[StyleBox["What kinds of calculations can the computer perform\n\
1. There are built-in calculations you can do directly with the Wolfram \
Language \n2. You can also define your own calculations.\n\nComputers cannot \
do anything on their own! Only what you or someone else had tells them to do.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.710998351857495*^9, 
  3.7109984644484*^9}},ExpressionUUID->"731d7d05-7e15-4058-972c-223b762fe5a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  StyleBox[
   RowBox[{"A", " ", "basic", " ", "computation"}], "Section"]}]], "Input",
 CellChangeTimes->{{3.7109988218959723`*^9, 
  3.7109988723976493`*^9}},ExpressionUUID->"29339c12-ad70-4687-9e7a-\
61e1e2952d15"],

Cell[BoxData[
 RowBox[{"A", " ", "basic", " ", "computation"}]], "Output",
 CellChangeTimes->{3.713621290484756*^9, 
  3.7136245044232674`*^9},ExpressionUUID->"3cfe89c1-f677-4e2e-a489-\
c5f5407eb561"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"7", " ", "+", " ", "4"}]], "Input",
 CellChangeTimes->{{3.7109988783150625`*^9, 
  3.710998886544486*^9}},ExpressionUUID->"306400a2-e4f1-4051-bf2e-\
714f7d9732b2"],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{3.710998887828206*^9, 3.7136212905316334`*^9, 
  3.7136245044792676`*^9},ExpressionUUID->"c57093f3-73d0-40ff-b69a-\
49561eb7c098"]
}, Open  ]],

Cell[TextData[{
 StyleBox["To compute anything and view your results in the Wolfram Language, \
you simply open a Notebook and type your computation at the beginning of the \
prompt in what we call a CELL, press SHIFT+ENTER and viola, your results \
appears instantly on the following line, this is basically what we do when we \
are computing in the wolfram language. Go ahead and do this with your Wolfram \
System, a free one is always available online at: ",
  FontFamily->"Comic Sans MS"],
 StyleBox[ButtonBox["WOLFRAM CLOUD",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframcloud.com"], None},
  ButtonNote->"http://www.wolframcloud.com"],
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.710998906728135*^9, 3.710999068287175*^9}, {
  3.7109993307235785`*^9, 3.7109993406579514`*^9}, {3.7109994108968363`*^9, 
  3.7109995395868073`*^9}, {3.7109995762239156`*^9, 
  3.7109995762239156`*^9}},ExpressionUUID->"ef1310ad-5395-41e8-b769-\
34f3dea22989"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius", " ", "=", " ", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"areaOfCircle", " ", "=", " ", 
  RowBox[{"Pi", " ", "*", " ", 
   RowBox[{"radius", "^", "2"}]}]}]}], "Input",
 CellChangeTimes->{{3.71099987678498*^9, 
  3.710999980413125*^9}},ExpressionUUID->"51125039-0900-4662-8dd8-\
bb570df78afd"],

Cell[BoxData[
 RowBox[{"25", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{3.710999992478343*^9, 3.713621290578504*^9, 
  3.713624504533269*^9},ExpressionUUID->"07045c7c-2598-4138-9c49-\
b5c76fa669f4"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Suppose we want to calculate the AREA of a circle with radius 5, \
we can remember from school that the formula for the Area of a circle is ",
  FontFamily->"Comic Sans MS"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Pi]r", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontFamily->"Comic Sans MS",ExpressionUUID->
  "104e6ba5-81d8-4e36-9ce2-b99c39ff0600"],
 StyleBox[", in the Wolfram language we assign 5 to the value of radius and \
enter the formula like we do on the second line. Note that I put a semi-colon \
after 5 above. This is to tell the Wolfram language that we do not want to \
see the result of the computation immediately. In the second line we now use \
radius in the computation and assign the output to another variable name \
areaOfCircle. \n\nWhat are variables, they are like names. We could have done \
the above computation like this using the formula directly:",
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.711000014707697*^9, 
  3.711000353157116*^9}},ExpressionUUID->"e734e4d4-a468-4d8a-a130-\
5275c9e869c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Pi", " ", "*", " ", 
  RowBox[{"5", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.711000357057412*^9, 
  3.7110003657192106`*^9}},ExpressionUUID->"91f55f99-7dbb-4892-8b44-\
ce3547186b36"],

Cell[BoxData[
 RowBox[{"25", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{3.7110003669536057`*^9, 3.7136212906410317`*^9, 
  3.7136245046362786`*^9},ExpressionUUID->"83ebfdab-4855-436b-833c-\
6a969c08d1e6"]
}, Open  ]],

Cell[TextData[StyleBox["But assigned the value 5 to the variable name radius \
and then the result of our computation to the variable areaOfCircle. Most \
times when computing with the wolfram language we do not bother about naming \
everything just like some of you must have experienced in other programming \
languages. We could just go ahead and enter our computations and get the \
results.\nThe = sign is what we use to set radius to 5 and areaOfCircle to \
the result of the calculation. This is called and assignment. Another new \
thing is the * this is the multiplication sign in the Wolfram language. \
Another way to do multiplication would be to leave a space between two things \
we want to multiply",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110003728230267`*^9, 
  3.711000586100088*^9}},ExpressionUUID->"39ead1e5-8a56-4c1e-bf87-\
6c2b1d250ace"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"34", " ", "56"}]], "Input",
 CellChangeTimes->{{3.7110005898054237`*^9, 
  3.7110005921326523`*^9}},ExpressionUUID->"690b62d7-0d8c-41e3-9cea-\
079461634274"],

Cell[BoxData["1904"], "Output",
 CellChangeTimes->{3.7110005934991655`*^9, 3.713621290719136*^9, 
  3.713624504717284*^9},ExpressionUUID->"a318e3bf-13ed-4ae7-bdc9-\
7fb6e3023921"]
}, Open  ]],

Cell[TextData[{
 StyleBox["The Wolfram language automatically displays the x multiplication \
sign when we input to things separated by a space. Another new thing we \
encounter is the upper caret sign ^ this is how we square things in the \
wolfram language. Above you can see that we are squaring the value of radius. \
There is a beautiful way to input the square of something, we type the thing \
like say radius followed by pressing CTRL + 6, then we get something like \
this ",
  FontFamily->"Comic Sans MS"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["radius", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontFamily->"Comic Sans MS",ExpressionUUID->
  "e4f01613-2911-42c2-a8e7-326f7201a203"],
 StyleBox[", remember to press CTRL + SPACEBAR to return the cursor to its \
default location. You must we wandering were we got the Pi from. It is a \
built in symbol in the Wolfram Language. Unlike having to do something like \
pi = 3.14 like you would do in other languages, we simply type Pi because the \
Wolfram Language already knows what Pi is and we can use it directly in our \
computation. \nUnfortunately the result we get from our computation 25 \[Pi] \
is not what we expected from a calculation of the area of a circle, this is \
because Pi is what we call a symbol in the Wolfram Langauge and the language \
can operate directly on symbolic variables. In the Wolfram language we can do \
things like this:",
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.7110005973234463`*^9, 
  3.7110011815823736`*^9}},ExpressionUUID->"33ff5dd5-c95a-426c-ad16-\
565e49672a02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", " ", "=", " ", 
  RowBox[{
   RowBox[{"m", " ", "x"}], " ", "+", " ", "c"}]}]], "Input",
 CellChangeTimes->{{3.7110011832756095`*^9, 
  3.7110011934382567`*^9}},ExpressionUUID->"df7eda82-d099-4a7a-8315-\
5134bc34395e"],

Cell[BoxData[
 RowBox[{"c", "+", 
  RowBox[{"m", " ", "x"}]}]], "Output",
 CellChangeTimes->{3.7110011988332443`*^9, 3.7136212907816644`*^9, 
  3.713624504822287*^9},ExpressionUUID->"b556740b-06ff-4f82-8321-\
bfb945aebf30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.7110012050621595`*^9},ExpressionUUID->"b09c1766-acdc-4994-9f2a-\
a5c9fb7e4f86"],

Cell[BoxData[
 RowBox[{"c", "+", 
  RowBox[{"m", " ", "x"}]}]], "Output",
 CellChangeTimes->{3.7110012058433924`*^9, 3.713621290906638*^9, 
  3.713624504911293*^9},ExpressionUUID->"9ea45792-b5c7-4feb-aefd-\
f6e8efd27a37"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"boy", " "}]], "Input",
 CellChangeTimes->{{3.711001208346587*^9, 
  3.7110012166520634`*^9}},ExpressionUUID->"0a60e1ca-646b-42ab-b56b-\
e65a9184fda5"],

Cell[BoxData["boy"], "Output",
 CellChangeTimes->{3.7110012175511475`*^9, 3.713621290969132*^9, 
  3.713624505065298*^9},ExpressionUUID->"a2df7c3c-0403-4093-99b9-\
b64d188dc0b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["girl"], "Input",
 CellChangeTimes->{{3.7110012184886928`*^9, 
  3.7110012189030833`*^9}},ExpressionUUID->"430c929f-10e6-4ab0-8a5b-\
a830863291a5"],

Cell[BoxData["girl"], "Output",
 CellChangeTimes->{3.7110012198328147`*^9, 3.713621291015933*^9, 
  3.713624505150304*^9},ExpressionUUID->"1c0d536b-3d9f-4c7a-81be-\
71cac703e294"]
}, Open  ]],

Cell[TextData[StyleBox["These are referred to as symbols in the Wolfram \
Language, you can\[CloseCurlyQuote]t do this in many other languages because \
the language expect that you are trying to define a variable without a value \
and assumes that as an error. This is not a problem in the Wolfram Language. \
Now what do we do with our symbolic result 25 \[Pi] ? In this case we can ask \
for a value",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110012264235764`*^9, 
  3.7110013563555803`*^9}},ExpressionUUID->"a9bb0149-1a65-42d6-910d-\
66c4119e4296"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"25", " ", "\[Pi]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711001359321768*^9, 
  3.7110013741279144`*^9}},ExpressionUUID->"2df8e679-b078-495c-ab34-\
e209cc85e1de"],

Cell[BoxData["78.53981633974483`"], "Output",
 CellChangeTimes->{3.7110013749774866`*^9, 3.7136212910785103`*^9, 
  3.713624505234307*^9},ExpressionUUID->"cfca39f6-6a3f-4f3b-8b65-\
071c1f304b1b"]
}, Open  ]],

Cell[TextData[StyleBox["Now this looks like something we can relate to. That\
\[CloseCurlyQuote]s the area of the circle of radius 5, but 5 what? Lets say \
we want to compute for 5 centimeters, we simply say",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110014203032427`*^9, 3.7110014544438977`*^9}, {
  3.711001613605915*^9, 
  3.7110016568020515`*^9}},ExpressionUUID->"873471da-2bb2-49e0-802d-\
f00b313aa9cf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius1", " ", "=", " ", 
   RowBox[{"Quantity", "[", 
    RowBox[{"5", ",", "\"\<Centimeters\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"areaOfCircle1", " ", "=", " ", 
   RowBox[{"Pi", "*", 
    SuperscriptBox["radius1", "2"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"answer", " ", "=", " ", 
  RowBox[{"N", "[", "areaOfCircle1", "]"}]}]}], "Input",
 CellChangeTimes->{{3.7110016585754604`*^9, 
  3.711001742830119*^9}},ExpressionUUID->"f2eac72f-c378-443d-a919-\
834e7c4a4c45"],

Cell[BoxData[
 TemplateBox[{"78.53981633974483`",RowBox[{
     SuperscriptBox["\"cm\"", "2"]}],"centimeters squared",SuperscriptBox[
   "\"Centimeters\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.7110017443734937`*^9, 3.7136212912816315`*^9, 
  3.7136245120511885`*^9},ExpressionUUID->"e8d83d09-43b5-47af-ab18-\
7323331e7ee7"]
}, Open  ]],

Cell[TextData[StyleBox["So what is N[ ], Quantity[ ]? These are built in \
functions in the Wolfram Language. A function is like a machine that does \
things for us, we just have to feed it some input, Later on we will learn how \
to build our kinds of functions that do stuff for us that we want to do but \
are not available in the Wolfram Language. When \
\[OpenCurlyDoubleQuote]calling\[CloseCurlyDoubleQuote] a function we start \
with its name, N or Quantity like in this example, put the beginning [ \
followed by the function \[OpenCurlyDoubleQuote]arguments\
\[CloseCurlyDoubleQuote] followed by a closing ] then our usual SHIFT + \
ENTER. The function then returns its results on the line following the input \
except we put a semi-colon ; after the call. N produces the Numerical \
equivalent of a its argument if one is available and Quantity converts some \
values into certain units. In this case we convert the value 5 to \
Centimeters. \n\nAlthough we can store represent something like the name of a \
person as a Symbol, it is usually better to store it as a STRING.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.711001777777339*^9, 3.711002128093913*^9}, {
  3.7110030611651154`*^9, 
  3.711003193621363*^9}},ExpressionUUID->"b634790b-45ff-49eb-88cb-\
b129b384db8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstName", " ", "=", " ", "\"\<Neo\>\""}]], "Input",
 CellChangeTimes->{{3.711003198801634*^9, 3.7110032175001445`*^9}, {
  3.7110038582548256`*^9, 
  3.7110038627834005`*^9}},ExpressionUUID->"f70fb48d-99db-43e7-a181-\
fa01ce2a416f"],

Cell[BoxData["\<\"Neo\"\>"], "Output",
 CellChangeTimes->{3.7110032225932565`*^9, 3.711003866103057*^9, 
  3.71362129135976*^9, 
  3.713624512444889*^9},ExpressionUUID->"166bcb9f-c063-4bc4-921b-\
bddb4281048e"]
}, Open  ]],

Cell[TextData[StyleBox["To create a string we start with an opening quote \
\[OpenCurlyDoubleQuote] enter the string and follow it with a closing quote \
\[OpenCurlyDoubleQuote] in this example, we assign the string Neo to the \
variable firstName. ",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.711003226346699*^9, 3.711003228932578*^9}, {
  3.711003289953065*^9, 3.7110032958591022`*^9}, {3.7110034155504723`*^9, 
  3.7110034242869387`*^9}, {3.7110037761798663`*^9, 3.7110038383012*^9}, {
  3.7110038732330704`*^9, 
  3.711003879708109*^9}},ExpressionUUID->"bcacf8d0-79bd-48a1-ac31-\
c7270e6163a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"surName", " ", "=", " ", "\"\<Anderson\>\""}]], "Input",
 CellChangeTimes->{{3.7110039627061768`*^9, 
  3.7110039752988424`*^9}},ExpressionUUID->"65a3924c-638e-4dfe-af51-\
b94603288588"],

Cell[BoxData["\<\"Anderson\"\>"], "Output",
 CellChangeTimes->{3.7110039801790457`*^9, 3.7136212914222636`*^9, 
  3.713624512491766*^9},ExpressionUUID->"a942b789-b56e-4e69-b53d-\
dda8e3051472"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullName", " ", "=", " ", 
  RowBox[{"firstName", " ", "<>", " ", "surName"}]}]], "Input",
 CellChangeTimes->{{3.7110039838727293`*^9, 
  3.7110039962703176`*^9}},ExpressionUUID->"cbacefb0-18c1-469c-b479-\
928a85cb1821"],

Cell[BoxData["\<\"NeoAnderson\"\>"], "Output",
 CellChangeTimes->{3.71100399841164*^9, 3.7136212914691296`*^9, 
  3.713624512538641*^9},ExpressionUUID->"c259331b-5afd-42df-ba21-\
903766970a14"]
}, Open  ]],

Cell["\<\
The less than greater than <> symbol is used to concatenate both the first \
and surnames together, we get a the fullName without spaces in the result. To \
add a space\
\>", "Text",
 CellChangeTimes->{{3.7110040047029753`*^9, 3.71100408740664*^9}, {
  3.711004135665434*^9, 
  3.7110041625053005`*^9}},ExpressionUUID->"f214137c-4c84-4341-ae22-\
5fad06f3b237"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullName", " ", "=", " ", 
  RowBox[{
  "firstName", " ", "<>", " ", "\"\< \>\"", " ", "<>", " ", 
   "surName"}]}]], "Input",
 CellChangeTimes->{{3.711004168056137*^9, 
  3.7110041852133293`*^9}},ExpressionUUID->"29026ca6-b1ac-4655-95b2-\
fc454dbb9611"],

Cell[BoxData["\<\"Neo Anderson\"\>"], "Output",
 CellChangeTimes->{3.7110041873601832`*^9, 3.7136212915316286`*^9, 
  3.713624512585513*^9},ExpressionUUID->"f36c7d10-7959-402f-84bc-\
c0219d8e3a5b"]
}, Open  ]],

Cell["\<\
You guessed right! we concatenate a whitespace character, gotten by merely \
starting the \[OpenCurlyDoubleQuote] pressing space on your keyboard and \
followed with pressing \[OpenCurlyDoubleQuote]. 

Since this is a Hitch Hikers Guide, lets go through some of the kinds of \
functions that you will be using very regularly in the Wolfram Language, \
remember that a Function is merely a machine and with the right arguments, \
stuff it works with, it will produce some output.\
\>", "Text",
 CellChangeTimes->{{3.71100419653611*^9, 3.7110042674068193`*^9}, {
  3.7110045236416407`*^9, 
  3.711004629449978*^9}},ExpressionUUID->"abfdbf88-2c66-4838-ba03-\
f80d3219e221"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quick diving  ...", "Title",
 CellChangeTimes->{{3.711170379420045*^9, 3.7111704708463435`*^9}, {
   3.7111821440058093`*^9, 3.7111821448113303`*^9}, 
   3.711187348448101*^9},ExpressionUUID->"cb6f74ad-97a8-44c3-985f-\
4ad9dcfb4ed0"],

Cell["SUM OF THE FIRST 10 NUMBERS", "Text",
 CellChangeTimes->{{3.7110046446654587`*^9, 
  3.7110046693891325`*^9}},ExpressionUUID->"4d6802d4-bd3a-4433-bd1d-\
f3f21b93e176"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "first", " ", "10", " ", "numbers"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711004673941412*^9, 3.711004695553592*^9}, {
  3.711004749069225*^9, 
  3.7110047510158587`*^9}},ExpressionUUID->"ac989517-71d9-4ba7-b9f8-\
308011dfc5f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7110046980961847`*^9, 3.713621291594137*^9, 
  3.713624512648014*^9},ExpressionUUID->"c0c865fd-a211-4307-85a4-\
1bf9f7c5c464"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Sum", " ", "of", " ", "the", " ", "first", " ", "10", " ", "numbers"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711004701413596*^9, 3.7110047572095714`*^9}, {
   3.7110048278569727`*^9, 3.711004828989627*^9}, 
   3.711004936282994*^9},ExpressionUUID->"7bd35aaa-abff-42c6-ac0b-\
c44f454ae8ab"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.711004760593931*^9, 3.713621291641014*^9, 
  3.7136245126948214`*^9},ExpressionUUID->"75022844-158d-45d0-b5c8-\
c7e441a8dede"]
}, Open  ]],

Cell["\<\
The stuff after the computation (* Sum of the first 10 numbers *) is referred \
to as a comment in the Wolfram Language. It does not compute to anything but \
merely serve as a signpost for the reader of your code to get an explanation \
of what your code is doing. As you can see in this example we are Nesting one \
function within another. The inner function is called and the results are \
passed to the outermost function, we did not capture the output in a \
variable, this is how most sophisticated WL (Wolfram Language) code is \
written. \
\>", "Text",
 CellChangeTimes->{{3.7110047928425503`*^9, 
  3.711005025042342*^9}},ExpressionUUID->"671921bf-5ce0-4adc-952c-\
fbfe94524441"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7110050349908695`*^9, 
  3.7110050574013624`*^9}},ExpressionUUID->"1a52395f-649d-46ae-82c8-\
5259fb36b6e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.711005062311679*^9, 3.7136212917035093`*^9, 
  3.7136245127417707`*^9},ExpressionUUID->"59448a34-89d5-400f-8643-\
ad7ff12a0b0e"]
}, Open  ]],

Cell["\<\
The name of the function simply tells us what the function is doing. \
\>", "Text",
 CellChangeTimes->{{3.7110050700807185`*^9, 
  3.711005086196797*^9}},ExpressionUUID->"997c440b-ba2a-483d-a6e5-\
e485a6724cf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Even", " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111677939732065`*^9, 
  3.7111678175105853`*^9}},ExpressionUUID->"d738fa35-8b63-4d0d-99c2-\
14f0feed0d2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.7111678187137628`*^9, 3.7136212917660065`*^9, 
  3.713624512788618*^9},ExpressionUUID->"35508823-1c5c-4efc-8839-\
484e02b36e88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], "*", "2", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Multiply", " ", "them", " ", "by", " ", "2"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 
  3.7111678536449485`*^9}},ExpressionUUID->"4305bdf0-993b-4d2e-b72f-\
88bbe1feb030"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", 
   "32", ",", "36", ",", "40"}], "}"}]], "Output",
 CellChangeTimes->{3.711167856520339*^9, 3.713621291812883*^9, 
  3.7136245128355184`*^9},ExpressionUUID->"8b7b6d6a-0dcd-44c4-9504-\
c6fd9e555792"]
}, Open  ]],

Cell["\<\
The 2 is used to multiply each even number in the list we got. We could \
perform other operations on a list of values\
\>", "Text",
 CellChangeTimes->{{3.7111678782670107`*^9, 
  3.7111679282684813`*^9}},ExpressionUUID->"0cf4125e-017c-4490-8056-\
7e9dbdd532a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], "^", "2", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Square", " ", "each", " ", "by", " ", "2"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}},ExpressionUUID->"568c97cf-df54-455d-bf3f-\
da45940eeccb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "16", ",", "36", ",", "64", ",", "100", ",", "144", ",", "196", 
   ",", "256", ",", "324", ",", "400"}], "}"}]], "Output",
 CellChangeTimes->{3.7111679467297463`*^9, 3.7136212919691305`*^9, 
  3.713624512898018*^9},ExpressionUUID->"e81555a3-cc65-472c-bdad-\
4e1973c8a834"]
}, Open  ]],

Cell["Or use the nicely formatted version of powering", "Text",
 CellChangeTimes->{{3.7111681215754957`*^9, 
  3.711168132590995*^9}},ExpressionUUID->"58331823-8045-4f1a-9d7e-\
bb4156b1d26d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "20", ",", "2"}], "]"}], "6"], 
  RowBox[{"(*", " ", 
   RowBox[{"To", " ", "the", " ", "sixth", " ", "power"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 
  3.7111681868528852`*^9}},ExpressionUUID->"0d2accf4-bb12-4e10-a4cb-\
8445d904ca47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "64", ",", "4096", ",", "46656", ",", "262144", ",", "1000000", ",", 
   "2985984", ",", "7529536", ",", "16777216", ",", "34012224", ",", 
   "64000000"}], "}"}]], "Output",
 CellChangeTimes->{3.711168190570557*^9, 3.7136212920316386`*^9, 
  3.713624512944826*^9},ExpressionUUID->"910a6ab4-cf76-4401-803a-\
9e572a5bf196"]
}, Open  ]],

Cell["We can use any interval", "Text",
 CellChangeTimes->{{3.7111682241440034`*^9, 
  3.711168229519267*^9}},ExpressionUUID->"bf951bad-9afd-4e3d-8e65-\
24a457a7f2cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"1", ",", " ", "100", ",", " ", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 3.7111681868528852`*^9}, {
  3.711168234011175*^9, 
  3.7111682482626915`*^9}},ExpressionUUID->"0a1dbde5-d1b2-4b76-a13f-\
c6bab2881bb4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19", ",", 
   "22", ",", "25", ",", "28", ",", "31", ",", "34", ",", "37", ",", "40", 
   ",", "43", ",", "46", ",", "49", ",", "52", ",", "55", ",", "58", ",", 
   "61", ",", "64", ",", "67", ",", "70", ",", "73", ",", "76", ",", "79", 
   ",", "82", ",", "85", ",", "88", ",", "91", ",", "94", ",", "97", ",", 
   "100"}], "}"}]], "Output",
 CellChangeTimes->{3.711168249012698*^9, 3.713621292094138*^9, 
  3.713624512991769*^9},ExpressionUUID->"a1f9b601-8ff1-4c91-99d6-\
ee2962a18cef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"1", ",", " ", "100", ",", " ", 
   RowBox[{"3", "^", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 3.7111681868528852`*^9}, {
  3.711168234011175*^9, 
  3.7111682604989843`*^9}},ExpressionUUID->"e12e4570-a604-478e-9ead-\
e17995cfb60f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "19", ",", "28", ",", "37", ",", "46", ",", "55", ",", 
   "64", ",", "73", ",", "82", ",", "91", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.7111682617791724`*^9, 3.7136212921410046`*^9, 
  3.7136245130385685`*^9},ExpressionUUID->"7efa113d-e9b1-4ef5-a159-\
9fd2662869e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"n", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "n", ",", 
      "Nothing"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "method", " ", "of", " ", "generating", " ", "even", " ", 
    "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111683004248514`*^9, 3.711168323018507*^9}, {
  3.7111683910734563`*^9, 
  3.7111684515760317`*^9}},ExpressionUUID->"5f491059-0bea-403e-b18c-\
48a80d508ae9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7111684166937246`*^9, 3.7136212922035065`*^9, 
  3.7136245130855207`*^9},ExpressionUUID->"8feeba27-0566-4ee3-ae47-\
313eb9010a74"]
}, Open  ]],

Cell["\<\
More Complicated than our Range method above. We use an If function to make \
decisions. Its form is If[condition, true, false]. If condition evaluates to \
true the first result for true is \[OpenCurlyDoubleQuote]Evaluated\
\[CloseCurlyDoubleQuote] and returned out of the function, if its false the \
last statement is evaluated, a symbolic Nothing in this case. The Mod \
function performs the modulus of its arguments. When we divide one number by \
another we get the quotient and a remainder, if a number divides perfectly \
without a remainder the modulus is 0. This is not a perfectly accurately \
description and there is a whole field of discrete mathematics that deals \
with this stuff, but for our purposes in the above program, we do a Mod of a \
number n with 2, that result will be equal to 0 if that number divides \
perfectly with 2, which is a basic test for Even numbers. 
Table is a very powerful iteration function, we use it more often that For \
statement in WL. Lets drill through it to understand a little better.\
\>", "Text",
 CellChangeTimes->{{3.7111688757407365`*^9, 3.7111689125452633`*^9}, {
   3.7111692160639505`*^9, 3.7111692425756874`*^9}, {3.7111692822149687`*^9, 
   3.7111693069827805`*^9}, {3.711169346627542*^9, 3.7111693694960513`*^9}, {
   3.7111694849045877`*^9, 3.7111696290752015`*^9}, {3.7111696918000526`*^9, 
   3.7111697309349346`*^9}, {3.711169824937577*^9, 3.7111699771760597`*^9}, 
   3.711170151362887*^9, {3.7111702460648155`*^9, 3.7111702659428234`*^9}, {
   3.711170490389036*^9, 3.71117049484443*^9}, {3.711170529594416*^9, 
   3.7111705636834517`*^9}, {3.711170614154109*^9, 
   3.7111706258626313`*^9}},ExpressionUUID->"9a52fa59-a1ff-4f2a-b1b5-\
9c65a0f566b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "simple", " ", "table", " ", "that", " ", "returns", " ", "numbers", " ", 
    "from", " ", "1", " ", "to", " ", "10"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711170658307042*^9, 
  3.7111707485297065`*^9}},ExpressionUUID->"37abc7cc-3de0-4907-bba7-\
4c749d4eca85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7111706694471006`*^9, 3.7136212922660117`*^9, 
  3.7136245132242756`*^9},ExpressionUUID->"a56471e0-fe11-4be3-957b-\
17555b5c11b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Range", " ", "equivalent"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111711149420347`*^9, 
  3.7111711272700815`*^9}},ExpressionUUID->"525785cb-c41f-4475-8ae3-\
4f72113c4876"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7111711283767567`*^9, 3.713621292328506*^9, 
  3.7136245132867804`*^9},ExpressionUUID->"b6c985bd-7500-401b-b472-\
7b1a89d2b11b"]
}, Open  ]],

Cell["\<\
n is called the iterator variable. We start from 1 to 10 in steps of one.\
\>", "Text",
 CellChangeTimes->{{3.7111711358714333`*^9, 
  3.7111711768903627`*^9}},ExpressionUUID->"f5c08311-674a-4834-9cb0-\
88ad60fab9eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "2", ",", " ", "10", ",", "1"}], "}"}]}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "can", " ", "start", " ", "some", " ", "other", " ", "place"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111711809572372`*^9, 
  3.7111712063604603`*^9}},ExpressionUUID->"bcaa2a65-9761-4c80-9648-\
7b2353624ab4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7111712083187656`*^9, 3.713621292390936*^9, 
  3.7136245133336463`*^9},ExpressionUUID->"4c4e8821-4bf1-4865-b935-\
19f025dae691"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "2", ",", "10", ",", "2"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Our", " ", "Even", " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171213575799*^9, 
  3.711171267695319*^9}},ExpressionUUID->"8b93eb64-8ded-4088-8b6d-\
81be486721e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.711171270049896*^9, 3.7136212924417048`*^9, 
  3.71362451339615*^9},ExpressionUUID->"88f31ac1-16fb-4288-9a41-e37b7c76b9ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "n", ",", "Nothing"}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "use", " ", "EvenQ", " ", "function", " ", "in", " ", "this", 
    " ", "case", " ", "to", " ", "check", " ", "for", " ", "evenness"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171288041135*^9, 
  3.711171341182113*^9}},ExpressionUUID->"03cb62f8-4c2c-4f60-849d-\
009d168b32b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111713136787395`*^9, 3.7111713428216534`*^9}, 
   3.7136212925354557`*^9, 
   3.7136245134586525`*^9},ExpressionUUID->"88791990-ec0d-4cfd-8e16-\
677f7674578e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"n", "^", "2"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"First", " ", "10", " ", "Squares"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171417080324*^9, 
  3.711171442831262*^9}},ExpressionUUID->"f73fdb83-96cb-48e5-bfd9-\
a81ba5fde081"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.71117144385378*^9, 3.7136212925823264`*^9, 
  3.713624513521145*^9},ExpressionUUID->"ad3adeed-8ec6-4b8b-ab06-\
2d513954e3b6"]
}, Open  ]],

Cell["n is not special we can name the iteration variable anything", "Text",
 CellChangeTimes->{{3.7111714556554203`*^9, 
  3.7111714807934237`*^9}},ExpressionUUID->"f5c0bb9c-9bb6-430e-a719-\
75c5ab5bb212"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"value", ",", " ", 
   RowBox[{"{", 
    RowBox[{"value", ",", "5", ",", "20", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711171486694991*^9, 
  3.7111715252206616`*^9}},ExpressionUUID->"e2f98ef6-22c7-4feb-b73b-\
5f0d057134c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "8", ",", "11", ",", "14", ",", "17", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7111715258812895`*^9, 3.7136212926448355`*^9, 
  3.7136245135680227`*^9},ExpressionUUID->"0cef8e60-9248-4eda-926e-\
6b880a103909"]
}, Open  ]],

Cell["\<\
It\[CloseCurlyQuote]s always a good idea to name your iteration variables \
according to its purpose.\
\>", "Text",
 CellChangeTimes->{{3.711171534385461*^9, 
  3.711171602232631*^9}},ExpressionUUID->"ade9a64f-a6b9-49b6-811b-\
7faacb71d36e"],

Cell[CellGroupData[{

Cell["Dancing with Strings...", "Chapter",
 CellChangeTimes->{{3.7111722078615403`*^9, 3.711172211800006*^9}, {
  3.7111723142572937`*^9, 
  3.711172321693471*^9}},ExpressionUUID->"5f48f5a5-bea2-4cc1-be84-\
a2789741980a"],

Cell[CellGroupData[{

Cell[BoxData["\"\<A simple statement\>\""], "Input",
 CellChangeTimes->{{3.711172352489569*^9, 
  3.7111724068641367`*^9}},ExpressionUUID->"743d4b1a-69a1-4e34-b177-\
7e2bb3c91d43"],

Cell[BoxData["\<\"A simple statement\"\>"], "Output",
 CellChangeTimes->{3.711172408548476*^9, 3.7111724813757763`*^9, 
  3.7136212927073317`*^9, 
  3.713624513630525*^9},ExpressionUUID->"4bfcd42d-b9d6-4abe-a3cb-\
17b3b78aee55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringLength", "[", "%", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "modulus", " ", "operator", " ", "is", " ", "used", " ", "to", 
    " ", "remember", " ", "the", " ", "last", " ", "output"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711172413599818*^9, 
  3.711172467240617*^9}},ExpressionUUID->"2023a673-6b82-4290-9dee-\
d7d4a363244a"],

Cell[BoxData["18"], "Output",
 CellChangeTimes->{{3.7111724465823507`*^9, 3.7111724870329075`*^9}, 
   3.7136212927698298`*^9, 
   3.7136245136930256`*^9},ExpressionUUID->"51445605-9f61-4195-888f-\
4ef9e504ddc0"]
}, Open  ]],

Cell["StringLength just gets the length of a string", "Text",
 CellChangeTimes->{{3.7111725026697087`*^9, 3.7111725057940054`*^9}, {
  3.711172539369175*^9, 
  3.711172550166073*^9}},ExpressionUUID->"37644616-68f6-4c66-bd5b-\
31e2c47e4286"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringLength", "[", "\"\<I love the Wolfram Language\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7111725563419414`*^9, 
  3.7111725729837914`*^9}},ExpressionUUID->"0eaa7c15-53eb-4f5d-9dc4-\
7ca2f93c7039"],

Cell[BoxData["27"], "Output",
 CellChangeTimes->{3.7111725744896755`*^9, 3.713621292816703*^9, 
  3.7136245137555227`*^9},ExpressionUUID->"12de2b51-d26d-4187-b375-\
f35b4a592446"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"statement", " ", "=", " ", 
  "\"\<I love the Wolfram Language\>\""}]], "Input",
 CellChangeTimes->{{3.71117324377046*^9, 
  3.7111732578596573`*^9}},ExpressionUUID->"e31e7a91-2264-455c-b6f4-\
2cf029fd7def"],

Cell[BoxData["\<\"I love the Wolfram Language\"\>"], "Output",
 CellChangeTimes->{3.711173259919544*^9, 3.713621292879206*^9, 
  3.7136245138024006`*^9},ExpressionUUID->"563ea988-18f8-4958-a33d-\
ff58a3cfdbdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", " ", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Lets", " ", "get", " ", "l", " ", "in", " ", "love"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111732758170614`*^9, 
  3.71117331913286*^9}},ExpressionUUID->"aab03e6c-16b2-4569-9abe-\
2ac4bc0bdc61"],

Cell[BoxData["\<\"l\"\>"], "Output",
 CellChangeTimes->{{3.7111732996261454`*^9, 3.711173322024646*^9}, 
   3.7136212930310645`*^9, 
   3.713624513864827*^9},ExpressionUUID->"59e3b012-8b44-4926-9539-\
fc21946f1423"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPosition", "[", 
   RowBox[{"statement", ",", "\"\<W\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "index", " ", "position", " ", "of", " ", "\"\<W\>\"", " ", 
    "in", " ", "the", " ", "string"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111733242110786`*^9, 3.71117337778778*^9}, {
  3.7111735296999836`*^9, 
  3.711173554247072*^9}},ExpressionUUID->"11d36e85-fcb6-4ddd-8410-\
8000e84eed63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"12", ",", "12"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.711173538016243*^9, 3.7136212930935664`*^9, 
  3.7136245139117794`*^9},ExpressionUUID->"fc1dbd46-a234-43cd-9f23-\
0d0eafce6c99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPosition", "[", 
   RowBox[{"statement", ",", "\"\<m\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "index", " ", "position", " ", "of", " ", "\"\<m\>\"", " ", 
    "in", " ", "the", " ", "string"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111733242110786`*^9, 3.71117337778778*^9}, {
  3.7111735296999836`*^9, 
  3.711173577170444*^9}},ExpressionUUID->"332f50ea-92ee-44fd-a06c-\
2c5cd696e74b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"18", ",", "18"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7111735782017174`*^9, 3.7136212931560564`*^9, 
  3.713624513976373*^9},ExpressionUUID->"4aa03fa7-5743-4064-90a2-\
c56d80298ca1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringTake", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "use", " ", "the", " ", "indices", " ", "to", " ", "extract", 
    " ", "Wolfram", " ", "from", " ", "the", " ", "string"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111736173951273`*^9, 
  3.711173672482644*^9}},ExpressionUUID->"28c1ee3f-169e-470d-9f2b-\
3dbba4b777a9"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{3.711173634343891*^9, 3.711173674355476*^9, 
  3.71362129324981*^9, 
  3.713624514023245*^9},ExpressionUUID->"c6627c21-bf2c-4047-a029-\
3f87738d6cb5"]
}, Open  ]],

Cell["Another way, WL has many ways to solve the same problem.", "Text",
 CellChangeTimes->{{3.7111737040940466`*^9, 
  3.711173737717975*^9}},ExpressionUUID->"c6dd73c7-76a0-471e-8d5c-\
982d0e3855c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7111737463581877`*^9, 
  3.711173774687357*^9}},ExpressionUUID->"9985b93d-6d34-40ed-a61a-\
cebaa8a39457"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7111737586446657`*^9, 3.71362129334356*^9, 
  3.713624514085718*^9},ExpressionUUID->"7a20f40f-e531-4f25-bf06-\
47f9c2f2354d"]
}, Open  ]],

Cell["Use CTRL + L to get the previous computation", "Text",
 CellChangeTimes->{{3.711173786279272*^9, 
  3.711173812371838*^9}},ExpressionUUID->"d0a0c5fc-78c3-4f00-b2d8-\
698fdb23ce1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.7111737463581877`*^9, 3.711173774687357*^9}, {
  3.7111738150179415`*^9, 
  3.711173825490105*^9}},ExpressionUUID->"0bf1d187-8a2e-49b7-a186-\
25c2f8d7140c"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{3.711173829246974*^9, 3.713621293406062*^9, 
  3.713624514148243*^9},ExpressionUUID->"b657a4da-fdb1-497b-95b6-\
f3d4f952b9bf"]
}, Open  ]],

Cell["\<\
When you know enough of WL you will find other ways to do this... Lets \
explore one more\
\>", "Text",
 CellChangeTimes->{{3.711173840231968*^9, 3.7111738429234653`*^9}, {
  3.711173901442975*^9, 3.7111739113381104`*^9}, {3.7111739961389627`*^9, 
  3.7111740000526266`*^9}, {3.711174125579609*^9, 
  3.711174143536589*^9}},ExpressionUUID->"5b2da926-4e51-45c9-86a9-\
c8d31f5c6aab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7111741516188803`*^9, 
  3.711174157895974*^9}},ExpressionUUID->"a061dcd8-1912-42f4-8236-\
7d4a98e51509"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7111741586303625`*^9, 3.713621293468563*^9, 
  3.7136245143044925`*^9},ExpressionUUID->"65555511-8db8-46c1-a191-\
7c45415f209d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111741516188803`*^9, 
  3.711174181889724*^9}},ExpressionUUID->"886ab161-55af-4059-8126-\
291aaf0c60aa"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{3.7111741856455946`*^9, 3.713621293515432*^9, 
  3.7136245143512983`*^9},ExpressionUUID->"2ce46aec-5875-4fe0-93ea-\
f05872253461"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174216983055*^9}},ExpressionUUID->"2410d6e8-2b0f-4299-b776-\
d84a9273210b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>", ",", "\<\" \"\>", 
   ",", "\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>", 
   ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
   ",", "\<\"a\"\>", ",", "\<\"w\"\>", ",", "\<\"e\"\>", ",", "\<\"s\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"m\"\>", ",", "\<\"e\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7111742203613234`*^9, 3.7136212935779343`*^9, 
  3.7136245143982453`*^9},ExpressionUUID->"0426c63d-4a5c-422c-8d93-\
8199f56d728f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", "\"\<L\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174278936864*^9}},ExpressionUUID->"a2b8f5bb-4a20-4428-b6d5-\
d0ec447ca447"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "9", "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.711174240670849*^9, 3.711174280672192*^9}, 
   3.713621293640437*^9, 
   3.7136245144763193`*^9},ExpressionUUID->"c71f2c14-d7ac-4aff-925f-\
5df2c1b3b6d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", "\"\<e\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174300652963*^9}},ExpressionUUID->"39406239-b9c8-4cc2-ad02-\
6e87e1856858"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "16", "}"}], ",", 
   RowBox[{"{", "23", "}"}], ",", 
   RowBox[{"{", "27", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.711174302184084*^9, 3.713621293734187*^9, 
  3.713624514523243*^9},ExpressionUUID->"0c0de2f8-e1ef-412b-92df-\
fe0127bc8c7e"]
}, Open  ]],

Cell["\<\
From eyeballing the text and the indices we can see that the first time we \
see \[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote] is at the end of \
language.\
\>", "Text",
 CellChangeTimes->{{3.711174320095257*^9, 3.711174353960271*^9}, {
  3.7111745446029215`*^9, 
  3.711174592277196*^9}},ExpressionUUID->"7128c5c2-63eb-407c-9a98-\
56d6fec78cbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", 
   RowBox[{"9", ";;", "16"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 
  3.711174655109233*^9}},ExpressionUUID->"c4608d16-8a97-46fe-8896-\
cd1e41db4e71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7111746561381807`*^9, 3.713621293812307*^9, 
  3.713624514585745*^9},ExpressionUUID->"ca3ed9d3-4293-41a0-ab33-\
e06636801e43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
    ",", 
    RowBox[{"9", ";;", "16"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 
  3.7111746686022854`*^9}},ExpressionUUID->"af199ccd-b1b3-4375-8d33-\
ca8b4da8b799"],

Cell[BoxData["\<\"Language\"\>"], "Output",
 CellChangeTimes->{3.7111747056249886`*^9, 3.7136212938690863`*^9, 
  3.7136245146638765`*^9},ExpressionUUID->"361872ea-deb6-49f7-882f-\
92dabe1fe510"]
}, Open  ]],

Cell["\<\
What is 9 ;; 16 ? or index ;; index? It\[CloseCurlyQuote]s called taking a \
part. \
\>", "Text",
 CellChangeTimes->{{3.711174721910185*^9, 
  3.7111747846867495`*^9}},ExpressionUUID->"c6ca7304-bb78-4e8b-8508-\
b18e389bce98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", 
   RowBox[{"9", ";;", "16"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 3.7111746686022854`*^9}, {3.7111748262344728`*^9, 
  3.711174841080944*^9}},ExpressionUUID->"fa3bef8a-bd21-4675-b04b-\
61aa68b3c1e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.711174844815936*^9, 3.713621293962905*^9, 
  3.7136245147229395`*^9},ExpressionUUID->"db1eb0eb-ae9f-49c5-a1e2-\
34deb30fd3c5"]
}, Open  ]],

Cell["\<\
The Part function uses indices to extract parts of an expression.\
\>", "Text",
 CellChangeTimes->{{3.711174850096401*^9, 3.711174885600506*^9}, {
  3.711174928675142*^9, 3.71117493496929*^9}, {3.711174966684683*^9, 
  3.711174975940693*^9}, {3.7111750307339845`*^9, 
  3.711175043446558*^9}},ExpressionUUID->"ee735575-275a-449c-9fd1-\
6da0d2db894d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringTake", "[", 
   RowBox[{"\"\<Wolfram Language is awesome\>\"", ",", " ", 
    RowBox[{"9", ";;", "16"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "nice", " ", "way", " ", "to", " ", "extract", " ", 
    "parts", " ", "of", " ", "a", " ", "String"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711175058241156*^9, 
  3.711175124566103*^9}},ExpressionUUID->"03f21add-7fce-4efd-9d6f-\
b0cb40d77a40"],

Cell[BoxData["\<\"Language\"\>"], "Output",
 CellChangeTimes->{3.7111750884749355`*^9, 3.711175125950988*^9, 
  3.713621294181652*^9, 
  3.7136245147728868`*^9},ExpressionUUID->"42497c83-7a7b-4300-bc0f-\
dd9c99de6afd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Word of Advice", "Chapter",
 CellChangeTimes->{{3.711175448721901*^9, 
  3.7111754548666544`*^9}},ExpressionUUID->"60f27124-f057-4f9c-a274-\
f72704f6e623"],

Cell["\<\
When learning programming, you start by learning the syntax. After learning \
the syntax you next step is digging through the documentation. Like I always \
say KEEP YOUR DOCUMENTATION UNDER YOUR PILLOW. When you go through the WL \
documentation you will see all these functions in great detail, plus it\
\[CloseCurlyQuote]s well written.
\
\>", "Text",
 CellChangeTimes->{{3.7111754665193343`*^9, 3.7111754924230585`*^9}, {
   3.711175554138683*^9, 3.711175575362425*^9}, {3.711175707536096*^9, 
   3.7111757950322943`*^9}, {3.711175839807831*^9, 3.7111758566192565`*^9}, 
   3.711179660066082*^9},ExpressionUUID->"95849297-24bf-46c2-82fb-\
977b421e636f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "5", ",", " ", "6", " ", ",", "7", ",", " ", "1", ",", " ", "3"}],
   "}"}]], "Input",
 CellChangeTimes->{{3.71117966925261*^9, 
  3.711179686025934*^9}},ExpressionUUID->"a0aedc42-469b-4a50-9084-\
1e62e2470c66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "1", ",", "3"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.711179686989194*^9, 3.7136212942753997`*^9, 
  3.7136245148353853`*^9},ExpressionUUID->"87281f16-92d4-48a0-b269-\
3a4df157ea2a"]
}, Open  ]],

Cell["\<\
We have been using something with and opening curly brace { some numbers \
separated by commas followed by a closing curly brace }. This structure is \
known as a List in WL. It is the most fundamental kind of structure you will \
be dealing with most of times. Most functions return Lists as their result \
and Many operate directly on List. \
\>", "Text",
 CellChangeTimes->{{3.71117969451897*^9, 
  3.7111798663927827`*^9}},ExpressionUUID->"23630771-50c9-4b53-ab11-\
b3fe8802cfcc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"We", " ", "can", " ", "put", " ", "characters"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711179868744711*^9, 
  3.711179899321853*^9}},ExpressionUUID->"6c4e7757-118c-43b7-8e53-\
b409558e66fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7111799014676456`*^9, 3.713621294369154*^9, 
  3.713624514897881*^9},ExpressionUUID->"5bcf8c9c-0151-481e-9a3b-\
23d011d309cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<eggs\>\"", ",", " ", "\"\<bananas\>\"", ",", "\"\<oranges\>\""}], 
   "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"And", " ", "some", " ", "strings"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711179903035804*^9, 3.711179914640375*^9}, {
  3.7111801032283354`*^9, 
  3.711180149299493*^9}},ExpressionUUID->"40768d08-930a-4196-a0b7-\
d77ba0a4145f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"eggs\"\>", ",", "\<\"bananas\"\>", ",", "\<\"oranges\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7111802029990606`*^9, 3.713621294462903*^9, 
  3.71362451496039*^9},ExpressionUUID->"e266e01a-e9ff-4281-b759-f4112522e376"]
}, Open  ]],

Cell["\<\
The List is a container we use it to hold stuff, it\[CloseCurlyQuote]s \
implemented very efficiently in WL Most of the time in your computations you \
will be dealing with Lists. \
\>", "Text",
 CellChangeTimes->{{3.7111802182838016`*^9, 3.711180322652125*^9}, {
  3.7118020749667797`*^9, 
  3.711802132477376*^9}},ExpressionUUID->"2a108525-4152-4793-a45a-\
39d5414267ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "2", ",", "\"\<houses\>\"", ",", " ", "4", ",", " ", "\"\<cars\>\"", ",", 
    " ", "5", ",", "\"\<boats\>\""}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"You", " ", "can", " ", "mix", " ", "stuff", " ", "up"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111803264650917`*^9, 
  3.711180381851251*^9}},ExpressionUUID->"05a75915-5d81-4b23-bb99-\
4cdd48eb79bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "\<\"houses\"\>", ",", "4", ",", "\<\"cars\"\>", ",", "5", 
   ",", "\<\"boats\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.711180496321887*^9, 3.7136212945254087`*^9, 
  3.7136245150145864`*^9},ExpressionUUID->"de2f44a9-6174-4b71-aa43-\
ec73487120aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Or", " ", "use", " ", "a", " ", "Nested", " ", "List", " ", "to", " ", 
    "create", " ", "some", " ", "data", " ", "Structure"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118038800764*^9, 
  3.7111804857431808`*^9}},ExpressionUUID->"f973aba2-39a9-4275-a7a9-\
21de28168295"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "\<\"houses\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "\<\"boats\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7111804993127623`*^9, 3.7136212945879035`*^9, 
  3.713624515061534*^9},ExpressionUUID->"812a735d-0169-4eac-b5fe-\
efa763373b5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Get", " ", "the", " ", "second", " ", "item", " ", "using", " ", "an", 
    " ", "index"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118038800764*^9, 
  3.7111805437772493`*^9}},ExpressionUUID->"ea89a69e-adff-4d7e-b371-\
89e46de34a0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.711180545444748*^9, 3.7136212946863637`*^9, 
  3.713624515124031*^9},ExpressionUUID->"3a0411e5-f4fa-4fb9-9721-\
83596e40b9fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7111805744248285`*^9, 
  3.7111805884398427`*^9}},ExpressionUUID->"f58b13c5-fc7c-421b-8ae4-\
18ec07e7c804"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.711180589408593*^9, 3.7136212947423153`*^9, 
  3.713624515170908*^9},ExpressionUUID->"d81f75d9-d9a0-4197-ae98-\
65e5246e4be2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", "3", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "3", "rd", " ", "item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111805744248285`*^9, 
  3.7111806243064795`*^9}},ExpressionUUID->"15042344-7b70-47cd-8635-\
041e7e0be0b8"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.7111805980198593`*^9, 3.711180625485719*^9}, 
   3.7136212947891855`*^9, 
   3.713624515321471*^9},ExpressionUUID->"df2ffc33-2bdd-49fc-a9f4-\
fa9597ab461d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"With", " ", "Part", " ", "function"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806482133284`*^9, 
  3.7111806761447344`*^9}},ExpressionUUID->"156ba887-b3ef-4e32-a6ba-\
908c7b03a153"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.7111806833636894`*^9, 3.7136212948516855`*^9, 
  3.713624515399601*^9},ExpressionUUID->"422a6a06-d672-476f-a65c-\
8071c7b9e123"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"2", ";;", "6"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Gets", " ", "the", " ", "2", "nd", " ", "to", " ", "the", " ", "6", "th", 
    " ", "item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806905024624`*^9, 
  3.7111807421548204`*^9}},ExpressionUUID->"13166a2e-8db5-4228-9f60-\
4d40ef17dbc7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.7111807432695684`*^9, 3.7136212949141784`*^9, 
  3.7136245154620895`*^9},ExpressionUUID->"1ed8f8e0-d4a1-4070-835b-\
b567000d3e33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Last", " ", "Item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806905024624`*^9, 
  3.711180774076498*^9}},ExpressionUUID->"c528848e-a53c-4b1e-85f6-\
fce2e142a5f5"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.7111807758989286`*^9, 3.7136212950079355`*^9, 
  3.7136245155089707`*^9},ExpressionUUID->"df85e9ad-16b6-465c-af6f-\
d134a6c91b3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Last", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Last", " ", "function", " ", "for", " ", "last", " ", "item"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711180786461494*^9, 
  3.711180809691552*^9}},ExpressionUUID->"5ec1636c-0cae-45e2-97ad-\
68221256ebe2"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.7111808179689913`*^9, 3.7136212951508083`*^9, 
  3.713624515555847*^9},ExpressionUUID->"2b8ffece-cfca-4dc7-960c-\
4f4d668b289c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711180822241584*^9, 
  3.7111808458858666`*^9}},ExpressionUUID->"9e96abaa-0f78-4a6c-b7d8-\
0cf201d14972"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7111808564844465`*^9, 3.7136212951976824`*^9, 
  3.7136245156027136`*^9},ExpressionUUID->"40f7ad8b-ab36-4927-950b-\
b86b94445844"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Rest", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Without", " ", "the", " ", "first"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111808590372305`*^9, 
  3.711180890187527*^9}},ExpressionUUID->"66a7b646-cb12-4ba5-8ddf-\
4dec5999ec52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111808798502665`*^9, 3.7111808918124795`*^9}, 
   3.713621295260187*^9, 
   3.713624515649598*^9},ExpressionUUID->"f39b615f-308f-4afb-99c3-\
f35a1db9184e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Most", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Without", " ", "the", " ", "Last"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711180896573042*^9, 
  3.7111809202762547`*^9}},ExpressionUUID->"384238c9-5036-4288-895a-\
0d30f7c6c413"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111809060036554`*^9, 3.711180921327394*^9}, 
   3.71362129532314*^9, 
   3.7136245156964755`*^9},ExpressionUUID->"a19b5901-1d90-4a6f-b8e9-\
a2c1d6b9ade0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711180965311426*^9}},ExpressionUUID->"33910216-3e81-431a-a38e-\
e2890aef2bfb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.711180966709738*^9, 3.713621295385708*^9, 
  3.7136245157589684`*^9},ExpressionUUID->"0ae93d62-f68e-47ea-a4c3-\
3f3cb4cb0c7c"]
}, Open  ]],

Cell["Lets go deeper", "Text",
 CellChangeTimes->{{3.711180972776203*^9, 
  3.711180976267953*^9}},ExpressionUUID->"2828a095-50f8-43c5-a0fb-\
be991a2326ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711180990562297*^9}},ExpressionUUID->"cd9104ef-fe22-4d20-ad6a-\
2e9c9ea957e5"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7111809938075867`*^9, 3.713621295448203*^9, 
  3.713624515837094*^9},ExpressionUUID->"430ef6d8-2017-471d-a9fc-\
eea06f56d184"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.7111810039942102`*^9}},ExpressionUUID->"a057bb35-a788-478f-9df6-\
6b013d403a2a"],

Cell[BoxData["\<\"cars\"\>"], "Output",
 CellChangeTimes->{3.7111810054529643`*^9, 3.713621295495078*^9, 
  3.7136245158995953`*^9},ExpressionUUID->"7e039e4a-2ee9-4921-81b0-\
22154d98dada"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Another", " ", "way"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711181022903761*^9}},ExpressionUUID->"d2e6367a-c315-43d2-a2ab-\
657f2fc138bb"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7111810239874835`*^9, 3.711802374585159*^9, 
  3.713621295552844*^9, 
  3.713624515962098*^9},ExpressionUUID->"3b66791e-6e2a-4688-9ae4-\
5675ceb3d0ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "2", ",", 
    "1"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Neater", " ", "using", " ", "Part"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 3.711181022903761*^9}, {
  3.7118023784211397`*^9, 3.711802398359932*^9}, {3.7118024604441557`*^9, 
  3.71180248031387*^9}},ExpressionUUID->"c46a22a3-2f45-4420-98e3-\
6c7abf016427"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7118024017121477`*^9, 3.71180247026565*^9, 
  3.713621295646596*^9, 
  3.713624516008973*^9},ExpressionUUID->"9fadc749-33b0-4ad8-8524-\
f2708532be71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "2", ",", 
   "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 3.711181022903761*^9}, {
  3.7118023784211397`*^9, 3.711802398359932*^9}, {3.7118024604441557`*^9, 
  3.711802505279539*^9}},ExpressionUUID->"f7eddaa0-4132-4d52-b97f-\
7585c5c86b18"],

Cell[BoxData["\<\"cars\"\>"], "Output",
 CellChangeTimes->{{3.711802494215691*^9, 3.7118025067868357`*^9}, 
   3.713621295709096*^9, 
   3.7136245160558453`*^9},ExpressionUUID->"990f5c46-1f81-45bd-b6a8-\
1a001cbd4eb6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7118025138579597`*^9, 
  3.711802526072085*^9}},ExpressionUUID->"61740371-f185-444a-bddf-\
bcf065da2923"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "\<\"boats\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7118025273913927`*^9, 3.713621295771597*^9, 
  3.7136245161027184`*^9},ExpressionUUID->"b5dc7e97-897a-4852-bb68-\
a85b83ca7d9d"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"l1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"l2", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"56", ",", "3", ",", "4", ",", "67", ",", "7"}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7118021654828076`*^9, 
  3.711802197991621*^9}},ExpressionUUID->"7a10110f-42e5-4882-b2e3-\
0cdefd997817"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{"l1", ",", "l2"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"The", " ", "built"}], "-", 
    RowBox[{
    "in", " ", "function", " ", "Join", " ", "is", " ", "used", " ", "to", 
     " ", "joint", " ", "lists", " ", "together"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118022023095217`*^9, 
  3.7118022577201433`*^9}},ExpressionUUID->"f7399b56-72a5-40fe-bc4d-\
3cffbd93bdaf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "56", ",", "3", ",", "4", 
   ",", "67", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.711802210719093*^9, 3.7136212958653493`*^9, 
  3.7136245161808453`*^9},ExpressionUUID->"615d6c2a-19ba-4ae5-993e-\
a9e0fbdb1c5a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"l3", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7118022621039004`*^9, 
  3.7118022886305346`*^9}},ExpressionUUID->"17b05099-e380-4d8d-bf66-\
1c40a112c1e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{"l1", ",", "l2", ",", "l3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "can", " ", "Join", " ", "a", " ", "number", " ", "of", " ", 
    "lists"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118022909520297`*^9, 
  3.711802327870083*^9}},ExpressionUUID->"4726cee0-967d-46fb-ab94-\
61b673c16a09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "56", ",", "3", ",", "4", 
   ",", "67", ",", "7", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"d\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.711802304431653*^9, 3.713621295959095*^9, 
  3.7136245163370905`*^9},ExpressionUUID->"e6d2f815-9120-4a99-8a92-\
95b97070929a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Prepend", "[", 
   RowBox[{"l1", ",", "90"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Add", " ", "90", " ", "to", " ", "the", " ", "front", " ", "of", " ", 
    "l1"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118025731087255`*^9, 
  3.711802634032381*^9}},ExpressionUUID->"121aec8d-e927-4c74-bc6b-\
62619d9aefd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"90", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7118025847638283`*^9, 3.713621296021593*^9, 
  3.7136245163839664`*^9},ExpressionUUID->"16e06aa7-9344-4f9c-90aa-\
1ceab737c480"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Append", "[", 
   RowBox[{"l1", ",", "123"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "123", " ", "to", " ", "the", " ", "end"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118026026527042`*^9, 
  3.7118026498756475`*^9}},ExpressionUUID->"45497e0a-1bdf-47be-840c-\
05569ec3b68b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "123"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7118026127645082`*^9, 3.7118027752272773`*^9, 
  3.713621296162224*^9, 
  3.713624516446596*^9},ExpressionUUID->"fcf7ff49-12ec-4569-8456-\
971b606372b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"l1", ",", "1000", ",", "4"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Replace", " ", "the", " ", "4", "th", " ", "part", " ", "of", " ", "the", 
    " ", "list", " ", "with", " ", "1000"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711802706283656*^9, 3.711802736083034*^9}, {
  3.71180282870222*^9, 
  3.7118028498174286`*^9}},ExpressionUUID->"ddb37545-5ff0-49bc-89d1-\
7ee4716b4c8e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "1000", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{{3.711802721676694*^9, 3.71180273729074*^9}, 
   3.711802778822193*^9, 3.7136212962403474`*^9, 
   3.7136245164934645`*^9},ExpressionUUID->"6dfcbe3e-465e-41e7-8fb2-\
d02b7b9382b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l1", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "original", " ", "list", " ", "remains"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118028547335744`*^9, 
  3.7118028728639326`*^9}},ExpressionUUID->"8b2e8d55-9e77-4d9d-a492-\
0de038d0fe27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.7118028605301495`*^9, 3.713621296302846*^9, 
  3.7136245165499563`*^9},ExpressionUUID->"fd279945-ff5a-462d-b5a2-\
56ee4caa2e82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"l2", ",", "zzz", ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Replace", " ", "the", " ", "3", " ", "part", " ", "of", " ", "l2", " ", 
    "with", " ", "zzz"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118028810500154`*^9, 
  3.7118029153547173`*^9}},ExpressionUUID->"c6cf689e-af24-478d-a655-\
9acd16016435"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56", ",", "3", ",", "zzz", ",", "67", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.7118028928609467`*^9, 3.713621296365341*^9, 
  3.713624516675022*^9},ExpressionUUID->"cb474279-314b-485d-bca6-\
82e17442ecc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Delete", "[", 
   RowBox[{"l1", ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Remove", " ", "the", " ", "item", " ", "at", " ", "part", " ", "3"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.711803453415284*^9, 
  3.7118034838672953`*^9}},ExpressionUUID->"98e1ad60-b5e6-4ed3-acd7-\
2fac38e676c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.7118034855729704`*^9, 3.713621296427849*^9, 
  3.713624516721899*^9},ExpressionUUID->"a246a589-570d-43d0-a9ba-\
8bbf0775ac18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"longlist", " ", "=", " ", 
  RowBox[{"Range", "[", "20", "]"}]}]], "Input",
 CellChangeTimes->{{3.711803493466671*^9, 
  3.71180350269114*^9}},ExpressionUUID->"65190e17-9a96-4074-b51a-\
a06def6272bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.7118035036726203`*^9, 3.713621296490346*^9, 
  3.713624516800027*^9},ExpressionUUID->"47cf8fd2-21f9-4911-a066-\
9416bf5a6b2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Delete", "[", 
   RowBox[{"longlist", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "5", "}"}], ",", 
      RowBox[{"{", "10", "}"}], ",", 
      RowBox[{"{", "15", "}"}]}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Remove", " ", "items", " ", "at", " ", "various", " ", "locations"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.711803507091137*^9, 
  3.711803543131174*^9}},ExpressionUUID->"bcfbca03-3861-4d44-8956-\
bcf6a38a9a3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "11", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", 
   "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.711803544372176*^9, 3.7136212965840964`*^9, 
  3.7136245168937817`*^9},ExpressionUUID->"bdc9fd82-7ed6-412f-88d8-\
c65a8baf6817"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Random", " ", "Integer", " ", "between", " ", "1", " ", "and", " ", 
    "10"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181190796035*^9, 3.7111811968722677`*^9}, {
  3.711181320078122*^9, 
  3.711181337059101*^9}},ExpressionUUID->"f728d6d6-e54b-405c-8cfd-\
affa227a921d"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{
  3.7111811978096156`*^9, {3.7111813383047037`*^9, 3.711181343557985*^9}, 
   3.713621296630972*^9, 
   3.713624516940647*^9},ExpressionUUID->"ac8c61c0-8df3-46eb-85ba-\
826c3c03b650"]
}, Open  ]],

Cell["A bunch of them in a List", "Text",
 CellChangeTimes->{{3.7111812077397823`*^9, 
  3.711181215249175*^9}},ExpressionUUID->"c1d59209-95be-4e98-9efb-\
63c8cc16a741"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "10", " ", "numbers", " ", "between", " ", "1", " ", "and", " ", "10"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111812185925865`*^9, 
  3.7111812454258604`*^9}},ExpressionUUID->"7220b72a-7d00-4396-a20f-\
af187c354c35"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "10", ",", "9", ",", "10", ",", "2", ",", "3", ",", "4", ",", "8",
    ",", "0", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111812288755903`*^9, 3.711181246664826*^9}, 
   3.711181374660991*^9, 3.71362129669347*^9, 
   3.7136245170187736`*^9},ExpressionUUID->"debd843c-159d-4e8e-b753-\
83ae353f292d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randInts", " ", "=", " ", "%", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"save", " ", "it"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111813581157947`*^9, 
  3.711181390200697*^9}},ExpressionUUID->"28ffa0a9-6276-4c7c-b34b-\
6ea77c7665a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "10", ",", "9", ",", "10", ",", "2", ",", "3", ",", "4", ",", "8",
    ",", "0", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111813677614474`*^9, 3.7111813771341534`*^9}, 
   3.713621296755968*^9, 
   3.713624517096903*^9},ExpressionUUID->"a82b6922-c5ab-4009-afcb-\
88e71008931d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot", "[", "randInts", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7111814342530003`*^9, 
  3.7111814567812643`*^9}},ExpressionUUID->"d768ac44-436d-4ea4-ae4a-\
14aa993af858"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 0.}, {2., 10.}, {3., 9.}, {4., 10.}, {5., 2.}, {6., 3.}, {
      7., 4.}, {8., 8.}, {9., 0.}, {10., 
      9.}}]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {0, 10.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.711181448733715*^9, 3.713621298958128*^9, 
  3.7136245178625264`*^9},ExpressionUUID->"039f3c83-42f3-48cb-886e-\
cba53ba4fc5c"]
}, Open  ]],

Cell["I prefer seeing a line", "Text",
 CellChangeTimes->{{3.711181468184251*^9, 
  3.7111814718695955`*^9}},ExpressionUUID->"451adfce-08e5-4f02-bf45-\
f723a8e3139c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "randInts", "]"}]], "Input",
 CellChangeTimes->{{3.7111814740161977`*^9, 
  3.711181480730474*^9}},ExpressionUUID->"f5472c69-bd49-477e-8b6f-\
96d7e79c7819"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 10.}, {3., 9.}, {4., 10.}, {5., 2.}, {6., 3.}, {
      7., 4.}, {8., 8.}, {9., 0.}, {10., 9.}}]}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {0, 10.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7111814817204905`*^9, 3.713621299391487*^9, 
  3.7136245183156557`*^9},ExpressionUUID->"1f55947e-5d36-4d4e-adca-\
2a7175ca9db4"]
}, Open  ]],

Cell["Some deeper structure", "Text",
 CellChangeTimes->{{3.7111815238064423`*^9, 
  3.711181540722252*^9}},ExpressionUUID->"83eaf475-fc47-4212-b0cd-\
5c3fee18931a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "6"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "3", " ", "Lists", " ", "of", " ", "6", " ", "items", " ", "each"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118154263924*^9, 
  3.7111815857675996`*^9}},ExpressionUUID->"9a44ba5a-2a6e-4d3d-bc5a-\
d9a76a297b8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "1", ",", "6", ",", "5", ",", "5"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "4", ",", "1", ",", "6", ",", "9"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "2", ",", "3", ",", "5", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7111815616772213`*^9, 3.711181591679433*^9, 
  3.7136212994539847`*^9, 
  3.713624518378148*^9},ExpressionUUID->"ce70c4e2-d58d-422d-ba51-\
3b7d2d8326d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "3"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "6", " ", "Lists", " ", "of", " ", "3", " ", "items", " ", "each"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118154263924*^9, 
  3.7111816197662916`*^9}},ExpressionUUID->"9f209797-86d5-4031-b0ed-\
80a7a8bc516b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "10", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.711181612144677*^9, 3.7111816302674985`*^9}, 
   3.713621299500785*^9, 
   3.713624518456273*^9},ExpressionUUID->"d2adfa47-db16-46e6-8f36-\
cb36f87cb799"]
}, Open  ]],

Cell["Even deeper, depth is measured by Levels of Nesting", "Text",
 CellChangeTimes->{{3.7111816633834467`*^9, 
  3.7111817052305536`*^9}},ExpressionUUID->"3998bbbe-994b-4aba-913d-\
b7306acd32a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"100", ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.7111817451085*^9}},ExpressionUUID->"06a73449-67be-447c-a1f2-e57e68522a96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"50", ",", "71", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"58", ",", "43", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "17", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "76", ",", "85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "72", ",", "30"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"86", ",", "73", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "82", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "66", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "15", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "54", ",", "39"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"37", ",", "20", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "4", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "74", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "6", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "61", ",", "32"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"12", ",", "51", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "74", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"85", ",", "85", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50", ",", "76", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "92", ",", "68"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"77", ",", "49", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", "38", ",", "92"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "45", ",", "37"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "95", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "62", ",", "31"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"88", ",", "1", ",", "75"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "83", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "42", ",", "66"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "6", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"94", ",", "89", ",", "87"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"19", ",", "42", ",", "45"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "91", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "89", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "30", ",", "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "17", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"85", ",", "18", ",", "34"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "7", ",", "14"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"99", ",", "42", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "88", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "26", ",", "55"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"27", ",", "48", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "65", ",", "41"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "62", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "100", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "99", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"78", ",", "16", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "51", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "73", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "88", ",", "67"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "67", ",", "87"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"44", ",", "26", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "34", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "35", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "15", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "4", ",", "63"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"44", ",", "5", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "79", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "77", ",", "67"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "50", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "97", ",", "72"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"13", ",", "63", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"99", ",", "48", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "17", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "37", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "72", ",", "71"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"97", ",", "90", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"26", ",", "44", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "80", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "28", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "1", ",", "26"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"13", ",", "96", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "3", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "34", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "63", ",", "25"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"73", ",", "49", ",", "88"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"88", ",", "71", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "5", ",", "64"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "94", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "59", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "7", ",", "33"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "63", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "10", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "64", ",", "22"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"49", ",", "49", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "63", ",", "20"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"15", ",", "8", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"55", ",", "41", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "2", ",", "54"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"56", ",", "38", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "43", ",", "59"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"29", ",", "14", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50", ",", "43", ",", "79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "32", ",", "14"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "6", ",", "85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "50", ",", "15"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"97", ",", "88", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "1", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "27", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "4", ",", "92"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "5", ",", "13"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"69", ",", "66", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "7", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "55", ",", "64"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"58", ",", "3", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "28", ",", "78"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"99", ",", "54", ",", "42"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"45", ",", "19", ",", "48"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "64", ",", "88"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "71", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "12", ",", "95"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"30", ",", "30", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "18", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"82", ",", "18", ",", "37"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "27", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "35", ",", "80"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"65", ",", "11", ",", "95"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "13", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"38", ",", "43", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "64", ",", "45"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"41", ",", "9", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "72", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "10", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "14", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "57", ",", "21"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"21", ",", "48", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"38", ",", "46", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "21", ",", "99"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "42", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "59", ",", "3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"28", ",", "11", ",", "40"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "40", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"98", ",", "57", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50", ",", "46", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"72", ",", "38", ",", "54"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"30", ",", "10", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "84", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "79", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "63", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "41", ",", "38"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "21", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "45", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "88", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "33", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "91", ",", "7"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"56", ",", "7", ",", "47"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "79", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "50", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "82", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"45", ",", "3", ",", "4"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "76", ",", "66"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", "86", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "28", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "100", ",", "87"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "62", ",", "55"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"72", ",", "76", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "96", ",", "92"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"21", ",", "93", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"91", ",", "91", ",", "66"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6", ",", "77"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"95", ",", "53", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"72", ",", "39", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"99", ",", "69", ",", "65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "16", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "73", ",", "39"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"6", ",", "8", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "63", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"28", ",", "84", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"72", ",", "84", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"82", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"38", ",", "92", ",", "95"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "60", ",", "65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "71", ",", "61"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "8", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"28", ",", "7", ",", "66"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"94", ",", "77", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "35", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "69", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"55", ",", "92", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "97", ",", "92"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"22", ",", "63", ",", "93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "4", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"26", ",", "21", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "92", ",", "47"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "50", ",", "40"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"71", ",", "48", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"76", ",", "27", ",", "49"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"45", ",", "10", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "29", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"21", ",", "48", ",", "67"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"96", ",", "25", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"76", ",", "61", ",", "48"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "74", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "65", ",", "87"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"41", ",", "46", ",", "65"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"45", ",", "62", ",", "40"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "30", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"49", ",", "97", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "97", ",", "64"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "43", ",", "46"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"41", ",", "41", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "17", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "77", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "53", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "18", ",", "19"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"77", ",", "17", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "4", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "52", ",", "79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "29", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "1", ",", "16"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"37", ",", "21", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "94", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "75", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "41", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "27", ",", "29"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "0", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "29", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "42", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"56", ",", "48", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"79", ",", "67", ",", "77"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"97", ",", "61", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "79", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "79", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "84", ",", "33"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "62", ",", "18"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"87", ",", "98", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"76", ",", "51", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "58", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "84", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "9", ",", "50"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"24", ",", "69", ",", "36"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "40", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "25", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "56", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"35", ",", "43", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"26", ",", "87", ",", "33"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "21", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "78", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "1", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"85", ",", "92", ",", "17"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"29", ",", "62", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "61", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "42", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "44", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "25", ",", "17"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"45", ",", "13", ",", "65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "61", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "93", ",", "34"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "57", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "35", ",", "21"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"20", ",", "91", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "99", ",", "41"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "34", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"99", ",", "89", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "51", ",", "23"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"23", ",", "75", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "54", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "16", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "59", ",", "61"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"29", ",", "6", ",", "6"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"56", ",", "35", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "51", ",", "88"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "30", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "77", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "84", ",", "50"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"41", ",", "78", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "57", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "49", ",", "45"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "1", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "42", ",", "80"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"64", ",", "80", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "51", ",", "87"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "91", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"38", ",", "61", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "84", ",", "92"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"26", ",", "31", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "68", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "78", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"56", ",", "31", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "42", ",", "93"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "72", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"19", ",", "33", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "45", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "95", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "31", ",", "16"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"87", ",", "26", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "29", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "30", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "67", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"58", ",", "63", ",", "13"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"13", ",", "62", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "87", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "30", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "98", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"56", ",", "51", ",", "86"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"73", ",", "73", ",", "34"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "12", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"47", ",", "25", ",", "54"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "40", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "1", ",", "22"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"28", ",", "23", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "31", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "69", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "56", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "29", ",", "36"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"73", ",", "6", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "39", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "81", ",", "41"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "12", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "96", ",", "27"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"96", ",", "20", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "1", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"33", ",", "58", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"82", ",", "29", ",", "85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "75", ",", "76"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"63", ",", "84", ",", "61"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "33", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "70", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "64", ",", "34"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"69", ",", "42", ",", "52"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"88", ",", "57", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "48", ",", "95"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"28", ",", "5", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"85", ",", "90", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "38", ",", "67"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"82", ",", "71", ",", "40"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"45", ",", "60", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"79", ",", "18", ",", "33"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "18", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "2", ",", "30"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"90", ",", "9", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"21", ",", "22", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "20", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "73", ",", "79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "6", ",", "97"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"54", ",", "76", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "3", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "1", ",", "14"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "36", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", "26", ",", "3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"96", ",", "17", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"74", ",", "77", ",", "15"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "56", ",", "93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "52", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "52", ",", "43"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"73", ",", "35", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"76", ",", "23", ",", "48"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"76", ",", "15", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "70", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "95", ",", "43"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"59", ",", "56", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "55", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "17", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"90", ",", "0", ",", "42"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "1", ",", "20"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"50", ",", "83", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "83", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "30", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", "100", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "78", ",", "100"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"90", ",", "21", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"22", ",", "81", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"94", ",", "97", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "80", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "11", ",", "55"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "63", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "72", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "38", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "38", ",", "37"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "86", ",", "90"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"97", ",", "55", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "33", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "4", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "77", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "79", ",", "34"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"92", ",", "60", ",", "18"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"29", ",", "70", ",", "67"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "69", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "39", ",", "42"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "19", ",", "19"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"63", ",", "62", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "89", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"70", ",", "95", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"91", ",", "40", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"28", ",", "95", ",", "22"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"92", ",", "5", ",", "75"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "16", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "22", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "98", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"49", ",", "49", ",", "26"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.711181746930977*^9, 3.7136212996727343`*^9, 
  3.7136245186760483`*^9},ExpressionUUID->"5cdbe5fd-2a42-4d8f-80bc-\
15e69cdb2271"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Short", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Short", " ", "to", " ", "show", " ", "a", " ", "surmarised", " ", 
    "version", " ", "of", " ", "some", " ", "Long", " ", "list"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.711181791374464*^9}},ExpressionUUID->"7ce66f05-c969-43de-bcf3-\
a3108dfdd53d"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.7111817684064894`*^9, 3.713621299766484*^9, 
  3.713624518754178*^9},ExpressionUUID->"47b23177-ab91-4a17-9263-\
ebf3fa6cebae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Dimensions", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "Dimensions", " ", "gives", " ", "us", " ", "the", " ", "Dimensionality", 
    " ", "of", " ", "some", " ", "Structure", " ", "so", " ", "we", " ", 
    "can", " ", "know", " ", "how", " ", "many", " ", "levels", " ", "of", 
    " ", "nesting", " ", 
    RowBox[{"we", "'"}], "re", " ", "dealing", " ", "with"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.7111818861152735`*^9}},ExpressionUUID->"8eec41c7-b5b0-49cc-aa71-\
66407767c29e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.7111818885022163`*^9, 3.713621299828984*^9, 
  3.7136245188010488`*^9},ExpressionUUID->"6bc4ac85-6e91-48d0-a7fd-\
395bf16d0791"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "40"}], "}"}], ",", "14"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Random", " ", "numbers", " ", "between", " ", "20", " ", "and", " ", 
    "40"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 3.7111818861152735`*^9}, {
  3.711181921950455*^9, 
  3.711182007660013*^9}},ExpressionUUID->"eff775ea-1f68-48cc-b9fd-\
33fe01f9b7e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "34", ",", "31", ",", "26", ",", "21", ",", "33", ",", "37", ",", "22", ",",
    "35", ",", "29", ",", "34", ",", "30", ",", "20", ",", "34", ",", "32"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7111819572593317`*^9, 3.7111819697462263`*^9}, 
   3.7111820087273045`*^9, 3.7136212998914857`*^9, 
   3.713624518847928*^9},ExpressionUUID->"2ce57fe7-ce63-40b6-a309-\
2511799e8787"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Gives", " ", "you", " ", "the", " ", "length", " ", "of", " ", "the", " ",
     "outermost", " ", "layer", " ", "of", " ", "the", " ", "nested", " ", 
    "list"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711182071124748*^9, 
  3.7111821137455325`*^9}},ExpressionUUID->"be247507-8031-4408-8536-\
35972af24bd8"],

Cell[BoxData["13"], "Output",
 CellChangeTimes->{{3.711182066580553*^9, 3.7111821159432793`*^9}, 
   3.7136212999383574`*^9, 
   3.713624518910421*^9},ExpressionUUID->"a14875a3-72e4-4895-8591-\
42daeeca12c7"]
}, Open  ]],

Cell["If we have a one dimensional list", "Text",
 CellChangeTimes->{{3.711187403844759*^9, 
  3.7111874150445504`*^9}},ExpressionUUID->"7d7a7b29-689c-4dc0-9db6-\
96c4a7ad2817"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"100", ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 
  3.711187433155571*^9}},ExpressionUUID->"86898dd7-22e1-4800-8832-\
d5543bf90864"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "36", ",", "18", ",", "14", ",", "5", ",", "16", ",", "89", ",", "25", ",", 
   "21", ",", "49", ",", "28", ",", "43", ",", "11", ",", "56", ",", "61", 
   ",", "64", ",", "28", ",", "11", ",", "38", ",", "4", ",", "6", ",", "7", 
   ",", "86", ",", "34", ",", "9", ",", "49", ",", "83", ",", "86", ",", "70",
    ",", "10", ",", "58", ",", "30", ",", "49", ",", "18", ",", "51", ",", 
   "38", ",", "30", ",", "99", ",", "22", ",", "40", ",", "71", ",", "63", 
   ",", "78", ",", "78", ",", "8", ",", "40", ",", "36", ",", "34", ",", "7", 
   ",", "67", ",", "62", ",", "70", ",", "0", ",", "41", ",", "82", ",", "20",
    ",", "90", ",", "87", ",", "82", ",", "78", ",", "82", ",", "6", ",", 
   "36", ",", "89", ",", "4", ",", "29", ",", "2", ",", "84", ",", "83", ",", 
   "5", ",", "42", ",", "68", ",", "26", ",", "26", ",", "1", ",", "43", ",", 
   "34", ",", "29", ",", "81", ",", "88", ",", "64", ",", "18", ",", "17", 
   ",", "57", ",", "13", ",", "25", ",", "64", ",", "35", ",", "9", ",", "16",
    ",", "58", ",", "39", ",", "42", ",", "13", ",", "58", ",", "92", ",", 
   "95", ",", "5", ",", "85", ",", "58", ",", "83"}], "}"}]], "Output",
 CellChangeTimes->{3.711187434433689*^9, 3.7136213000164785`*^9, 
  3.7136245190198*^9},ExpressionUUID->"3cdfe33d-51cc-4145-b778-847fb6df0e6d"]
}, Open  ]],

Cell["\<\
The best way to gain some idea about these numbers is to plot them, \
personally I prefer using a line plot\
\>", "Text",
 CellChangeTimes->{{3.7111874368322463`*^9, 
  3.7111875144925814`*^9}},ExpressionUUID->"1c5eabf5-02f8-4440-be42-\
7c5729a476f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"100", ",", "100"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 3.711187433155571*^9}, {
  3.711187518936808*^9, 
  3.7111875310049877`*^9}},ExpressionUUID->"768dbebc-1f5d-422e-8797-\
df66d07354a9"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxllElOBDEMRUusWLJgwYIFIIQQQoh5hg7zDE31QLNFsOYKOVodiSMw1HuR
EiK1vn7Zcexvu2ffPuuPsaqq3n9+v9ier84fxPvAB3ABHG8xPMMnWmxe4JPe
40xh7/N9GjwHZ7D34HMtxho+z3vdIo8TcBE8A5dA81sG78AV8AlcBQ/BtSL+
OngJbpCf9k34NXyryGcbPAZ3QHXaBW/BPVC99olvPw6KOOatDkf4PxTv0oeq
A1pXyL9H+SlondSX6u4Wfo/Y5cyFOjgfUV2sgzlwPqJzYX4XoLrDg/rYF+JF
eLTfV8V9ubpZF/OQ+ui5KexydaBv1h3to3NKHu5Lyst9oa9xCMrVwT66l/BU
v7pbB7yxP+atvs69c64f9bhnYYS/9n4R13lzz+qiTvoc4Q31Ndp7+T31CnX+
rv8DkXwaePq/ENm7AHdO0jucdO8or8v5UdeUp9z39TfvQZ5PgKtr1E6/m8K/
su/YwzCvK81FoWPab+OSV3DPBnlc5/3fHo5yP/seCt3dQ3VI+/mKXz98A6Ac
mQc=
      "]]}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 100.}, {0, 99.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7111875346688075`*^9, 3.713621300235235*^9, 
  3.7136245191760473`*^9},ExpressionUUID->"660390ce-182e-4c8c-8252-\
c86ef765f905"]
}, Open  ]],

Cell["\<\
A better choice of graphing in this case could be a Histogram\
\>", "Text",
 CellChangeTimes->{{3.7111875648616657`*^9, 
  3.7111875964228373`*^9}},ExpressionUUID->"ab954d14-49c8-4cb3-856d-\
e436472bb05e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"100", ",", "100"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 3.711187433155571*^9}, {
  3.711187518936808*^9, 3.7111875310049877`*^9}, {3.711187606827535*^9, 
  3.7111876256282587`*^9}},ExpressionUUID->"551751f6-13f5-4d9f-bd4b-\
1bed640ed359"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.651], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.651], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {20., 17.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{25.199999999999996`, 
          104.79999999999998`}, {-70.23647268237701, 113.10933025529607`}}],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{20., 0}, {40., 20.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{104.19999999999997`, 
          183.79999999999995`}, {-102.48573202431935`, 113.10933025529609`}}],
        StatusArea[#, 20]& ,
        TagBoxNote->"20"],
       StyleBox["20", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[20, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{40., 0}, {60., 22.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{183.19999999999996`, 
          262.79999999999995`}, {-123.98523825228087`, 113.10933025529609`}}],
        StatusArea[#, 22]& ,
        TagBoxNote->"22"],
       StyleBox["22", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[22, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{60., 0}, {80., 21.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{262.19999999999993`, 
          341.79999999999995`}, {-113.23548513830009`, 113.10933025529609`}}],
        StatusArea[#, 21]& ,
        TagBoxNote->"21"],
       StyleBox["21", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[21, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{80., 0}, {100., 20.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{341.19999999999993`, 
          420.79999999999995`}, {-102.48573202431935`, 113.10933025529609`}}],
        StatusArea[#, 20]& ,
        TagBoxNote->"20"],
       StyleBox["20", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[20, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-2., 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 100.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.71118762722318*^9, {3.711187667367027*^9, 3.711187670916011*^9}, 
   3.7136213011751404`*^9, 
   3.713624519691679*^9},ExpressionUUID->"1950f8ce-9656-4fa9-9c90-\
201cc7dffe9c"]
}, Open  ]],

Cell["Sometimes we have two dimensional data", "Text",
 CellChangeTimes->{{3.711187694005636*^9, 
  3.7111877057888536`*^9}},ExpressionUUID->"6642c1fc-4fc2-4fb6-99ea-\
2f11aa52a211"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"100", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 
  3.7111877311091423`*^9}},ExpressionUUID->"d860fea0-3597-44bb-a25f-\
21e1ddadbbb6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "0.36663331448087777`", ",", "0.8800549563564095`", ",", 
             "0.8326181820600094`", ",", 
             TemplateBox[{"94"},
              "OutputSizeLimit`Skeleton"], ",", "0.8817395738348262`", ",", 
             "0.08850566345700339`", ",", "0.7726990950024741`"}], "}"}], ",", 
           TemplateBox[{"98"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"{", 
            TemplateBox[{"1"},
             "OutputSizeLimit`Skeleton"], "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{76., {3., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{62., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 106, 24114861866971137195, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{74., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 106, 24114861866971137195, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{54., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 106, 24114861866971137195, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{69., {28., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[24114861866971137195 === $SessionID, 
   Out[106], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.711187734378443*^9, 3.7136213016595187`*^9, 
  3.7136245199573*^9},ExpressionUUID->"9d3abf68-7f5c-4ae2-aa69-bf6a234e7fb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{"Dimensions", "[", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Getting", " ", "the", " ", "Dimensionality", " ", "of", " ", "data"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187872538808*^9}},ExpressionUUID->"276d9446-2ce8-4efc-8a7f-\
05091805ff68"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.711187828265956*^9, 3.7111878446652756`*^9}, 
   3.7136213019095244`*^9, 
   3.713624520285428*^9},ExpressionUUID->"3598621d-a354-4f8b-97b8-\
68624a551f8f"]
}, Open  ]],

Cell["To view such data we use some tools like", "Text",
 CellChangeTimes->{{3.711187876809779*^9, 
  3.711187897212763*^9}},ExpressionUUID->"8c6ffb4d-1950-462b-b50f-\
68672f31c47a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187958721474*^9}},ExpressionUUID->"a7b5bfa5-4e15-47f1-8028-\
c41b348ba64b"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
wnwzt9F70xSQOrKyE82oqJXgHOgmvvd/Hw/9ug==
   "], {{0, 0}, {100, 100}}, {0, 0.9998706023122832}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.7111879400567756`*^9, 3.711187960369717*^9}, 
   3.7136213021595507`*^9, 
   3.713624520472926*^9},ExpressionUUID->"4bbc567c-a935-46c3-91e7-\
8b673b1f39f1"]
}, Open  ]],

Cell["The result is a random image", "Text",
 CellChangeTimes->{{3.7111879690357256`*^9, 
  3.711187975342957*^9}},ExpressionUUID->"1114e16e-3a04-491d-91c0-\
75b865f21ce0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "100"}], "}"}]}], "]"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187986159984*^9}},ExpressionUUID->"4b369036-3306-4e83-bac8-\
48b4442d8eb2"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
I/xlQ8nqHF+CMzNshtRqKhFbUqJQ58XBePvFFzq3y6Gkfox5zCMBse6T8oJP
Y9Hdsf/4Xf0WSKTWth7z6oDSIpuFRcVjqA46+3c8pQbTRu+vnJtPBV3via6D
JR/a221sXMK7Mff73/RlUSbKLU2WbY5nwO6gGxY29WBy9ZvMnVcoyDi48EuI
dj48RTeqqZMGoHCn7KdK9hhibi5JPj2PC/8V9UI2pmUQSTxvbRpF9Njzhwdf
+3TBWPynbm94Hihry5yb+nNgLD+klJzVBKZbZ2WWYh3EYqZszYj5jeZPGv3t
aAG95pHMn0+EP8YaKogltyFlQd2B/6w50NgrE27TVIcQ6cYiM9Iw1Hzk7Yt9
W8AVXR2W39kN5+uBBbvPsjFb3Gkb2joK49h1y5bOdqFaQ8QsXHMYOj5e9hyC
myIqfmfm7axFxHHvUvngZuTkJHPr7SqRKugwmfi+DdbiCgpXLIvR35sjXXKZ
Dfnc9+fct9Ph1R1pWPKJAYkvlGtl5xg4wN6isT6PhdgvfTHfglkQ+fhvr0oi
DRZ9829rlpWA/m/vQK4zHbrVhrulEqhw85jdJiTCg3as4DLqRD/81fpr+df7
obqubnommcjLqBCXhvwuzEpLHDumUgr7Tf7kvz0cKJwdXinTQoXMa7v322T4
aJ5nqhhvwkSnuIetPOHB0ffvc8oetEBbqPX4GkoJBAZOzPt6MRkeU1Ix7a84
UL0yWvfGmI45jQyFChAcXuR9s2leM6LVc0PkcmloT9ow+ZXeg3GnDzuEPblw
XDGjYS1JR9jmoPzopC7k+GwZWS5QBfEfP2O5xQyQHvmxFDPJiLi94YbXYiry
qFeHK4i8H+fmztqoMxCQ9zfzsgYD5Mji3/lWsTAQ/7zJtIMNgzW6u218m+Gj
znZVLRzG5EnPiNdvOsDce1U8z6YREW/LaLVKNDy/UbHnsjsPrh8kTU6cbYfO
mjLRz8JUuE4/6Am0pEDuc2CG6aE6CEy7Z7ESbkLuQ0J+kHcNVP58FpkOaoZc
wfJl+svboH3JQNmD8EpK9pvdv663QcFQbG7p+0E07iHxTzTQIP70nFOEKhtZ
04b3Ao5Roaj+FKrqI/B1nBpXySH2Wv72l8Vnx6C94c9wNr8OdLGVOosjByDw
QffCA70yNF603733Jh/yt3cHLuQT+37A5/xW2Q50r+fMJkSMgtKv+NApoBcC
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
tKwJpctkOM+Jc1DZXMgTFumD2befSZ6CDuhsDKsqfkxwquj7B5fWvwT5asOu
P31tUFaluj5ZzkXoDJRpZxph1rL9sOrKHihwlPdnPclHTLz2ISU+Expk8Y2s
ROJ6Sht+jWRcB7lC+0KtbzXqBp/E/VRsJPL0go7NiizIWVKjZ3IrQIvSevIx
NQdy1YkfOt0HwRvs8s+SbYGanaT5vXEqcikPTs9aErl0JqEjdZrgBad7ybv3
xsDXA9dDvjExtLlpoOELH+U/uo8G+XCgMJ4X7xzRg4AbdcLrmV8RR90Xx48g
OCZ4PLH/Qy+s5OfHXBhngiy8x/S3cSXIuSc/JgYRedz97XjByTLIvU79eOUl
AzeXDBR014xgyybxy6w/PDQ0W5/a4DAAwtrClDp5KGX9JyJ48A3jVl98GsVb
kORDHdMzG0RT0ecz9icZ8Iv6ktrg0Q+zr2vinJ1G0CKncmr3ej5yy48ncFxb
Ee6wbuRt3XcEdszdsuzwCCwC9Bq7J0cQ7zLzt9+zDQqrN788ey4LIjc6DJPs
OqDbYp2gG8SFUT39MMU0ByEj8uucJigotrrAD/ckvEv7Fy/0ZykE2ZeUS90F
WPU4cQXjXxtcek2f7yRy9Gbe2QyZUga0rCRndp5kIrbz9qgWTQDPL+eurzUr
Ra7PJptxxSr4Kj0Rd9hJzOu42ouy3mRkPZWo1rw8AiO1z3Hx7AqYLXodZGjC
gHZw5x3rF9+g0ZTGX29OgfEeH7Ed6TRI33ywTMGK8LEbnRfvc1sg1CV8Zhsn
BwYNuRM170bQIBVJKpykQcGVuT0m6hss7p2bcNHlQnWJJ2mD+hCEhadlu03Z
CBrS0MkWp8MoL3WlMaUXusf49LUvaYiPKD8jt5MGMbtan8cCBmanFermuBD8
Kdg8JFZLh9C6O8av9t2FhoTVwefJxPuonjvjGpKAk+2FHmGb2BhVIW2ffdwM
6+WPr////o4ibP4lRet+WK8w/rlOpRXk+h9fzoV/h/YxlS/OVbXQ58y5v+SJ
ACqpC/IDF9FgpCFcGvaqBZWWXwqljQSQeH4v599NFmifXxXWra1GeKt4b3HT
MISyn+Y2On+CBDtqj85nHnLDbwXfT+cjR90/pSWQjReT+n1JhEem8T6E5Nm1
QLlX6v7OzDYYDbzLzRtPB4mT2LTHqA9evuuqIxayMdOh6GgX343tT74uzIhi
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
xwjOtsCv46Ivz416kNRrHRwakyGeHb6Dmk1GQ+CRlraESRhrzve7cNdBVsF+
x5zAZ9hlsJQW3OhglfnyCTnQ4Jq56pysQD88b4rVm51lEv7oquznWI+AtYVy
wbE0iD36UVp5bAyahosS5uonkWEcYXl/gQZO2ZtXrrfJmJq8IP8poAXf7e+S
rtf3IuCKwK0XL1rR8Fj/rODhLkhkDJaf4KNBWfOQhOn2EchOKVpUhk3CNYoi
9y2G4N+zbol3nmfDzzupPGOcgqCxZ5Jcc6NQbv4zZGnRBNm9Uxrm/T3wmRY4
xxobhHETrbnc5V9PRDdbEn1uzqu9Jq18HMYfGeILpW1ouEm+Usg9CLdLrttU
LDnQY+7VUY/pwPzdR4ys6BEMPJr7EDLTB3aE2dncS71QThXZ527birmLS96x
ynsRu190wuRWG9Ls817kzlDhuf5aXXkIDcIXG84q6DHBFRRcGnJLH9dTls6h
goFavey8dSDyax1FxPxVPn7pFN3uOMZCfibpkLwt8fM48WPvPo6Ae7zN8fcC
8XUSzkuVDjbDOJ6sK1H97+/HGtU/KdXYhdWnEm8S55P9K+CyaCa6ltvtD1Rj
wtHz6uybkD7w6eecp5e1wVzt5Y2tb5qhPHTYwKOFgp7Obes0Tg6B05N2qleB
ifirvHHVDcT5m+Y74Xm8CYce51mV/CH8YWpR9j0+gpfydl5a+/A6kXdOGwP0
JsFzWrU0OacN00OtR08c+ecZWqmPOgk/qda4lfc2FpHGvwf543vhXzhxuGKO
AnuV9BXXUyZhmVC5vLKNAtlvtMS5TX3goZeJRLztRm0Utx9vVwtIhq5GL64U
Q6Jll7iwbwXIlKKmudsfEaB/U0aE4BjnifEW7r398NqaZHBWlpirc1tTuSZK
YXjWfPazWTccqzWL4290wu9oWsMGecJHbh1VVRZ/iaKNy4KMeYnjyNgY2HHr
E8y5H7nP/2mAZNmW+DCCg/mO555SOzuCQ/Nf5W3tmDh5q8/zF8GvLx7fy59r
I/qI5GRVe4zYO/NCU4XHF3FO7dhw8uwEuPtMu+6o0KEccj7qhGEHIkfPXbYS
ZMK97cQRvsRGuFaIapufGkD2mhXhpu3dsF9k+lFnCRn73Yk4ekFD0Avp8frT
eSDxr2HVhH2G7fa6k5m6Y3C3ULhpzEecj5zVknYGyfD6+uRZ5UY67qud0Gi/
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
64ba5Qj5gwUdEBlb4J3L3oAxEXPzZHItcqY8OzeLUzBG3TdwfFUJslYYqQZZ
cZHax1BdG96Kye+eheQDDITdCD8gWTsCrW8+ihlv65CUciz5o89bbJq/6xUj
+f/PKeFdrXYeRZ1y5xzZFsLDmcnx0Y/YGFAt5H76//2ncGSXzeqB4b/YinV5
fJxu0Turzxbghl7eXXuC42nzdP9T6OPCjqOXGKrTDdsx84zFgy0wNjosY0Ts
l+lbmZkeqTbsFm2k/vSjoubmrhhFu3ZYaHaLbStogc0C1cFHZb0on3n8cySF
hiDzgKMcwg/9N2ceHUmgIT/93LrdvD6IT22dAxYPxQlXloVXCBHoNcCjn2Uj
/JyfZnRGA7xbDBtPDHVg39s2sa3lLHicP/xuTzoH5GWy/Ce3iLm7InRr/3sf
glQzUx/rFozP2vi7bgHhy5LCOr2nTbAJkdpX2NYHD5dvExesGcj8Lsu8bshF
S0ZQ3J99g+CxTY659I/A/6iy/1GlOCwOvfWu6AoDpky7Z/mzOrDNc1304WjC
k0yM12Y+qUONWeC8EykEb62ef0pSgwvFKtuIIl8qhKH76muDCO/Z67z81n8s
6M6cfzsWzcPVzxtddy5mQnf2Wt0POlzoLjr6qEicuOcGZ/zWZwei+42U2a0y
OvR5c0Zau3nQCjZp3kkm+leS+Uu8qx0kZ62NT4pGoPjI6Dw9qg2CIxLH7Gd3
Qs17xZ7LLq9R2HxsJD2QBsl+jYte52shkDxdo99BvP7Ag0cOEH7tJabaG6Ve
DOf8Fc4LCR5ZHMapENwguM34fr5rJh8xNoEtx0/1IfzlgPKsVW0ILXnz5FMD
CyyP4F9PCG6cH8H+FqUlRNo19ub8NDZiLHcc0yknvNP0snTq61HkSORv/H24
GT6qm8ftkroQXHdWOzquATaug/Ti3a1QmlkpaGziwV9n6+4lga+hOjErI5bI
ExO6j/afdUPYdFOV/ITgV62qhJflql0o9bz+siOZ4KkDlp2T5u0ImtfeV3+P
jpYbsj6nPhE+OqTr9s3hOVrK1zyhCTnIKe/QmnjAw0TRivdt8/pg4VnV7Ocx
AsoFetaeyQ5Yam5L2UXsZ53Gt1cVDC7kisl/b73vJHpdI290fyXivWqfD3f3
QcTLxPq6hyFM9P/JThPzYsusWVBl1Ad/0WXxQyeyQOJtqthW+xZCwekI3a5R
iBSVzh1YUAy9YCX5opU8eChV+vla0eG9deK4YGIE4vH24o6tTGzqMl/4oo8N
C6/42v//PdX/vffPB9QXiLe9LbfPggmJhCuD78P4CPJOtv++nuBd5UreE6Jf
SEkFRUWXMpHz1H55iWMvWHXkk2a9LAQ2Pjred6QPVtozJ5cQc5qyTCu4U58B
/+KKMr9eIeRf/B3Uk2NBXO/CM9XRVrg7pbvyC0aRnjmgs/11E3KMZl4/ieLC
Jc78pPi2EcSs2B364EIdxCsCSovE+kA6dHMb06sX6pLRqj8YHCSF32m5s5AO
8XNKs2hBAugbWk40LBJALvLBI98VhQiueu8duZnIvTi/AlpAB9SrE14zpIah
97E2tuceGTPy7lvLion+pD1tapSOQcM5haFvrgOw+N5VbUhrgdts/jK/PhpU
DSN3aUiwkHOh7NHxTA56bXZa5x9kIpya8aL1HzHHx+/OiTo8ANFftsfKLrAg
XKZ7yz9nFDEHlYTDIM7zTqBbnt1TJOXMLO+UG4FLrNSKd3qtWPWZ0/fyIRMe
Tdb/dFZw4aft8GZ+NRtaL9ZIWHcQ61CP4VTYdyCtmmKXFcsEabHJ/ncfUxH+
ebj7SP5XuJwZK3T+24qrf0cymhhED7a0M/87xITOqvDyDGU6skumnawTh+Fb
d7C2RoQP1n9Lty88yYVKpMt+41tcqNrfUZUdYyDr7xp1e0liPuyuiK18Uokx
peN+evGfEZxg3UK/XQVvKQ31Q0wuwmeWrfQJ6cGdgPm/l98m/Pome31jaQ/s
xC0tp4nvD1sr9/UgbRjhZW7d8aof4b2qe3Zm8TBq4Ozt+6UaKu8Mrk1+J/rO
b/pRH7MBchFp99doUyEyU9hrucILWdrsFvsLxM+NT19JvUH4SfPrN37UJEi6
a5abXh4kON9DpvVpL0w/yG0Jq6egUHPZc/9rxHz0JbFnEhIx6ZDsmX6qGbYM
O40jv4uIvHtrvChkFKH6y9ZvW94Ll5C0iJjdPdDP9hOXWy6A/Jr3H4qu8zD2
S/1f4hEKjrYsD1mePoLMLRp5OseHETcx9Y+ZReSoZBb5bagARQa+dfRnLIQ1
l8rsUB1GHZkhs3AjwTPb/y5ZrfMVAjPRY7oKQihqdrcm/GzGpumQs9f/a0XC
yMTm9nZi3nJexslJMeBstzHk3XY2xGMzDlTcFiBp08rRebmt+OghKxh+NgRT
DVFSDb0Lkp9jnx29W47g0O8/Hz5rQc5zmunBr0PIshax9L5Kg/2xya/qeoMY
SxZTWEn4x6Zl5/QNFFpALjnz5MvPFAjUfTbuVaZAL/LJjg0e5ZAUfayZtoCF
3Oc79WP7WQQX5n+Ke0bGnatu9ZEMBhr09G7dOCDAxOVs/0iVbnCcb3SuyehC
4XLxbTp6TEg6VGR8T+3EuM36i2tWChD8baTKe041bNRX8K9at8KTe0BwijuE
mgz+hsToGkx/DFmvIM6G+cDNXuF3PsQj9Tc2lFAwXeh2bU5zH8jT5bnXGpsh
kupkrvrEFSJy9cr5ismwMdN75dpKeKnHrtr8uFZkm9uFJxcQ8+4Y/lUnrhgu
FTejksQECCfvirtcVYaPhoNhr4ZoMPyUKDygUQPazosbx0ZqEPOmLmZs9Cso
puOvS9bzIXPKTLmjlY5Njf3nRVNpyPnhdPJo6Qf4L13hENYQAjLZOC+ZG4sc
+00vzt9qgcS7DUOdGoQ/8NNPXGvPhsZz8xsZEUJ4pd6uf5vSiBZXykkX06/Q
Wiaf/o245w0X7imqZfegePmOd1f6+dBzv60WNvARLn/92tWI/rQ6/rs3vYqG
VFM3uYT4VtTE/DYM1x2BfZOZajdjBA3la0ys9AkO977hK7mMDWeXbx76NsQ6
2dy+Xe15cFsjG/dAhuCt7Jsb99d1ghZqLDQ71Qi5VzS/DGoPvPOKc6cimMiJ
3Ta36AQP9l4nll2KIvptuNE2O+YjZjRSOyaWcZBvtrlabrwbxg7yQzpXBhA/
XT//4tQw1JTcwn8+G0D3n1YtqcivCJ91xONM4xfUVcwd0xRlwdbetmiPeStI
iafsJhupsLVZ7HBVoxgitedkXxrEQqQqJ2BmSyY8dr2lrOJREfPO8dPxmR6k
1B45bP9TCFuJU7cSHxD7fTRlWiWUhjFDTe2HrhVwOzQ7fi5NgGyTbCEjhJh7
vd5/kgeK4S3XZDF9pwuKG2rN3h0jeu/yr78VzrmQC241L2qugNx0t94leS78
mU0nhouC4G9Zqv8trRv+kwanAsIjoFZK/mFrngrD94tkNh1qQI3f19iw9EHI
FRQu+1xbRnhavLTUqAClCRqJf/7yIB+q3ykXJsC0BUmJGcLBRJzC/qpuPgwP
LvucyKWir94+Q813GKTHZTru9k2YtG58tcSeApGBgCU92WRQ4t3Eo+U7UXx3
Wb04mQU53nuHAGUG1C5Syj+ksBAx62/XehIHpqQ1wh8JcaDkRVk/jWiDxbVk
wz08DlqMhkX0A7vhudOd+seWBhF2we87tulQkOlw2uHIhZvOG43mrXTYZr8Y
cL/Tgn075Ja4mzKhoWhbb/ipHblzBuZTiH4RPP0nEt9A+EbDGtrlv8Ugi5aM
O6VUoHBHltPbejomt45F3rUieOXj9rrrx/sRfCVC57E34RWz7Bx4qyjI2jFS
e2YD4RUPjHuqthJ85Sf/+Nb/n7c9MOfynXLCK5tXmZ4OYKHSXteF9JuG3W1H
mjOJdQSS3aX31g9jWO2co7ryAMpP9WyTjeWiULAkcU40C+n/OSeX9/Dg4zj9
/fxRggu5AzZ6gUyofL47cGMnFRMha862KbVgbCxzXYZ/NdxaZyWr+VUg+qqt
194zDMITX2n3m3Rg8v7ObeF8GpKKqsN01zVCsW2+smZYJwZmHU9sekqHqWtx
pNGSjyDfC39o+CMK1QnmeZWyDJCeea243VMAmsRJ6x3SqVAbp5KKxFNhf2XX
xfO6bBRXsi03/tcJe4v8GPtTQ7Cb4zayxbsXk9QZqgSlHkkLxRQkuK3o/pgd
PDSnAU1GrdmvEwn+fafVUTpE7Iv0xKvRFWmYCwlXMYIrjEVSmqPut0Nr/rpf
7h85xNymF5t970An2W39jhQefJWtXpq8ZkF1+pIWcxEHuxO7bygQOVzYqFms
cZ8GL1a6ZWcdD7xxhwd0ARP/A+3nswM=
   "], {{0, 0}, {100, 100}}, {0, 0.9999316530344136}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.7111879875518813`*^9, 3.713621302300144*^9, 
  3.7136245205979223`*^9},ExpressionUUID->"36d6377f-5207-45ee-b857-\
8135e55e42eb"]
}, Open  ]],

Cell["\<\
The ImageSize -> Tiny directive is an option. Most built in functions have \
options that customize the operations of a function. In this case we specify \
that we want a tinier version of the Image above.
Remember that anytime we call the RandomInteger or RandomReal function a \
fresh set of random numbers is generated every time. To save what we have \
generated we only need to create a variable name.\
\>", "Text",
 CellChangeTimes->{{3.711187994654192*^9, 
  3.7111881739202824`*^9}},ExpressionUUID->"a50b41f3-4770-4545-9ced-\
fd3ad134f6ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111881809233284`*^9, 
  3.711188212279961*^9}},ExpressionUUID->"04a31bb9-36c8-47a5-97b8-\
47c3dd3edaa8"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
k+8r3pv1CdyJZHnTrVwErT6R+1aShfS0HjM74t8TrUYGx50JZ+7epP11ggXd
t/N2v02kIdhFxFF/KR9aCQVHrhd0w05uXpuOnznaBX5FXX7AQ13zkrTbt3tw
6Fpp6FLPkzjwZKrsZwIfF69w1XlvujDvXPGqoNda0B+6/OLcVy7EuNr3J1X7
cE7MSO8t0xWaE9OxWoRnzHbxxVLz2RCaEn/m5sWA2b5kT0HiU38zkyzjFgwi
1ai9uaHkI9Ymmi2xX8CF6Mq/LZEhTGgHJSyW9O2Ee+vD4ZBx4n2xgqoziadY
X/nc/krHE8KZm5ruH+Diaa3lyYnzLIS33LmmeqwXV357Xk5icTGzYMCne4iD
hMqiq8mJg8jUcfujc5GLXIcldaLabFB5jSsDzemIXLRmWESA7Gf1iiwXYybs
5w6VPn7fgaxbb+Rf+HOR2fs1TkSdjR/0gPs9OnRodWQFbmVwkCPfpLvbvR8W
esMrCjTeYmbyn4tK63ko7a133lNLIU9be34l6VWR6LL4nh0UNprqfj+qTEfg
WkcrLvxQafCJMS+LwlHVG80e34bw5cTXv+FdTbiU0/7A0J6Hne6yggrihGcW
Tz/ITXbEedvfTxldHIS+zEl/atqPsW8XpSLjisC2LC5ihPNgoPjkw8ZNPGxQ
z599xoeDY9G71x5eS/g/JM7LMrkXA7zqyOMtztgfvd3gwFouqi8v17ykR0O1
E9PYVO8CFE18Q5Z8/f/fGX73VO4eDXaxxumLzbww+L19UaQGF2Xh9Ts7XAnX
vdnLLkMvtujkvVvZxMV/amohPDLX83rOf35eOIC5h85WLpOh8EJTa+ofuS9h
mZrVwQ/9ELJK1eqpPB/JHfGrRK93Y4A6rnLqv2PwPTEr8GMoBbMfPYe+rh/C
naGFUp7K39AwW7Cq6DqFCTz8JU16uv4966WJSiOSX6lZ6mwi3u2eeSVWg4bm
6RDzDpELsFovuOy/YB62H608VSpB+MVDVezFYQ6+/27Fnrs8qE15CCy/ysPj
nQUnwkl/Q3K6wPYBB//GB8o+mzJgIfbwZ9uzB5iITmJItXAgvdrewCuJjlY0
7vx3LQBJN/Jixo9w0fzTpVdcmoZ3yYZVxxU8kHD43a+wQC6WC9nVlvT1wdNF
raVR0B0iFk7PnrTx8ODAuoWzt/agOSEysT3sOFYlV9WkkPfklrqzPKWbPPfZ
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
343iy1bi7zbmZy8yR6fXO+VYgaQPLxIrO+zwCXpnx69d+EH0n8b7b3sAEyvO
7/I+9TQMxQ8ux918x4WQvfHcL4a9SC3SbI9vdEDchBO/0zkuIuNb23VNyNxS
DzwdJPOQ2Lj0u68vFy13d7FN2mk89vl7Off6GBgLV6gVGvIwGewlFr6nB01V
og5RthbQ48qpMOO5kBtm2l7TJ/lVb8dY/oKD0NjPtxOJD1cejN0TJjAAhcom
LYvtF2BrJcsr+0v4KsP4tsnQIGRerXj873ElqkRDrUw8uVjTc3fUdHYfjJJu
SYXtcoXnvi2PBPfS0G6L3uOcw0bBR705O/z7sejSjCP8mTwUvdu4cvpWNx79
uS0+LaeH+5xNkfNsufAKGNw2nETjo/S2+GXDbHyZc8xIn/isXcLBq/UYhfez
xb+jzrfDPy470ec/LiL4xX5GGVHYLMJOuXxpBLHr/mTVJ/KwX9X13Krabvyc
KBCuntiJP7LdfiwFCu81zEpiY4YQJebRnn2hBju9dB3nqFHICdbkROcNYfl7
Bf1N9bWQ152w3k30I3dk4pyqYT/4TL/UfdzkC3EIX15Det23AxsnNquwkMln
bvR28Wcs6KFspnN4EGmImrf4cjcUQt6eji/ThYTr8n9PY0k/77DVzvcawz2P
+lPSRUyIrcl/3uxDwz9p7G7W7DH8/hK57dQrBpSGNy9tIz1251xbobwrQ/gp
2YbTkrXYeOLZYUEdLm7xbtInV5EcmVnzbSPJ5xXCQind2RxsMldI9PAkPc1W
XrJNKgtf1fZE8gdQWOmu7rxyeBhTpUz5TdpN8O/YN6pGcnmdZcIykWQ2Vj9Z
8r5VrB8HYw/OT33AgS7rm/txwgMLj5e3L1XPRb7b4PZbocT3zmyIE9w6BtF8
E68D25h4ntJXmkV0Ipmcww3qYuK4RfMWGfNILDvXe2T+bQ5OWi4LU33LxIVU
6dcPuyJQyce0tUwmHHc0aNvHp71w+MoL11rsjIE5kquiyfzeZx+cLFg9DMr+
6/taxjt41BVX9nnSWO9uUXeSbwzD7seenrnDQH1A9NSMFTQix6MGYgTZWLfx
zJ25Z3qg9S99ttBlDmKFXVrz5pP+wFD2NOq+jH+26wfnkP6551thNfc42aeY
F6Zm5hSm4nL3Xyf37F5nTt27PARzmdCWjDm1SAi0568gfV4w9ZvFG2oY25Pv
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
lqMfylvNs9M+8LBAUtffzYDoKllqpYb4BlzZofE21ojGq33PnU4tZSC09vXM
peZHcW/dloadZG8PN9bO6CvrhcncP0sldzjDozlseBPJM//3ztZ2hX2Ql93R
dNnZEwtGU/mt1Amnj4xO/V5AfNjn+MEfFT3gq/dVM1xAY5qn9ulIDgvBbe1L
ZcS6MX/rT+EJwhcPlVln+oz78cCn9fN6I18s3u8VwRfCxa0l/jzdKRqLC8IO
pPFzYOKyuinEgYLCqTNHnycNo8nDarlF2wfUPzu6RzmLC/WS//46J/ciPOSs
7529TrC8yRALa+Mi7NupI/YbiD+MCxzY0WqP1VX3uyPJ80r8OTog7E64xvlN
Q7T+EN73FMS17aBxZEvv+Sp/0mOvZz3eeaAPjq8y//l+5GFjiyHrrW43Hr0y
Qvv+9agoqzvsSvq/dsmGnnMJXOS7rD8qe5TCN//ye0pzKRgVxwX4rhkCn8bB
+D7hN0gTP1Kj9YKG9btms4eaRL/2g26TxEcTgkLLen7SCBQwW1zA6oPyjJy+
wk4vvNnvnK66hIKdrfDevvAh9BVLXgq1qME64TmNO4o5+BfaUv7mAeHlFwY1
5g756M/VKVa+SyP5kcDwk54xHHhg0m7UP4AjlhvPTrrz0NRt7Xlwfg+asvVi
J8J3I37ejT8XSM/f8v6tJiOJ9D/GUVP+Wx6Ydg8P3qvJw38X//v+x68HP+UW
VKf8scRR7Z3blBooNKZtYvG8R6E0GnBJU/MT/P23WOY2cKAoeLWp6yYTL6Vv
p+5qCEdo/p5aR5KDKoJCBYWmTHBa9ygol4eizMkhJ8mcxseIXwZZWWxcGPd7
tNajH35b7uKCK41bbquV142z0drOK5YPZSBvxjyqJ5CLi7Fajnsne5F3Qz5A
O98FKvs8+MUXE06h49f336bww0u8Uyh8FB0yPkKufDwsurYgSra3B3+DhhJe
HTuAxqSEv52mXNSqh5qsIb143W9Xq2MH2Kh+I787JYvCf59K1jq8HsHI+qvn
NmW2org76d7vDBrQerZXJ62fcJrvJhOLI+C2Z6x6spuLun+CpV/IeTu+HfEL
CGIjQr3RT3YPF8WBkttPu9Oo7tvWfiaM5NixR79/xlHwjfJclmY8ghhf4Ypt
Nc3ozOz88aiMg68DDleWvhrAz2dGy7ivCv//vlOTkjcNE4aupZHgGLZ+XdP1
o5CBwLmdDa07KezXdTE4uZTcp1huns3zEIir/Btw3Es4wqm0XdyPxsSPyuW1
SWyU7vqqqilLw6Cp8HTsBxaeOs6vab3fjYuWOpWa2eT+31Veih8ag43CDIf8
LwNwbu4t9iK9+aK6zyFregQ/t2vd0zRuA3NeRuKoNNGthq1p3nMWvlpdu1Hg
2A2L4gmBz2U0rreuXXhiHQf77x0TOFoxiM9JpgPORLdPjOnlvRFEtydG1Mxs
a2B0r6c+2IbCHfPwkz/FmUgcPbvEwjwEn2yEL91+SEHt840VeZMjGM+8eH2l
Qxuy5sYUsdLJPWgkCyjXjCEs8tIf/jsDmNWo+tBJmIZYVu6jzYQzhy5VzOxj
BaC25Gb90nkUlpf8GWnaMIQoXuZbn5VvYPZfuevzdgqF01tP6v+fB9am1vjT
n+B1foxv50HSA9vt0sOTaWiNTF6aP8FG3rGLC2Y8pZCT1xobwj+Kor1OGS6p
bXifYMgzFKSxJV+Mo+VFerinvb3tki50pq5ur3rMgcrHfKfkEiZUdMtqrPwj
4BsjoapIOE6RFxHJT/pqbLW6VC7lD42gG9u4DjTolMrS8S422hZSi9t1GBBU
+bNbzoqLA/KfLQ+H0WDnFO0pymPD+rGHS7MzD16FTwuSFvUg0zCjNNRsD1yS
rs+2I36ybWdM6gYtDpyZE4vMPgzC9O3ow/0kXw5t2bNkKcmXdJS4K8nWQ+5o
SvxxTcKnZT5rdw4PYcTO0Sby2lsIzLye6Dybi/EB1dbr7hSGw49e7e4fQdHa
svoSNy6MQ6X1PMX6ILFhKnHHYVesyC0IefuGxl+IXlC06EfMxkMWG4774saD
kORSwi9Xc5zu3yli4kr6rKCj9hHwtryV0+hJ+vMcX7eJ8mE0a1y4P6X5EatF
DTrCWym89kmM80saRbeF/Naa2k94PPov8h7hixMaK81Gi4fw233t0m6lOrD5
nwQHqXBRrxBq+bCJQorM6NV3X0ZxQu7Z8HU+okN9tcoqKxaEWr7M6Wn8jImM
jVZKIsSPXxx4V+/IRMsr3naFbWEQLlAY/Mgl+tTyPvFdiIURqLcOpHeiMP3v
wXUaXKw5bK+3bIzCb0N9sxmbWDhkKuMamU3hvEKoy67aESh7/BPOf9gKK3tR
1jpBLp4YemZv3kPhfYu41ty7I5hhKpl2jPjAxZC6240eNPxMjt7oj2TD5Mc+
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
REQf2m2fvcz0pbCqYPGqse+9WJbMC5G97Y+nQq2i/TdJX2vWGhaFDMB2iJG2
M6YRym8veBwinmVep3t24PEw7Pc99LY+2gP/F6uyLfhIfjbrbQ3ZPYRt7Q5V
PVVfwd+z/5H8WfL8JYG2V2QHYMnalja4pAFR859VPDKmcaCtxpx9fhiexzss
it50o17N5cEn8vz1aUG3TInHpfstUXdc4gPb+NPr7Ciyrsy5T+ec7cX51uNL
HRNO4nvHd4VUcl0p5eF5zY97wLIqerMnyhMDTRVKW5S4KA2bUQXil4d3j8sY
zR2CS+bxOy8ucxFf+Kbajayf6Ngm6aEaDhIboqsu/ff5st+yN9cf6cZYGZ+8
WJAzFkz7cvfUbxr6T5M3nGZ2w71H6Z3DG1esPPeCr+0jB7z5Jtdm/e3D+N/i
1BTVHLg7OsXciaSgENqjPGo8AI7F0T3ZRQ3Y02MbbEHya3hlyYO/KxhQzepZ
WVIfgGg7C0O+vVxkO8y9+0CjG6Vfprbv3uqECmb9vK1FJN9shOeH2nfBucJ1
onyGPUqjq4799/ddBevXm165xkLNehdlle8VmHYj70YUj0JQv2jaYHAvbsaZ
R2hEnITU4uzg7DqS70nPjohe5ODPyF8rzVuEl2N51euOUNjx+fNnycR+uO+P
KBbZ+xlvtuw5eGQFF6Pj18sf1pDz19kXrzs8iIvn6jNZT2h0CS/LsGCy4f0m
YjB4pA8bzr45H0vOV3hie7SoO40MnwOH6Yhh3DjZdumSPBf7vloGXs6lMCL8
OqTmxSAqpfY+zIkh5/SKm9BK3wFs03o3etO9EfFjQxeW+xLPuhMjLa3MxvXr
ytq2YsQDTIZbcmQpFP+epnJwBwMFIQIeIgWBCKj2/Xlfh0YQt/B53vZhDPKi
5ljHdEFCkaRmNg3mxd+vlksRntqcvY19ion5gxVcTT8uViuyOnx+0PAuM+7o
47GRNr24UiKJxtZjN6cNNbPB/dE+Pv1TH1quDDmMhnKxvC3Wr5H4XG0lq8Ty
KAfN4WLU1rkU1lLDrKwDDJzmDDiflD6FIes7v9OIB1HsxO5+cv4CbjZG0REc
fHbUF3D7wcEs9tScl5VMKGrM9c7Neg8vXsSjjcoUnjhPk3/5goUzLnsv/Rj9
gM35o2lSqjTKm9xm7JMchvnL7WOqNZ2o2/+QmZ5P45+OhN0XDQ46Obet379l
IiPVOkfwHgW2lcPHH/cGcKZNYMOiOU1oEMuyVtTi4pJ95fwW0ntCHTddHjoP
QXno26ISBS4uL5P+J19IOGhZFpVXOIhJd/ViBnndkdlOUg6nurFqWsFkpqgL
JBeIn79P+sxsd4nr9FCy7+tLErSInx3Z+OqExwXCAQfTzNod2Th/q/f7lWcM
sGoz/D1taKzTVJRa/WEYE5K5ZpVCvei2e7c16SGNb7KWMu51bLhw1lgWv+1D
ZK55gvlDLhwLzv79e78LA6Pj8VuuOYA12T+xZYyDoCSjxvO5TAj2+bi+jy3C
D5Vb2jqkvxI6j0Zpc3tgdkKvyFDLG7Ifk2TD7Li4WcRxKUykIXhLOHlkHhvf
WlecFCI98sh9YU7sGxbCVW8KzFT/CG6CT1GvG4U7VSOBL6Z6IevD+RjX7I93
nBVv+6NprB61F30cyYb+1vbepBl9eJG8/l3McQrvJzzHZ1f1Y3Sl0eSyO3U4
0e++O4WfRl1im/XwsV5ozh8/tn/OSTz8wOk1OERDY3XGqUHRXrwvX5RBffLG
7KOn9/n48fD24sHxq+MdCJQ/FDByZwf8aw6YZMVw4OPvsMm7lYG4MP5gs/Wn
oUA/bZhP1n9q3oh4VXkPDuW9WVdk64WiI9skXoZwwdLvffDf+8Hyd7YdtDLg
YFHCeGDjFh6s1xjEyhzshPSp15ItPCscSOgx4avlYpNnXPI6gy6kt+9cnn/D
Drvqt5ml7qZh+W5+uY9ULywLBBPlZ/tgYwHFsa3lwIE+5Km0gInAGsVah9RX
qHomeXdVA4UlSoelF8T34q7iB+tqE18U/twj5/iDi2n+s45MjnRiYtMLxacn
DiBItkNtVzCFUo3XCcw5A8g68pd9qL0eKhWGn056Uyj/FqRr392P6v6U2hC5
ekR/nrYiWZOH0fDYt4aniE+5Ws7PPbEHxh4RpvHbuTgWld5rYNINFSnaLb7J
CaJGSxdfTqOwr/nyYp/iXujtLtrQq+8H1/zTC2TbiA9O/tpZuLoHJ2ddmy4Y
dBzTK7+U21gTbq9lN4QVkL48Up/N97UHewy9Nr8OpNCy/dOTIP4BuO/kOoZk
1MNsDqd1zJn4oJzY/fpX/ZD72ZI9Z+IzdJeY2a0hXj9fde3Dr//Y4LuXflxG
hwl3y/0V9c84mFqVZPrTuw8vZ33dp62YjJQGOJ2/zYXc6K0xS18u9JKsmNu1
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
5NxYriCcz3IxlxDioOx7o9O2OAqt4lWfAw4NIWxu2qqqCxzkSE9nZjR1Q6pa
7NFfmvCG2i/O4e2kb5M81bI6+1F06eqahbqfoRb1t/qJ/hgkvyfXP0UX5Dsa
Q8/HGSK1e6VP/0IKfbuZGta8/Yh0k9upT5eivlXNcs4ZGld0Ps+bu34UHlid
e+AfA/9eagRzLyJcF7P4R7jbMCidlQo68h1YJpLXmfmYjdwXc3xvlDMhonlh
o1hVMG7fu8hbS/qlZnWhTOlEH+7qV3MGREqx6e+7n4FiHNis93/8614PThU2
uERSTjjQsLSIFc+Byc6OlhVWHCj0ns35//dH0IfMnnqbUniWN6g3zceEyW6P
54t0/DGze3TuADlXlZN6QYNnmEhccGVD0ZtAVN/tNdAn+x7kpiyqQ3Jh5+rN
s39f+SH4LG/JFPFZxgd78+/KDGhYCzHjCrzA3f6Cb+4l4jsrG4NnNQZRM+Dk
a/u4ASrGBcUvy8ew6cxfS8ljnVgxh+HWt1MVx3h6Co9mU/jjvPBlwa9B3D2T
e2i7SxOms7oeFqpR2KwZquXzox+7xsPcubi+YDjqxvH03xSkc/6+2b9xGJ/V
bls0rW/Hc9X35Y6POSiO8YjuTOjGgnh+Rf4TNkhaZreF6x8bZeFPf+5i9uH5
Gqp16k4JJh7Mqbb7QaN6Tz1NLyHc95nHa/7PAfySOie+jviL72YLvSOhDGTH
X7nwL8kbB9iWJqUjZP0kngilnWdgkef1V4ufe8Mnf90hs3tjsBwpT0dGJ3Zs
nVnpvEQLVPGJB2rqHDiq/hG3F6GhmpvSJpI/jCt13gWeHhz4Pwze9pJ4TLb5
jPChN6P4oM2KlUrmQCpCfOLNbQ4eXdRwmEqgsHGZ34qoJ2yUh/q8eVPGRNdf
yv9+WTCsa7xzu2UoVN6XP/U9uR/aX+0i5p6rwHdp+86jnRz0hbaIvpfuhqka
295dyhJmL255vklnY2eiJM+wDwv1/CvOKSenQvtASz3XCQ4azIIexN2gcb5e
2CSLM4KL6xZHhb6kwByUFrhYyMBz/85GXTFfpEcnbyi/OwbVEJUph8xOjN8V
Dh2R1YK16ClKdYCG1Ip8vrzlvTh2OuH60kYXCBRbGR7pIde1YAbtKWJjtafF
m2KpAcyJ5D/xbz8Hr14JVvNo0djd7MRoFiMeOWq0SMyTRqTnpmTTyV6EG552
+2jsibYB8A2e5uC6kd/ex+R6YoapWr9fjeLr+FmJhXbEF5qzTEpeEf/Y/NNx
++5RTD77OGs6TJ73fYbyNsJJRkJbzYIvDaDD9sRlpiiNNXEN6742DaP+3aWA
wIpOCCbofp49S8GWb/3mB2sGwSOx2jGUuwFnNzWrZe+mYHredtZ6zgBGmc+K
cty+4HfK6+l1GjTGxy41RziOQHb1o70LpXrwt3BRXO9qCrf1a9/ZWPWjY3vG
tEZQGTxm23dcIn364POa40t7+zD+fkdZZVQJ+jfcU0vLJFxyKqTuxFkWom6f
y5HOTMNXrpvRN23H/v85u2hu4S4kvx11TzTTx2tujsNuEw6s1zsd8SVcTG/Q
ELj9YQQRfy/8DCG9Yh3er5e6k/hfVeI45TKIXw526g+J//7eWL9idyyNdsNX
qi2MEXgM/ik83cJG4qKj85p29WGBRx2P1Zo3+P6Dva/WhQPxyR3XdEmvFCeF
VTvL2+Pif0pvf5Feye9Z4qDbR+bHQ35J2+1XEKtRazr+iY1bV4p+mY6Qnt27
r3Pe5CvUV0t2lIRysGBh2hvjdRzIfFp18+FxNm7cY89RvkTO6Zp8576v3cir
U2Jf/GiLSjHON2fCmbx38ofKNQbg9pVS2u1UDcfwflevg4THaq9f4tk0AA3n
ec6aRVXQm7E50WFDwWJ16vdLD0gfGfObf9KuRbH5oq0ua4ifHl8w/cGG8OfT
O1PM6DLclXzo0XKDg6BMJbfKvG6ojRs+9pSwhY6hrXQzPwfJbMq6OJzC5Ndq
LN84BNNZr1opNQ6uKq4z0yHe6XAp+4AX4RrK3TpPJI4GPzP/9XQ84WdB11wL
YRb0siMeO/jTUPKNEOgf6cW2fZHu9hs8EfBQ7R8z8v+fCxZ119rJgYrQvgs5
99mQSM7OKvhOQ/jHuJgrDwWfO43ewfQAlGrurZD8/+9Z3PQtbBrvx47/fv+y
//4ZTt2S4ym7x2CxsdHrtF0Xurhrky+ZG2PxrkQJgWMcvHxUOZf/LI2T0kE6
CnkjSPe93tNvQLj6W/XhwdQRuDCUhovcezF/+40Ebt0xeMdJzTQe6MI/gRWp
UWxD6LF4Hs1L4GCT9d+qNHLOCrauHYmRpXBw8tSj9M80qLayVF8XwnGBVdsX
EC7eWmfr/TmIxoz0kx+KWqPooYfKE42YsOajZOZxUZj3OyFzLx/xrLjFbrkr
PyJJWiznODkXBnM2RD43ZGJAykj+JisAf/7L33snlEJH7xYRYTYDAW/NbWMM
/GCkapN59A2No1LMA39l2dDk/9KSm9qH9cJ91w1aaRSNvjrQ+ogN9xOlXnyM
flRuaRKuS6cxf/Om6yLfR3FKKPzqpFAf9heq54b9IOe6JKEmUGQYiQd6e+Pp
Npxd/fzMJ0vC4X5KGZdaRpB5UMzYYjsDy62EtUIcaMjW6ka//jECii2xQZPk
vfSh8x5pnhzsthSM3EtyLj46YdvmT6NYZ85vPlnAxtPXgtWuL5lIaNzNnlYP
RtEvjamSVjb4i/nl72n2IcJM/+9+nzfgv089qy8gPHOo5eiYQy/sK/l1Nf65
oenyOyeJn2wsP6Rpn+rLhJMs7yWzL4Gw/NixPDqAcKrIooiKuYOYcYmj32bW
48WY6ysjfwonQ/aLuv0bwLjJtv8yE+oRqqIgrD6HxoCEivJ642GYP1124+zn
dpSleiyXNaIhsEY85lnmCE5wDgvFRvai9/ha+u0MG1UPjuxbSPdBYUkgM/13
Cb4srjDwIv5++iF/6af9NHr0AnyMpUaQlsHavDGFrLPn7dP/2kZxxXTdnWTi
PXsGmydeqJCe06j5pU7WMSA7weFbqRe2hhiv6Z5H42u072jeKQa+Fl5fw83r
DR3PKFldbwpmVT99GkYJp/r0vXY3qIdz1KqFZYfHsPZbuIrFwS6UiO5xs/hu
iNZQ2Lw7TCH2Ykxmxe4B7P64fShDvxqrN/N+T9Sj8TtmpfjW+yMYDjhq7anR
C5e9F66q5ZP5N5zrupzMvaCz6pHfG90xoFpxfDnhnN3KqufWV/YhOfb4peN3
PiD+9WujKXGyzlRWXG14P+Rnlr8djS/HQYu9tYGkV7aKXwvo5GfjgFBqlYwb
matyl+KQ52wo5JmddrjIIj3QVbr06VNErRhxyePhIH9Pp7+GNYUt06v6j9cN
IiHxxM6/Gyl0PxaLVcrsR9bGgsnyigrYCa5eOLeI8L/zwpnHamxIiyxKSmns
Q0j26z9pd9gQ1VXU4FJmocQx4darZffgUnirzvgbhQeHY446XBmC7Xhj7vec
FrT9x6nd8Y6N/YyYT5vIHPJVbJaxUwuGkUrMihxtCuMc/uILWwaQwh1+3XSo
CtlnPyXGbKRhHOyNNq4RBCm/W78rrgtHtopVaCQTT1zztreiYZTk5RkpxkcW
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
94UnP/Fiaxm1rQ0MLIjJTkh8ysaZgeUtkx4sWDdNDY4vSIXp7lvbuXU56G1h
FLLMaYwefBG478QIblVuzzAYovCea03Q5sEhKP13bdG4SBvYoTIsgQ9szHzY
sS6/hYWIr89jGr5lQ9ro2UjJGBu75h+xi3vWB/HVf6z8ht5DYUPQv9u/iC9F
iYdvHOvB6wUPq3TmuWD7Jj1nPxcKoVJVMQplJPcW8/KPedaBZVWQ+kSf8Ftl
4x2PtQzo3HSfLJT0gtb709yNJIe5m1gyfzoZyPtU+/nimC8asmLlFNNpOKdP
XPod1YvREYtD/3W548WRsMKDhTRuuz5vGVIl6+TN5X2xpg+Lr6uPTUlSKLnm
eyD+aj8+ys9NqmkuR7uqSGxIDY2/DxsuUQFsbIy0fvfYtx/edpOvXG1oaLs/
CDXrJ73+4eZVPTMGunPfFDMJv+0xPjAT9H4UEV1B2wVjWTCzzbfzf0OjQieA
vuPSi0sLSn4oCrujlmB9jjQN+7zaq+Z/hzE32FJe5GQXGuiUgJpgCnc//iye
WT6INqMtLmmsejxObFsWSXyZuhz1jE18eZvjl9QEK0PsOnHZKaafDZsFUi43
gvrgE75ZtqH/HaZNRgN21ZH+ZYq+ZoQMYd1bu5TKsy3YMTgrZkT6onw7q8Pr
MAPNaqVjegZncPNBO2uFMenX9dxJ3ZYDuPv3yzsh3Rr8clNs/s+eguGR2ROx
C5lYOLVm274/frgYhtVPSZ9m3BI3cxQcwXFeZnB0WReU1r6t9iEe+ubw7Mvq
yS5o9cn9/NFijlCPhHu3i9l4Kalv25jJJP4oOR6+LhgFAoPun2ZorLryQ2NY
hcxzb43HV7tBtH/fK2m9j4N7XzeUyquRXNT04FZYNIKGtA6G/dcxwNYW3/aT
3NNdEzIjsw1e4yPRW66SPMkp2XbEeBA2HRmzVuwGnI+2bn93icIJUVNqk9Yg
RutYrO6XDVD7+YunNpf4yFdWweiCIcxNOW/7K7UJ0muexj4inHX3la3XgRoG
rBQzUHXFF8e8ON7bZyhwrTnic1hnGKZ8BVOvU9vBr7vMYWApB+vleaaEPCmo
PKqae2VyENm7zVqSh2jYLj54JKSXjXGHLA3nsAGEzfHYITpJo2zfmxsbR3vg
fdM1W5XljL8+/O02hG+uSF2wN2kdxFzNh2bZ3xsRnCZjvKqGQtl65mfRhwy0
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
XFErnoudWL7cR0NRuLhsmf4w0pfefhV/W4yVVr6Uc75MZEUErnZZZuDEtNLo
S1Ya5kIHAmoIjlp6HNX3/31enR8M0+bP0iDu/5F1BeFrYgVnM+MtByH20+Wv
JMMJfHd3cXrto+OKSlbk4NcRsHs94mr+8gVemtWJ+aFMnG9b/autsx+fQ4O4
u/8S6/yLj1+Z8M+nm6+P/yQPYOH5743Bb+wR3cTXmevHgNBB+SMnFalgrd10
dfE4GR7Wcobn/Ji4GbLx3P5VTHx4w/bOh4eGFa12t500CB9cLhPJjpyAK0si
N6WH6Ml7fB386xm49MR7NvLFODYqa0w+WNuLojDe+u4DxN/b7MuvycJAGePg
PwffcbyqL/30kMLAN6Evtl8Irrpyek+8iRMFlk+fWg2uoUP1009pDoERBJZn
rXDZVwl4S95+YEnw8Ccqj3AGBdITgqt1bzRh/eKbUO5JOr75kv+wsI9DvyG6
jC21CxN610xPrWVgidIv0B4xDtcFKYmiRz3g2y+Zby/KwOHHZ+LFfozj3YJH
4LPmXkS8D/XwJdEgcE5Mp8BuGB0fdvMXNXyAeK2krmsyDZb6zltrv5JR3KtV
6ksLwGBebdayFx01NceTj/+iYKZtq8Yz5xbEzJhk7bpKPO+X5uJeFSo2mMUw
IrTIeL1d2deTOL9ah53svj2h4YuH3pryxhFoxEenGiszsF0juMLZdgKHTibN
lEsNIJlDonP9PB2KVEW9ALlxqPufDFRW7MaC3T9b8XAm1k/EXXdTYCJK7F7Y
pYc0KG9d0aakQIeVpZxtx+AITEMTXDOd6uATPPtizonggZPDlqLNFLD3zmr+
rm1GpszrwrAAJjI5YoyEKf0wFtly1fOSJc6WCmpcf0xD5uB+gewWMtJuf4zU
XhcI6dC8KyvOEp67lk0pTGUAfb93V57OtMbnZs9NB9UZyDa5En7j2gSqauc5
shIHcH9wlWQGiQFD5evdIjVEXq3O3d5yjILxr2o754SI6zzCGVV9ZQQ7QiyU
Na9VI1lpzJ5ljOinI8HGV26QkPezeyis1BNHZHIp3/7QkfPqm1uRGwlp7huq
HeAJjaLGHwpadHBpBs+OgoJVE/kelmYN+JUg9OhQKAOae3Y6nzKjYtFK2jEz
kQwZC0P3lucMMMXZOo8NUjFyYXc9iTKEq0KTvQ7vabCzlzdfn0lwxi3RSCXq
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
0/ng4nYvnDvR9dY2ksqH+k7t82N0itOuu0ZNX0Ko4MnweHMSMj0b5n0sYiGZ
9LUceTmIC1EK2+85ENBhhly//3wUv+RVlYeeNIBB450Kp3Ij+OptMQFjBtSz
7k59amjGvCutI3upXGY4L+Q7qziIqaNpLn42rti6t8qAf5LiIlpo34gyE4UV
6evVlbtRecAt/rYL5RfOVxcJ8rPB5vPljSiiUZxk/978I4mDo6O3h05woPTb
abOJyghIaUXBys8Eav1mlue5j2HNc4s9vHodWH1+m3fCFS4u/L198qoqF/Me
Scd8D6f+btP0EhHKTz14Him9PUn1T6ey0Ye51HzcaD64xILyzWhFHp9iFu68
jtjn2TqIiScPxTTvkvCZc1XFuJqNp8InrednDqHWesLVLpzqccXH9Zcb+yGy
3lhpov4Ubpu4Ptn/Zhz3U4+u/HCW8mWNbzSx+B2wfBDDt6eNwFKpATFm4hgc
e2t43do6kP8vQu3dWgL8rkM1lRkjUL4a1SyYVg3/FTdb9lJeRrdJOshPednU
kLj+RDoT2veEaasqOJAsXj/n9/AQVDV+V6Y/KkD9/ldxS99w0OCtUrj0zRDi
M/lVi+k5+K5Mrw/3IvGJFtd5fWIQ9z9WP/1i6IkEwyV3Bs5xwf357d8KAS7m
vt/ArVvFgew1x+P3qHO0ppI4upSgYSiw9WC9hT++S06eDZIl8fvFw6a1NCbq
06y/KP6geMSH78xnqkf0rB717BwZBffy/JYbGk1UL1m6pYWSaMheseLPCTby
N1QeLEqiU3789lDPJi5m4lSWOl8YwPPpOseYtY6wSarJ+C08Di1X9nrZsj7E
O4hcVmEcxTB7y5cnJpTvvxm219kxAG99v5V+4adxbMilgPuK8g7JLd9Fi4Zw
qcDu5MHdObCXnnewWmUcBmtz86Yu9qFNUYBnqNQczut87hc3EOB1MP8ZkkZD
jTX3lLGlL/yFs4sP5HFQU1dnNr+EDpM5O69PhgTjp7s4Vm0gIWnW8rYENPyy
s/isxOsNX8moT4wOKidlj8icoXwsRNLY/f7cTmQOGtxOW0PiQUj4+y27afh8
dbFl12pvhGYaGXReIHGsZGPO8v5BHI0r83gydRYlemXKBlUEPio68BDGY4j4
wte67kM7aK2MvJ3JXIyXHl55yIcLT5FCh/ytBFZeVhP3SxjHrTjXIMbbXsiu
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
CeM/VD/q6M1GudFxo2sBk4g9h/7zCwwNqjh4Zj1ipppJh+vrA5ZWM0E4Orwp
ctqXxGu1qKUvuIOonDqv1bbVE+xNB+MYE5RndRzWGfaho4h1KndJ2TkY3c2r
4ykjUF105KxEDg0etPzjTRW+2KhDO9ZjN45FesWBQZJ9YDbs+ff8ogk+JEt9
eSY8js/e2yqqyvpQ49O+6yz3KDppld3KSSQmdUJWDD9ho+ab9DP2kSHst169
Z9aOROizgoWBDBbOX+n80GxDQ1RBPS2cuk5pulV/yvgg9rzpp+dqeiLnyM3w
CD0uNt65ghkq11VF/vH1/6F884eaKEeUi3xWhMaSywRkHR1fMtaNIYwhv3DT
LQJvN96el9dCg9um+h+MIj9UZyd+lPjKwQ8V3WMrc4ZRP1JckPbvHXb4u7+d
pXx8UI4/90fnKPSlapK28TUhlvZenrWagKrmbpP1++gg5p/ySc0MhNHGbUeT
llL7/ijjRdUTJpxrVnw4JtaLh+23+IOmKU6bfPP+tjoT5zPfuh8y78YGBcOm
T6FUbr9ZK/TQhg33G2TNiRQ6Kp65nPlA/b7NNQvlD14UP69S9F+6xwc/eI+O
6VtRHFtwf2L4GondlwQTzPtZ+H5mZvGPVSR8r855L97OxGLrgO7Hn3qRJWSX
sjmCi8gtuTu8KO90/Xbze/kDDhxKtQyNI0kM+Zt+1g2guMVi6JdbJx1fFLrE
nmwnsC6k2TxFhQ4dC4Vikj8Q3idFx8ZHSBRvKfprSuXc8dO5rROnR/G2d5t8
pTeJfI151uI/BnFTM+E1qeeJBnlPH22Kb0e2kUGbLtEgf3JY5GG6D56HaOgF
yXEx5njpSd87AuxgkYa2ijHM1L4K+1NDotBIy/6VKwcF0teD95hRnronmrHQ
iYDKxhOXQ3joMDv0TyCT4Q9G/aR4QfE4ZJPSf/1y68XX1cpSnDk7cLmBXdjg
QL2u3INwn6xRmM643T6d24D4O9cV8ykOqTh1mcfBmImIqFnTnznd8NRYVGpR
T3HwMH/qiUDKG+RUJlR8RxAjHvyJQc25pvOrR17qY1gbJLe3xaEdvSLv9tPH
CZx4JCuVvpDaR/e7R3TzurDK4OJ2zUdcfMt9NHd7cj81/9NrPE/YIWzlU6Nr
wePI1FCpcGf2It+/qiHH1hCt5nP/Ln1N4odpvuNJ10GUJNxtkZNxx1Xv06af
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
nzfFP6W4zadkwz8MQuajp2Ctajz6a8eMVz1hoiQ6d1pDmfKdK1Lv3WKfYr1H
7THjRyysyxWbkgxg4XSBRPRaHQIrP62NP/KGwItKFbnDPaMIDYw/J87RhuPX
z4X+4qXyVOBGvfppAs472A/MNY9CwPn7AwNrqpezlobx3RnB89FkI8bXBpik
+7UQvizUPEi2DONkQXLtB//gVUyUcQ/vm+YnoXfs50SmNQ0fL641q/7iAXkj
QX17MxaWiNDeNV4n8VrF4i2jbgJjo4EnFZ+SWNqn2Xa9nIFszuYa2SeDaPpg
afZfIgsmW5rvecT1wdIkWTvU9zTiZx8UxLSROHnoGDMwlgmG/nj7js/DCGeX
McqnuDTaV7u4P46FpTzOvPeeEBA8ZRyXQr3PLX1cQ1WMPmyWLenrCjiDcAGO
ox+eUrkXLjrcQXnn2mLN1Ze9CFin9HxxMGdRvBS5ukeqHwoavjKTa86Cjff3
rjdUbsvIpW89uY2GUOIxx3E7d1Sr3PqyXIfyMoc1q7RuTMBHqfNqfGs/6pdc
F77sQmKNzSa+gtUMRDpz0vO6KM5ZdmvQ8Af1/Dtm1Ku3jyPEiUdkdn0XbALn
3L9oUT2VnmsicoREPdfS47XbJ/Au+da6B40kku12Wz8PpfpWnR4ldH8YFVdX
CbAozvHxDNppSPXnQubUbvIzAwkFIjmcXATuVum50c7QUW9mVmVh5ofRlyHr
5PUIHB5c/u3qgRGku7CkP6l8QZ3cR4mCJSR4Mwzlbe3GsUL51/sLnN34xB5p
aSvHQlFpTLGrRz/E/p7Plhg8B/o70cIEKwL8CoVLu/jpeBjw1ZxP0ge7+URO
d9qz0Ct4ZOZlIYnpEoGJrQYMLL1d/teXmv/c/96fMKTmX2m36S+lgx7Y6O5e
NfyJiYs9xxtvvaZjc+iDQ1d5AzDU6mrSsoPABdOAjmPqdIwZpbfc8fNFbeEN
FeMTkzD+ISNjK9cLpXjTnOpFQ5jKMgT7ayZxY3JdaJM+lbcrnrbfnJPHl7gS
0f1HJ9Eg1/zYXasXhWfNlONGjXC8R+e1ZzCJfuO2M1KnGZA1OPD5xzM6dmzh
NfiZQmLu7OcrOdMMnJRn5oSIDKH9z+a8jhwSvjy3/9W7D6AoOuKjjfZFNPul
6B6RIZBet83kAzV/O7atOHL2eTVsVLgq9tJI7ODPEPr/95ynd/gfNFccQWvt
YlJ+B4FvzfmiM4lULimeffBQoAPKTBpLiJPA80SudY6cw7ifrzsQn/4JUf7m
eua6LFxPfXKmTqsfUk6qxRJ1Z8GQuzpQ/5uJwr0+w4EdQ2jKHho3PVaGu5Kn
AxQoD4pLTatTFWNg5xoRtWwG9byVGrSMjpNgq8h7vSKD8oi0D29snw0gVkSd
oUy97rtDT6bXLB1GZJOV+mLOJ5xKvvlTq4qJRuXM5bIv6GDUhtffIf3BrffA
XJTyJd7MHqmpp+O4Wx/FUc7oBl16+7LIBwQSxGZv6H+joTbVfqq48hKOvvbP
vrqDBfd9kRU8kf0IlDWMCvdzwBv/Sx6uX5nYA7mf3WuHcMNmrZLkTC7uciwf
y1MkEBiomXFwdBgbeML1BZ7X4BvHlhMnSCZESpsHfycMQePdyg0zaiWwDKhb
+4fy8yQZd53qykHUtK+JtHXPwHHr4YsZHASayjsaTy4O4SmPxeifwE/gX+6u
pELleAdbUuPbLzTU7PRQZYRdQvCT4MwJbwLvjd4xE+Yp7tzPOfo0qgkW9KHS
rT9JvMyxZoivo87tZq/FtMgoWrkivExnKe++m+T6pHQIMi8Zp7o3l8L27d5f
nf4sTIVo3r842ge+4+w5MzZnUHPtj7kwNc8m8utedCYOI65y6u6q61WQSRSx
W+pLwufgf+JlygzsKjbe6K5Ih6tOznLeZwTeIKPDLHEUbslbgo03tOKe0crN
ghSHV4LO3v16DHPPt0o0bOtA95I1b5MdWciqZ/vzr4pEm7X0aX8vBuJbBdm/
PGPhy8x8S/sdao4+LTTTAgmMD9l9/UPNw5E3k3wxVF+eSKLTfd8MQO/R/h2z
mgR6D1xXCJMYQV0LG40rog5tTONw7cdMKBvnyDnvHcS16Z43O1Lj4OjQNHeF
4u1nWjZX/G6P4ujs7MHdTS3wkzdPYAQR2CjE+7Z+nAaR40J/qtW9ERyQNNSx
m8rtzjdqT9ZNYH2n4U+url583uhRU3SOBE8LYXn21wSS3z/86XGbht1JVTP3
rFnYPHnSayaBBHvxLZdgIQZWWwjc5I5goTLOW/C0OgvP5zi567OZULnmXRFN
cYLQkTMrLpyg4/rQ8bbn874oU9A1bLecRPL6iQj3rb24cL1sxV4Yomu3crKO
IAt2BDNQ3I/yIYsl6csEx3BKYcZCre7/Hqqc9D2BBk2uC2NfvbwgcT1GW3kP
C5pXFGq5WFT+1ZpGiqmNo0vg/PotjUx0thNphBg1n87JDh5b8tBB/MnojWHi
dfoLtry1gxCHdbjyt/vwHhn7ejZ2Ei7DvfJrs3pw7UOcYWebBhjH7VXnKc4M
OxEip15NR9uLa2LDbQGovBrxcn0nE/O2pu4yGtQ8z5mO7b5dgLVVahq6b0nc
dOzuqwsewHeLfsPTeRdRpjc/viJ+EhxnxeL6XvRg/OCzV1pBh+GtcOaOcyUB
vaKKG3eOjaFRgv9vWsU3NHjNTL22mISHjtVglWQvjm6TiarzNkTVGv2SoTsU
z1z9VX6CZxBuSsU32O7eBZfQOp/9lwnQFb0qBoRGseKErREfowkFUVxNitQ5
XilnV/H/MQFBS9fgSzdoSEje1vGlnsAq953r5T3G0OWhxmo83o50KZO5vv8m
MWlsreVLeYXbdCS/4XozsFwWir4covYo4Aij9kQ/WKvYjCylzkG76MvLutMs
bJAXVZYX6YezrFrssef2OLrx5FXGRQJlhw8PvFmgwUmm2kzlkzcsIjhOVKoT
uBTQuqAgPAIRZvOvf79qMfOfbugzijcmxoKHuSsZWC/y9+eG54O4bbO0qnGa
BEf0n8cfeQlk3tz6wIQ1giJ3ld2b1///+xV0ud6mEgh6zb5dP2oMmdeDI5dX
sJB0qNTut2kfbB1a9A3v2KA7P3/ddYofGtabzwtHknirtf8Ae/sELkxMZz8S
YCHl105aCJU3ypGRkWq8YxA9ml74kPrZs0vlP4XfI/jBWd7BG0Hlj+AYJzOW
RPyKlz+OZDPQ3SffPOM2iNWJ+R9bV5PwTv/48n7WOH7IykROH+gBPT42nHto
ElFbVM3a1/XA1uRdNbFyO9w+xmekriVwWmj6s6UhHS/jCBWpbl+YiUfQT1P7
a6e8KXvx1ihGSEkt3a8t2NTLknCoJHE33rrc1oLiq8RdbXu2DeNCRoYh8ZTA
oUORUt0Jo7jsvFreXqwVtvtUDv9+SO2jjZ/jrfQ+sKnv3uv7+zSE5c+vleMm
sHaf1Eox4WHMS971d1pXDqf9hSlev0ioLav3FN5IIElglfjXraMYqxbZc3kF
CzGnlCoNPQisSZxYY7I4ilt1JV6XVUm84lU/amY7gZsRvN/oS/qxaatjXScf
C9/FtRa+V/bj0OaEpEszjqjKEtkibU9A9LSPdV7KCApbrNVbHn3FTnmZxofH
WJC71TZVaUti1WI1op0nMF60iev1dyY+HmuOFvWl45ZBmY5Elx+2JR5L/OtP
7cvoFjlv/lFsI458KGtrgsiLkyu4qHxw4dXfsvrcGHIjvB9vlGjH8L/cs9tL
CZg3TCndUhjDwRaLfEmnbzB2fXzPxJAFJUf9IvHzlIep/6sIvj4BzsnDZ6N4
WFhWo8F+tbYfyzsVbr0WdEKhtfQFCWq/JGXUra9S+/WvpEX6zngT+N13iL+h
+uvwR2fNjrRRVL4esbup1wqLKl3rN1S+28p+vexlwYJl+LZrS6l+EjqyawU7
lUtSh8Iqw+Lo2ASTy9N5/tDn5ZDlLZnE5j2fNxif6wGtUUVm6u1+ONyZ3sVB
cWlt0P7lrtvGkfS2VueNSBcOLA2YtI6l9uuEk969G6P4T+/K2eEPLbAzO822
lyCwK8Yq4dqfMfCc877d6NqJxdT44Jx+Aq1RLlKJt2hYsWtl8OVpT1S973ps
dHsSSgoDLhs/90A8PTwjs10LaWo31ty8wEJLtFfZh28kLDs60xvjKF5+2skv
S/HhyhPaebMDg3j6vHVa3T4LBjzZrUf1WUh81lrCUu1HISnk+z72LNw7lzwU
oM7X/rHrz8/W1HXENCVtz07g62+B4z/oJBpWXVXatWYAARoB+6MWnCGttaVP
0JWAVOuisGHnCJILR/8kczeh5bBkhlQfCSWJVwdyNg5AXslt6zvl83hZOTeV
xyCQONs8zTU3hvAv81lmpp2oc14VfmWeysPvzLs8+8cRF/r7a9lZ6rl9cXI5
YkXxT25P4Qoqb8oeXf9ZzclA566IVdKZTJwJdg26+YDK1eFk310vUrH6wwp6
N+VxdQkm6qkHB0FrLzMeuvAML93OJ7YZsTCs3DH/heI7hkTEE/X7E1jme0aj
kZ+FtiEutoXzBMq3iZv2kqN41FcarJ5JwMPY166ymIYsp6Jk33WXkO070PPF
lIXfa6ae3wkh4cZ74pjg5wmsc8HVsV6KT5zCNzlH0TCsyyY49dcT/FIvv/27
SkL17UquUTMGpJY94uu9ToecrCbJoU7iCUfttV9SNKQRklHzV91B3z6zxOod
1V9PFj9+f0/HeUnxnya3Aqi+SV5Ul6e4etnIGPeBCSh71lyOMu+DPJd+kDLF
VUrhpY90zw6j2+/fg5KUShjNrjv+MIWAIedqy97WUdTt6fuwZKQVba3WDw/F
Uz7sFM+BOgbCxvTjdDIGUeQYVP3LkcTUmIH4IBsDBit+B4e9oKHcfa7U6zwL
R/JL/yQ0UzyeYP59410Geh7KZ/WmMZE6EsrFGz4ItrmNxxK6X6P97pK7BgVM
POE/IyyYTcc5dr2LU0cDsK/A+7vulkl4ibcKfo7tRYJ18QaB+RN4KzAVo8Qi
8evWSPvZX0yIja6ulv80gkj73tUjN5jo0P3MXjpBR0LQnY7Va4IxtJkv48BZ
EkP8osGfpiegzWNtWx1Iw7+fBy4rhE7CN2pplUJHDzI3tXaSr7RRmONlHzFI
+UWNYF0z1aNTD2bklnV7YoUj5+oNJAGz7IVlBtTvnyg5afPsoSeahPz6FBdJ
EHWfFnn6+6Gd2vHD+b4T6gPjlW5tZSE+ozzOu5ba44raUXb6GC6/2SiZmEWi
aNPzB7LeA7DxD0i/b38R0osih7fVMGGRo1VvtTgIX5FGMvNQDu4fq1skZVmo
5dcp4l4gcMqnVjPCfhw+XGktp0ImsXzpqX0TnT0oHFHM92vRRvKtTZYRD5ho
GI5eeNpKh1KmSPwuict4ZeXqUOFH4ncWW9gJNcqzXGYW7mrT0bEobmPVQuKS
jknnZoo7+tKuGDtnDINR9GyLNDvl57GzsnxqBGREjJOi/v95oDDz3w5LCWx3
kBe/bE+HsX7uLfVTfuC4ouJWnTGJ7J+GqSnXetB0NqE3dQagnxcpukzxfE0S
092R2Y8TfoKG8gwn6L7l2ap8j/Jr6X7uiqcMfLAvfjKvNAizRBMfV3cSTYf9
/fvEGbgsoXY9/wcNV6otfij+YGGsYdcG4+8UL30427bMxwIzkhP7Pv2h8vZd
yggfbQiCg+IG9+6WgW3znV3RVA54rg613fqMOv+4gs9PuRn4b8mZHWxUb/bF
8zXZe1A91nupQUeWQIhGsIYyleN+HK7iIXdJNA+fki8bncB0XpqwayMLp7o/
Gtuq9mFYID8+77g1OASHElJvsfB5HXe8qAELYker0oPaqfxPkJSQ4GWBUe97
9URNPxz3DszJ8jrht+o9nzsxBGa3zXqM+4wijuDQsQhowT7DS9z7v7NwXj6X
X+VPL9RML2To/bCAauPYXtNUEjSPQr51swwQD4aMd1CcuzJIt8OKyh+FT8fs
DZwJ3FI7fCVoYhQn7I8Lj9exYDie/NP6SB9utZ2sXl9tjamacxc/UPvivCxK
0HyeiVgv01zNKsqLdRRjK4qYMFj5bsml0kEILg1+NlWbjoSrmWGs8Elc3tms
39rYA8di/0aTiSPwCJFZOEz19cpTd9ftyqb8cXE53xWDj1B7WRJ+ZTWBayui
/B8aDsPQOz+EvrQSekv69X5Q/vD45GS9VxsDdonf9TprB7HDJuDkMm0qNwhP
joUtNHC9Gxracdwd+csEUXSFAE3pfr4T5XvdCU93lS9phsfOkWNNDZNgTL9v
XtDogczVokG5v/ugpHhuyliNBXOfmnU5Fv0Q61kX1qdzDjmzK6/fp7xYaH70
Qcm1UQwOSD3/L74Fa/Nl792k8tkqNLnJn8pn4eNpaQkil/A30eqBdjQT2nPz
2i4rqFw6y278VOAeVHvsP1Zuofb60cPVS7VpWPM+W9F0vwdI8y/vR8cI+D0+
XVEyTvEGz2ntpds6scr3cYNiCQsiG+WFou36YO+pn8AlbAvH/O5N1g+ZWGNe
9ry2hfKL09ff0jZcxrb5xUjh3Sw84uh+NzJC4ODr8XM/pcYx716f/fwggb36
3HuK/gxD7LxXwkrtWvQVh+1emkdAICCwniefhhDfzkXRBS94bNtT10Kda8uq
MJ1fPUMIXilMu+FWBrH2wQbBrknMmkf/TZTuARtHzqqWJXvQep3BGUT1bFvT
6OX91PkX0kuzR8VGwPVCNGQf5XMb+PqO2sUPQpuxxVSv6A3sOl4+7VUksOyE
9M+R0WEsqldPHEquwezdXVF91wjI62Su2L5tFD94c0/UKzdD8H36P2V96ny9
dcean0zgQWjooWPKA1jy+X1d2GUS9nbud6p0Ka52elBbdIaOlk9pYkvUJ+Ge
aHOryLIX5o4JpD/ncTTXZHJXnCHB0p428+ShQeFA/9frSW7QFf4eUuJEIPff
ij9LqdzfMrIkcY15I7SjtDx4ugl4L88z0Iimwbgx0uqgoBdE3sv5ihYy4cMQ
CNXMoiPJZPR375EAPA1TFFlL8cCD6Kfv91A8IKgo0TEcm4qiFWFR//88u29N
+j1HchBy5L2YUcVs7HmZxHZoJwmrM7IlRwUmEHZtn39UWi+WZj/u/zzDxEFJ
ga1bSoYwGzTQtvjnI8o9ZLalESTyXj4bG2YbwAupyIP8Xs6w/8i1UYPi4DLO
nMcLAxN49fjZ2bljNHScnDt71Z0Frqxi60vjJO6/OZgd9IWBNtnXw5rukxD8
+jW3Y6EHgrd/7b9+4SgOXl/eo0qdi/G/TTW/Zem40ih9MHm9Lw68cN0WW0r1
y5d6673aTCpPqsoHf1B+vMze7+96qjd7PG+XU6+ntJRbTdLGA2zwCEsZn8Sa
ol/urwUofxFpHeF5tBnEnvRPeRQf1gkoL1i1k0hSfifoSeX09qI/Lw5SnrDg
3r/C9hcNj8bZd+S+9Mai9Zbdi6IEhjZq7eG6OIwEvZGw6JFKKNgKEmc5Schy
+0RYnh3HDcEnk1KC3cg3qpAzTiNRN6p0+eO1AaSbt2iopFyEMrtmnaQxNW/y
5/4xTo5AoFmKjXd3PdYYv80woXK2ZXYxdPBgP7ydK90fRZ7Fi/44q2AtEqFH
AwJTAieQ0JE/8SixH9M/ZvmyNlC+cfHAPfPOcczO88Q6t/XgJKEpfmwTC7dP
e5Q5FxHQYOYu1SwYw5SDxEPThwTerpgwD2mj+ubsDdcXpZcg+uCXWPNjygd1
U2q9ihigzchFPQsZxPznevXNbQS+8D8OFI+lIX2JnnubvBd0+Hz05GsI8HcW
v5OwHqN4f+bdCGc77Etm12v9I6BpdaxrRn8cVSd8m7gLu5CQ3pMd+45AyWT/
O6cSGlzmbd+677yE2zHtAcIcJG7uU3kqc+r/n/cvs5Qc78KWmOc/ruuwMDTP
1u1gRMLs+o/vcYcm4FuqMXskl8DiBj/aP64xGC6POrEtvQ1Zoh5sh8dZkL4q
nMW/vA/iOnamLd2nsCzxp6LUcSo/N2z31pDvx0Jm8dHik2fR4xL9QuUwiT/F
Kwv1PSbw/eXFJvPTlPfnX0pzbGEiJvPzhQM7h6CtUJgUyZmPQR3jgkf//39B
yt6XVZcwsHYpZ9CbVBqYimXO14QIZDhULd2KYSxMvVn39nIFnrvsjxBqIGFn
VHZlYwATs9w3eS0DhjF4QtxXa4Ty9pUJoo+oHuVYwv9O22kEv7ulznMvUPOT
zPwvZheB76cebCW1R8FwLCXeSBM4Iyn7L/PjMCJ39jf+cagGh0DDGYUmAn/Z
2vOWPqHB6O6prmZ9L+QnXr5S+YCk9mDu9fY3DGRf2l7edGoQa7cfOb2oykIp
6TL5TJLE6ydZV8V6xvEtq+HlOOX7F4Per5iifP/KZhUhC5UeHKq3Uo9cNgm5
QVrvXFUvVl3boxxpZo7HyvUOpYJU7pXdXGv9ZBwhV8MS7g93g8heI2e2jgXr
pjXH11MeeddDqb7bYwzXumlECMWTHrfP1Oiyj6N4VZ7Ag7BODFrqj/bOMRGv
yjaqVUXtbWHr0tqbpfiiV+zBvoaFp1YHOt9HEah2ZOyF9hh2uFnfNmtlItpT
VNhwzxCmUp/dKNHIh2lT3MeWdgLWgrSgFfFj2MZ/rlWLrQNFyRdpmRRfxW0Y
edm2iYH2QUEX5d80xP3+84GvhcrPIPmqrRFjkL0m1sWb3o61l9+7rYllwY57
wfqaN8WDkhv+/aL6qUZJpb16jvJfdp5BmeleXCCsuBSCKW5B83+bqDnXb1aY
MqLmvLZ75l9kXhea9YiKjA4mGiM4mAaHqPc5eHfZK9cC5M08KlgZS6LYMsx+
XQYDhhs0X2U4DoL+SCB+QY3E2KGnx+qcJlCYKcPg/f+chrSUCRgR8FGwSzNZ
S8eJgOX6G/184HjrtthEBIHSk0ZaecdG4XzvO7ftt2Yqp14VTMcT+GGnKJeX
Oorixxs/KaEVrnnBA9FbqPv99KlwR9QwMrVNDRUZnxEy7+6Zs4OFa7a7vydG
9KNl4zFyxtsBjheSNnlVMeE0qKQ782MQTTstXnB+zUbFqgfnDviwoO7Xe0+c
8oA7vJc9+5cwofQvMKBQdxLGz0Q/uur0one0+gDbcmOctSzRCxkjUZ6wMY1/
gAkY8I1oXR2B/4FlrxJWkHjIbxElcm8cR+1Kd68v60amSddupZ8sNHjarjox
2QvHiGuPblhZoIydz3qzEwsOt//+6K6h9vV+a/cxPwZOeWSOfqb4NfWYo6x2
LAN3DTwKiqQG8TKHS2f2ONUXhszlZadHELj4V/ulcz0mhVMKXfMJJPP2t1wQ
HINcdnS5UmsbisIznt15wsKhsaksh3AW9l4+WjLlSPGrk2HhHg7queUXG+9c
GMKPXY8yWi5+QsIh4lSDI8X/esW8act70RR0LPm0mD6+leyRdOthYlpFvKvA
eAgistV+n9wLoS5+aNBvI4HNm2NdH+rSIRxaa7Ahzxeaq5RaPQVZyLx2a6TU
j0BncLTeG6ExiGjuS/cdJqHSeHKpjNAAJD7fFYzpdcbBm3OvVaj7dVVLsdR8
wMAy1uaHgVsH8d9svr21DYmf+imhj3onIGtX6LZFk4bfugdlYqj5sVOaEG0R
oSO0Z21O1yUfLGP+4+SkevnSwEVbPqqXfWN2WFzVo8H/e2JHVhiBGJvoqOXD
NPxM8C4w2eKNe1X+4cEXCURmOooGN4/gVU2gQkVXIzgkJ+WNg6lzvJDGmWbL
gOnGNULpT+nQ/H3ipFwXlQ/bNLzvbR9ALa/l6d0XziPVPv/aqCsLv9jNDl0Y
pPiIo7r463sG+IdWFl2juHBD1c54tf4xCOzg1Khc6MA5tqClzstJ8L8V3Fp3
axz59n9tVN92o8Mo7roBdb8CT+4Y21L3q3xAVTNag4a56wckeO6zECXx7fCs
M+WjHMT45AbKd761OMhRfXfrpXStb8govvPovfmW0gLn/lPGol0sRGo1vtix
sw+2p2bdt1hZ4fbWP6rv8ychEJ6S2OlB+d0VDeXP0iow17VQ1xqaRMGekMKT
63pAC32qOkffhtyEFr18Qxbe3ZhbjL5A9bPHbq3DERPozfA3lRAhYfrXeFPu
+3HoqFzZWXGmBydiO0TeqBBYHvX04uNddKQ8r8OHWR98Hzec38RO4PWu77l3
fg7BZMXRsBidTzC7KWnDR3mxl1dezUqffhSHFZ1h/DuHk58FryRT86pr7jjN
3tAHxzv2gQMf7OAXvuAaN0Tg674q7ulvY9DmfCUu0tsB78T5zhDKT7UNOi6H
UvyycPLO/jtio/hldyv7K+W/Pmesxh0PETifo/uhMGgUU9Xt7BzfJtE9ntyc
pUDdb+5qidSNe5GpERombzSJcN3FNzcP9mIXd3xQnIMRNrcK00XLmXi8Q0rY
9DUduppnRMR5AiAl/phsJycxrWOpaLm0B2qxJ+17WGKIvcjHXvidBPnAwbD/
Rz/mTG/3F+9zhuP98EPnqPkJHDk6VZDKROq7tXNRs8PI9wssvnWXhaPf+DIM
3veBo0gy2VzPDsGHZ6XTqX19SlPQ72en49Ays864QW9YKOo8cNIh8CssX/fV
vhEMxi9PZGf7gvUG7mv9VpJQIsb26bwex075S2yXVvZANCz950wQiUadzyNH
bBgQGRGrFHhMh9Lb1IIjFHcVdr+m1V2ZQMNENJfIs35UPAza1kLxg6nu1WXS
O2joD7BZv9LFHX0T8avM9hJwkTs2Yls3DC7hL52MimrEj/03Y9NJ4scvOQ8l
yQFsfRZ1vcz7PFK8LTrEKE85dZ0xVVrAxPfnRYIr1o7gu7tVzqtdVD4v5O/U
HyYgmMLr1rqNyktN5mj3Nha2/uA84vCVQJlc8YUekuIgsz5r7TgSyXRNF0Vq
r+bPhBbsvTGIG8Z/BJ4RBB4M7VZoDKTBRy38QetjT5SzZ9fKhrFw/0bAuXQF
FuT934f9ovyNGOteWCJAImjMb74uZhwvT21qrq3qRt+dYzH1D1m4U1MqM5Le
h4+m2z9l/TmNwL7Co7zBBPIrAmiaO0dB11ednTzWjF7nL0FXpFmojJL33RTY
j4//3ppL7XbA/RDb3DoZFgRP73k9M0PAUbmXL8yA2u9LF8tcP1KczJ2++dth
Jo7QfE1vMofwqs0jdK6Gykmxdb4qen3offLEo/yXNVTHb3vsvEN5aPLg4H1z
FnJ2ynJum2Qi8GxGt9h+Et0epk+bDCaw4vJFoYl3feD6F7mg6U1A57zwHatZ
Gi4IBw/N3/TGfVo1/9g9Evk79KJVcwYgV0g/rUC4gL57rNCBOi9tUlP0x0sm
eCJ3batlDEPL4whvdiXl1ydOhXu/oiHr9hZ2xUdeuGEhlG65gsCbxiXSznuH
8Wso6dIbwQr4ZkS0lEcw4cLdnHmDpINNskevZToEjW8nlnpRz83d3C9WZPco
eiUPxYmeaIbdRqVB90GKtw/3SdKbKF7vqrHbWdOBuAb5vFMmFJ+f2+PyN3sC
VzsnVrdnDWDnGQOTM24ssHiOTx+mesNEdW3i4zIGTG41VfA8YOFiDlvruew+
cD4YMpQRtkOl+FSPIdXL6uHbDCOWDaDvb+cy40JnjLMr65xIZmHKKC6d/X4f
DrX93idrcBrPWabRRmYkDIvFchpXUR4UJsfW8t0NdUHEpgYTFjRgtYdTth9P
P7QuHdA4C7XlzDaPQhLyHcsT5HYzUVNChmZmDsHtpj6n2XYCHxpvOb+MH0bb
oXGr8fNVKHXd1fWpn4m+hpksWiQdnt3tXlFG/nDqdD6/QOXkxSLbPensI9Au
jEmb9K6FVPeq+oNJLDzRO6mWlMBCv6o22903BFaP/edox0tg/sGF5y9Fh9Gy
VcXQ9Ww5TOOVjt2tJhFmc+qU8TnqHHZbjalpDqO3ocAgm/JE95NJisv1aRjR
TVDlOe2B502LWi1t1P1mXvxwRGYAV3+e+cyXfB7bm0Vlvak9Mbgw723LS8LG
512wWvg4GOrcqkQZE+3fZy9W9FP7Znhz21WjLGSWnZs2peZEgGZZoXxsDPvv
Nbw4Vf4NF5Rf3CqnvHLr1dk0n/ERcD0UbZM+0gQb/+bcrgyql8W9thTwM3Gf
a5JT2nIIbXuP5p+fI3DN13xF35ZxjKh06ket6ML+VUf9zCUITPZxipZp0iEx
LPnfmoe+4BIM2+vQz8KLSIm+JPE+3GrI7RZvt8TWxt0qTH8C5ypf7imbpMGu
rkvQ1sUbY818z0Kp/hL2m1NvP09i9wWbGYtwar4+1ek+O8+CW1+9ehZnP2bj
JDaJbraH1LX0rWZfKI56GHek4/wYksQ4H37e3w59J6UsfjsS52o9+opGJ9Dp
EjR32YaGN/rn6tjrCRx/cTLsk8sYLFY+Tz2o1Y4Pm2x7AnazcIFvb5LnGOU7
UstDOfaMgy/y77Ds30mcCTpzpnO0G2yv6g2+d31XPZxxobiKmsOwXK3xsdIJ
/O3umOaaG0DcfjnnEMqn1BT6HAIp7n7ipZ/z/PwItmyPOi2cROX2cJz2q04G
KhtqQ8vaBhEi1Ru/h5uFonnRccX6fmQlM09t2OyE16Q2Jqn7bX8W0+/aSu29
/JKZ1vsMyORyGx7VJpGQrzTnfJ26r/SI1RWV/UjbnGGwZi0J5QYfg/bScXxu
DxRf6tUDpyZ6e74ugfro8lQz5RGkfT6ZXrvrC/pOPVRlEybw8Pa84m8zOrhm
0/gW+fwQe9pTT/sh9Xqckvlr0xjw3W2rSrMdRNuD44Lfk0lk7bb64HBnAO/l
7tnqcbngsObE2pIYJrUX+wek/v93f6uOXxo596G6eirTbz+BI5LFFyr30OFz
2olDgNcXHc/0Dx2lcsBOaqGYltUHNiEvobYVdrhd9dXt5jcmXKf++HHfp0Pa
f5hL45Y/vB3fdQuCwPbzfkIOXCNw3nVkxeqntRj7dvdTETVv4hXlPjbUvBVV
y2x+E+OLvo+P9ov+ZeK4bafY7MgQrG0CXgqVluGUehbt6xQTq4x85ndS+++V
OLGUU+YjGE+0xR6XEkgY2hJ0RWkMGq/GHzS4fcN9iZ3Vq+RZSBTx/LuDk8Te
8ydb0/3GsV7o2GSI/CSK6e9G73r24ulZ08c3JU1wYsjhkfNpAnot6vuePx3B
0r0o+aj8FcU/3g6AJKGzdoS/eJaJD6+366cWjMBifrx+dSSJA1fbnnAEMhA3
d7v87zgdfPKc0SeNSHQqvTj8/PUEMiIURrO9B3CUFSr97yQLf49EJ72+Q/nx
yTTd68NUn/R+jYimuLq/00PayGwEEZbB12NE6rH0Sv4RvVYWnjUKsucp9GHK
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
2f3JA1xjMOK12LzPpwf/BzMNoLQ=
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.7111882141564255`*^9, 3.7136213029251485`*^9, 
  3.713624521020202*^9},ExpressionUUID->"8d09324f-c4b8-4ff7-af4c-\
595c4a526da2"]
}, Open  ]],

Cell["A much colorful visualization.", "Text",
 CellChangeTimes->{{3.71118824153846*^9, 
  3.711188269707638*^9}},ExpressionUUID->"9b510a2b-89cf-4591-917a-\
6d60b11ae3c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], ",", "20"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Obtain", " ", "a", " ", "random", " ", "sample", " ", "of", " ", "20", 
    " ", "items", " ", "from", " ", "100"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111882730420823`*^9, 
  3.7111883507108164`*^9}},ExpressionUUID->"e55d664e-eb1b-4b4c-8f6a-\
00e0b9d2a423"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "13", ",", "19", ",", "37", ",", "78", ",", "56", ",", "58", ",", "8", ",", 
   "81", ",", "85", ",", "29", ",", "77", ",", "76", ",", "80", ",", "31", 
   ",", "9", ",", "27", ",", "52", ",", "89", ",", "96", ",", "51"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.711188304089306*^9, 3.7136213030243797`*^9, 
  3.7136245212050953`*^9},ExpressionUUID->"f22494af-9307-4600-aebc-\
8ac0ddea50be"]
}, Open  ]],

Cell["We can even visualize things in 3D.", "Text",
 CellChangeTimes->{{3.711703025110345*^9, 
  3.711703041217431*^9}},ExpressionUUID->"aa5add7a-4ea1-4b41-8569-\
eeb8334ef8a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot3D", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}]}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "2", "D", " ", "surface", " ", "in", " ", "3", "D", " ", 
    "space"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117030488224816`*^9, 
  3.7117031626290245`*^9}},ExpressionUUID->"4e71d43f-8799-4741-a9f7-\
b0d53a6e0133"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
L4A+rZdILRN9BsjGv1BE60dOzZoctJ9aj3yVfcqBlcmJ0w/ovpfeQOk/d0kS
NY9Q781U/6+T+/SR1ZAjvy1k96mk5z1G5Da/jKtC6n7XoP0pV/ZJqiyo/aCe
9xhVevK5nw9R/V097yv0r0waXmJL5aXnvcT5ilecumrqvZw+ff3C+YPebVKg
+l563kuEfSoq/Jovu089RbQ/ZbdwVbmcrC8IxLS/2l1jj3EpVed8l32yYTLX
TGvSFGoelgdKfz4m/mrmWKreUKd1WJa1zf2LbB0N1H6lGuy899FZ+T71/NKi
/ffPWqUun0b1FevQupbkZNiTU9RzRI/Wpx5pUx9HvbeX9KzTN4V9VrH7I3uP
GkPFqwa8eyvCVOWp/hkx7b8cHqtvHPJIdv2fsn9Xh93TM+XuU/0ALAWg9PfL
zwyeNZeqV/vQ+j75becqXsjqNIkWrdt0t5+tcaPe5+vQuve17D8eYlk9JtGj
dY+1H2yXtlDPkZ716ZR+HislS2TxSsW0rhuY4XCllao/22WfPEhV5juW+VP1
GHXf8eCmbUvwmbOUvy+tSzixW/VKo2S6Bq2vHfehMv8RNV/p0nqK5mulznHU
c1yf1gesDff+dpSaV0W0vjxTzm0PUHXIF9m44INk+Y6cg2eovqye9eD0Fzr5
OxOo9wDUfrouRM/O6dv7O9Wf07O+8/sc8UB/BVUPqNL+4GttDm8UZOMBetZ3
/EkdtoleJ2XX0aD9bVOy8r5+kq37oGd9N9fV9WKriJp/etZlrHMPNp6h3vdK
9Onr9J1/+aCpPzX/9KzLzLbyHC5byOZDENF++Z1thz9T/dv/3pvL/L9iOmPq
X1D1xjdZ/gWwu0/6D41qalzJ9gWIbuMUfqy5L7XP1ZvWDd5Y1E+i+tBYVP+M
AdwYnjhgRT21X9+zPtK63Lhkghq1H6FJ+8PNB25e/pPq2+xZH837c7PvNk+q
36ZnHeRo3ad0ww3Z/ObZs37h3Mhbvs6Ymg9F9PVZavarzhySzZ+eYtrfelAE
b/ZT76t/yO5vIfhEJ3eb/KH26eSB0j/46t0f84m6PpvWm9NPPVUxkemgTusz
d3zy8RlLPaeo/TsR2F/3Xav9lJpXtWj/UmW1imA29ZzSoXV4MbNdIUhWV4Me
rbe5lO7dfZfq/xHTuoP0P0vHwxTnX7L6RQy15+T7bT9DPX9l8w/Rt266ZWYV
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
vYp672+i+wP1A/+LvkuoTtVJ7vPUk/8f9xehCw==
          "]], Polygon3DBox[CompressedData["
1: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
jH/54lHxKX9wZTmr3HVvpBWD5zD2cwoOLF7ZQ8kN5SByEXsC8WeC+VGCk7t/
85HXsfdiznPYzyIvlTh/8+Uq5E78V0twT+NDbmXNGlfzUfyyJzJ/b/B8S9Rw
a3krZFSOmjOm5qfxYc0Sf+zxpuTowcSfe8z/Ej2b+HIdclcJzBV75cRLc/Qw
4u0tnmeJHlQ8vAuZXoIT+/19ka9ycGjvF8N/zsGh/Z6dkZ9qTZAriJ/WCvPR
fFmIvF2ipp2aoqZZ6+T4chc5jNzfmmU+LUAW1/P4FPtgMQX/3RLnZf4bz3IE
a481yFr6TYn51hvxwJomtxIfrXWblVira/YsPinRC4kH5os12f21xtsbep7y
2CXot3P0VMfW8zB+5HTi1zvIx+51Ce5mvtrbXZOjhlu77c/kjCfX73fcHsb3
H5Cit3GOvZx47L32GHI/OaC9xyU54sA+3f7LGi4+LjFfS4yNrPvh3JtL1HPx
wnr1Xon8sOf7FX8c/iUp8HkM/nUl+nXx+/IcnP3hmo9v5uDc8vSFObi4eyPX
l0O6R29w/0sp8ORT/I9z4PyCEvnhmS6o+fo140vx30uB/xn7zRK9m3hj7+Q/
jREpOIfx5DPm1/jz2caUsSX+fptjD5bU/F+W4x3G7Vv13Y4Zt++XmOuZeXbW
l99ziDj4Ub3mM7/J0Vf4rmXICSn+6di/2JO4R+6N+GBNtjZbv5qVqNkf1vNt
WkLEqU/rNTFSrLRnaFHiHuvIFyWe5T+W41L0nJ7/D/jfpeiBjReb5WE1fy7L
8U/plBScznj/Cf+nFD25vbn/KM5M8Q/FftV+3md4r+f9I9d/SNGTW39fKdHP
Wg+tj++U4LvWP+ur/4zkB3IauU2XErVDjBar5XRyu+3Qz5bgWHKtfujZYmEO
Pr+juFmC08nt+qCfL3F2Ys9h9QzlWHKtXuiZ+J2RHvj3Ic+UiDW5xQE15uRA
cqGe6KecWyL2rBlyFzmmXLM3ehZ+1xL3W3OsPe6ZZ3NW3Uv3xLP9Z90rz8Cz
Pb2ejWdnLA7PcYbWIGPxZPxvsbctgWVilFhlDFm7c47Ysiexvtoz3ZojVlzv
cTliZsv6PHPYXDaWzYWjakzLocyl0/C/L8GZjO1T8L/D7lmi1omhYmmvun4x
SCw09s3do2sO+IyvU/TQPtsYlffY9xi7/kM7JkLoD/yeV4L72wPIZxZ7bjn+
C1gPPXN7T/nU/DpmrfSMnTsjx5l5VtYvY+DRii/GxlM5eLL/Qq1P80v0Pjul
wKMX8J9McYav4N+Vg9fau1n/3IMvU/RkreuYtVG8d+70HLjvv8DHq1jrjVGv
+U5rozHqWlyjtdaYnlFj2P8fvVLEtv94/M/yRQ5+rO2/lz4pxuyxp9T57pP/
WOSsclX5waBG8Il+KXDIf0j+B/osBz72wX6q7vcnObDZfyn22Atrzk2u/pwa
4/bu9iOzaw7Zu9vDm1v+I/VfqfVmdI53zaj76zvlJHIT+5V7cvC18XV//F5z
0Fy0/5mZY468338r3jsJuTFFTt7H+Msl/tf4fdZXOcgtKXJ8ss8u8T+0Ywr+
LGeUO4opj+nn6Evs9eWPjtmXdK1zfYY81d7fZ9+eoy/xv7R8zH+ufrPfar32
GXJRMeGROkfu1iHFvfZs8gx7dfHOnP48xT8Dc91/GJPqfr7MvP8D1z7pVw==

          "]], Polygon3DBox[CompressedData["
1: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
fpl6
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0E8rw3EAx/Gv+c/kYu1Gbly52pWrOTLDbFFkShRFyVHZM6DsGVDzDMhR
8Qwoyv8NI8prtcPr+/4cfvX99uvP5CdWGkIIc+So7T1Hpx5ogZh9rEX67JKe
MWhf6rBe6w0J+14fGLN/9Y+k3R0JYUofSfHEM9O88EqaN96ZocwsFT7q7/zk
iwxVvpnnhyxx90xql0YZr33jDVVG7Tu9ZcS+0iG90HMG7FM9odc+0kN67H3t
0F3a2WGbNrbYpJUN1mlhjWZWydPEMks0ssgCkfr//wf6KDK8
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{387, 251, 386, 656, 572, 761, 388, 657, 573, 762, 389, 658, 
       574, 763, 390, 659, 536, 391, 660, 575, 764, 392, 661, 576, 765, 393, 
       662, 577, 766, 394, 663, 537, 395}], 
      Line3DBox[{399, 664, 538, 397, 665, 268, 401, 666, 580, 771, 403, 667, 
       582, 774, 405, 668, 539, 407, 670, 671, 540, 409, 672, 586, 779, 411, 
       673, 588, 782, 413, 674, 541, 415}], 
      Line3DBox[{414, 783, 589, 412, 781, 780, 587, 410, 778, 777, 585, 408, 
       776, 584, 669, 406, 775, 583, 404, 773, 772, 581, 402, 770, 769, 579, 
       400, 768, 267, 396, 767, 578, 398}], 
      Line3DBox[{419, 675, 542, 417, 677, 678, 543, 421, 679, 285, 423, 680, 
       593, 789, 425, 681, 544, 427, 683, 684, 545, 429, 686, 687, 546, 431, 
       688, 598, 795, 433, 689, 547, 435}], 
      Line3DBox[{434, 796, 599, 432, 794, 793, 597, 430, 792, 596, 685, 428, 
       791, 595, 682, 426, 790, 594, 424, 788, 787, 592, 422, 786, 284, 420, 
       785, 591, 676, 416, 784, 590, 418}], 
      Line3DBox[{439, 690, 548, 437, 692, 693, 549, 441, 695, 696, 550, 443, 
       697, 302, 445, 698, 551, 447, 700, 701, 552, 449, 703, 704, 553, 451, 
       706, 707, 554, 453, 708, 555, 455}], 
      Line3DBox[{454, 805, 607, 452, 804, 606, 705, 450, 803, 605, 702, 448, 
       802, 604, 699, 446, 801, 603, 444, 800, 301, 442, 799, 602, 694, 440, 
       798, 601, 691, 436, 797, 600, 438}], 
      Line3DBox[{457, 608, 806, 456, 709, 609, 807, 458, 710, 610, 808, 459, 
       711, 611, 809, 460, 318, 461, 712, 612, 810, 462, 713, 613, 811, 463, 
       714, 614, 812, 464, 715, 556, 465}], 
      Line3DBox[{469, 716, 557, 467, 717, 617, 816, 471, 718, 619, 819, 473, 
       719, 621, 822, 475, 720, 558, 477, 721, 335, 479, 722, 624, 827, 481, 
       723, 626, 830, 483, 724, 559, 485}], 
      Line3DBox[{484, 831, 627, 482, 829, 828, 625, 480, 826, 825, 623, 478, 
       824, 334, 476, 823, 622, 474, 821, 820, 620, 472, 818, 817, 618, 470, 
       815, 814, 616, 466, 813, 615, 468}], 
      Line3DBox[{489, 725, 560, 487, 727, 728, 561, 491, 729, 631, 836, 493, 
       730, 633, 839, 495, 731, 562, 497, 733, 734, 563, 499, 735, 352, 501, 
       736, 637, 845, 503, 737, 564, 505}], 
      Line3DBox[{504, 846, 638, 502, 844, 843, 636, 500, 842, 351, 498, 841, 
       635, 732, 496, 840, 634, 494, 838, 837, 632, 492, 835, 834, 630, 490, 
       833, 629, 726, 486, 832, 628, 488}], 
      Line3DBox[{509, 738, 565, 507, 740, 741, 566, 511, 743, 744, 567, 513, 
       745, 643, 852, 515, 746, 568, 517, 748, 749, 569, 519, 751, 752, 570, 
       521, 753, 369, 523, 754, 571, 525}], 
      Line3DBox[{524, 857, 647, 522, 856, 368, 520, 855, 646, 750, 518, 854, 
       645, 747, 516, 853, 644, 514, 851, 850, 642, 512, 849, 641, 742, 510, 
       848, 640, 739, 506, 847, 639, 508}], 
      Line3DBox[{527, 648, 858, 526, 755, 649, 859, 528, 756, 650, 860, 529, 
       757, 651, 861, 530, 652, 862, 531, 758, 653, 863, 532, 759, 654, 864, 
       533, 760, 655, 865, 534, 385, 535}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{101, 251, 102, 767, 266, 664, 131, 784, 281, 675, 146, 797, 
       296, 690, 161, 806, 311, 176, 813, 326, 716, 191, 832, 341, 725, 206, 
       847, 356, 738, 221, 858, 371, 236}], 
      Line3DBox[{103, 252, 656, 105, 267, 665, 132, 282, 676, 677, 147, 297, 
       691, 692, 162, 312, 709, 177, 814, 327, 717, 192, 342, 726, 727, 207, 
       357, 739, 740, 222, 372, 755, 237}], 
      Line3DBox[{107, 254, 657, 109, 769, 269, 666, 134, 284, 679, 149, 299, 
       694, 695, 164, 314, 710, 179, 817, 329, 718, 194, 834, 344, 729, 209, 
       359, 742, 743, 224, 374, 756, 239}], 
      Line3DBox[{111, 256, 658, 113, 772, 271, 667, 136, 787, 286, 680, 151, 
       301, 697, 166, 316, 711, 181, 820, 331, 719, 196, 837, 346, 730, 211, 
       850, 361, 745, 226, 376, 757, 241}], 
      Line3DBox[{115, 258, 659, 116, 775, 273, 668, 138, 790, 288, 681, 153, 
       801, 303, 698, 168, 318, 183, 823, 333, 720, 198, 840, 348, 731, 213, 
       853, 363, 746, 228, 862, 378, 243}], 
      Line3DBox[{117, 259, 660, 119, 274, 669, 670, 139, 289, 682, 683, 154, 
       304, 699, 700, 169, 319, 712, 184, 334, 721, 199, 349, 732, 733, 214, 
       364, 747, 748, 229, 379, 758, 244}], 
      Line3DBox[{121, 261, 661, 123, 777, 276, 672, 141, 291, 685, 686, 156, 
       306, 702, 703, 171, 321, 713, 186, 825, 336, 722, 201, 351, 735, 216, 
       366, 750, 751, 231, 381, 759, 246}], 
      Line3DBox[{125, 263, 662, 127, 780, 278, 673, 143, 793, 293, 688, 158, 
       308, 705, 706, 173, 323, 714, 188, 828, 338, 723, 203, 843, 353, 736, 
       218, 368, 753, 233, 383, 760, 248}], 
      Line3DBox[{129, 265, 663, 130, 783, 280, 674, 145, 796, 295, 689, 160, 
       805, 310, 708, 175, 325, 715, 190, 831, 340, 724, 205, 846, 355, 737, 
       220, 857, 370, 754, 235, 385, 250}], 
      Line3DBox[{238, 373, 859, 223, 741, 358, 848, 208, 728, 343, 833, 193, 
       328, 816, 815, 178, 313, 807, 163, 693, 298, 798, 148, 678, 283, 785, 
       133, 268, 768, 106, 253, 761, 104}], 
      Line3DBox[{240, 375, 860, 225, 744, 360, 849, 210, 345, 836, 835, 195, 
       330, 819, 818, 180, 315, 808, 165, 696, 300, 799, 150, 285, 786, 135, 
       270, 771, 770, 110, 255, 762, 108}], 
      Line3DBox[{242, 377, 861, 227, 362, 852, 851, 212, 347, 839, 838, 197, 
       332, 822, 821, 182, 317, 809, 167, 302, 800, 152, 287, 789, 788, 137, 
       272, 774, 773, 114, 257, 763, 112}], 
      Line3DBox[{245, 380, 863, 230, 749, 365, 854, 215, 734, 350, 841, 200, 
       335, 824, 185, 320, 810, 170, 701, 305, 802, 155, 684, 290, 791, 140, 
       671, 275, 776, 120, 260, 764, 118}], 
      Line3DBox[{247, 382, 864, 232, 752, 367, 855, 217, 352, 842, 202, 337, 
       827, 826, 187, 322, 811, 172, 704, 307, 803, 157, 687, 292, 792, 142, 
       277, 779, 778, 124, 262, 765, 122}], 
      Line3DBox[{249, 384, 865, 234, 369, 856, 219, 354, 845, 844, 204, 339, 
       830, 829, 189, 324, 812, 174, 707, 309, 804, 159, 294, 795, 794, 144, 
       279, 782, 781, 128, 264, 766, 126}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
blAu0R/TXkjA4yfqRU8HK9DFc1j9kEAFOHEbKyzFknrLGdjK5F4DExebC7xC
mtDNLmR89jgBDNIRpxMH6oHP5c17j7kWzJKeunF4gcwdTey0mm+JuPRfypuD
dqXwXEXC2o+877En1MbJMyYgWi7Ld+1uDchXy61FkbnswWid/4vGPMw8cdQg
5HcjzC5t+jHykOQKnG8VDQ2HISIueO/lIIgN8BIZIPsYpzYZEvetBK6eZT9t
mZEGt7W20gZIXnrqZOk7tqMHzm6iMnObdKCnd6rMix9UULOwO/jRxAkdZg7K
F1NKkGHDdpaLpD5fSZ452bavEkyJu6Gcj5OQNapN/XITyfPr2jv4WEj/u2S9
wYmsa2ifQbQP6ac8H6Zy+j1a4e1osY1yFOnXZ+L9latpIOFYc439WBb4Wzxg
bU0JxpbPdFdG5wk4kX/56YaOWPi6nS2sVSYRS+7ecDnxi+S0jb+zDKEGT3yO
4SSOF0CbqO1/bskEyJu0PmI91ASx+ZuHU9YzYZBHMNeb5M906bqkrpVSOG7r
cHKNpxHv61pf+EvmuOoUe7aji/mgdsJ8OterE2eiJFNOrNJgl7Vam9qRZlAO
9u7fvq8Z5QJMq52HaDBYu7TrYXw/WhiCfYpaM6R57pKvzqSCxYOWly7aFKAJ
M7WGNxXh18izkWVWJCfHTV2p9yvAtVALlwLvt7iJI1LwBLkv24TVsqv5guDS
VhNRgawynKIlPthH5g4NnjkLitwHcO5dzNzcm43fAy+VmXBTIWskvuKrVDiy
7aKe+2dViHspLk4KUwTIsSXvf7GxBV1efwyuXy+AX+bVN4NIHqNfNriuV14J
uhz9/fTr/ehoKvuqh54GcopnHiSrt8H5+qv0vcl9mP/2dYVPFhVOaV/OY+2o
h5y3x/u7V7swsfbQSZEQGvT47Dpj0KsI8ycyk8fMu1G0rIzl7RwNPCyV3S0q
BvHjK5eJLVzV0EZcCZsn6zB05O87e+VouBiclPGsPhDdHBKiuch5Uy5Xf81T
nYB/Cvf5JhNx8N8oveCnnwREOboNOQXG4CvpgPvZ5sVgJCpnV0vOlY7p+e/n
rIux/eZPjjpDV/z8bu/9b6QvS/6bTPskfwp1EgYOsjE4w6a7MjeSSD3k3+bN
Ner8AayPRrzVNSNz4awWh9FeKvCDwo4L/KnQfidVZCyuCdq+JyV9ITm2qj+/
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
vsq+tQrP6u+BiCYK/g8CZAVS
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{1., 10.}, {1., 10.}, {0, 0.9879759136859008}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.711703086560026*^9, 3.711703116727495*^9, 
  3.7136213033507175`*^9, 
  3.713624521457465*^9},ExpressionUUID->"a334220c-f088-4e20-84a4-\
50683153bd1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPointPlot3D", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10", ",", "3"}], "}"}]}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "bunch", " ", "of", " ", "points", " ", "in", " ", "3", "D", " ",
     "space"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117031699759674`*^9, 
  3.7117032169687357`*^9}},ExpressionUUID->"9ea695e2-c6e8-44c7-856a-\
4009bcb58f14"],

Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[0.3315753, 0.4561011, 0.6388182], 
    Point3DBox[{{0.5903777113076822, 0.10548175729807685`, 
     0.010209660778301988`}, {0.6844925216841922, 0.5124439837935997, 
     0.8604582519464703}, {0.03259112120643448, 0.2570836138914785, 
     0.6625083739883999}, {0.5439979700042687, 0.07499014350844879, 
     0.43848319672752756`}, {0.8930563629777983, 0.3006827504110594, 
     0.29821303843939373`}, {0.3534125969291593, 0.6308527378851867, 
     0.3404585469620194}, {0.7359830850840601, 0.6437769495143155, 
     0.2032860124269935}, {0.009066070348000776, 0.3837909080220203, 
     0.6153264177113325}, {0.04624034467781302, 0.6120076143239759, 
     0.704772818975524}, {0.640737224952949, 0.9476408187688297, 
     0.42865161597810286`}}]}, 
   {RGBColor[0.7926498, 0.5499369, 0.1278459], 
    Point3DBox[{{0.004241630170188859, 0.20994315380285844`, 
     0.8408164636907505}, {0.5051213060423889, 0.07132337986909953, 
     0.17633655372106882`}, {0.1605948040283256, 0.7252887478279697, 
     0.5545464100636222}, {0.45530100381362226`, 0.3967976703476055, 
     0.8012083156016196}, {0.1943456636012557, 0.850246674492743, 
     0.40865848983043973`}, {0.5099423433527888, 0.30757919339864137`, 
     0.33304017488435744`}, {0.4353217768509965, 0.6998579904757631, 
     0.10931286849222266`}, {0.9775956119179243, 0.095390622797759, 
     0.6776975716847753}, {0.5516693188737289, 0.8919568529193791, 
     0.9146194671755417}, {0.5979844112189916, 0.3886920611764553, 
     0.11013310324025816`}}]}, 
   {RGBColor[0.5041629000000001, 0.6224121, 0.1753965], 
    Point3DBox[{{0.9257918169295638, 0.49140885689385105`, 
     0.7710379297583954}, {0.3007359050013061, 0.06556978704747962, 
     0.0917757288069383}, {0.015196943104743843`, 0.0040908623842219605`, 
     0.5999670533606942}, {0.7811710391938196, 0.25358163729915195`, 
     0.11517495752120155`}, {0.8744514761673312, 0.004110027479510281, 
     0.8264870612745419}, {0.6559696434408981, 0.2097087233596313, 
     0.30871828971969184`}, {0.7173934261566108, 0.5887683346641102, 
     0.720306333160422}, {0.5624293119148303, 0.48587130430389136`, 
     0.33143932471949267`}, {0.5348752850635503, 0.13705563314923674`, 
     0.9630843547743992}, {0.08468823750026377, 0.11611599455707466`, 
     0.7845276436086677}}]}, 
   {RGBColor[0.8302733999999999, 0.3470634, 0.18826110000000001`], 
    Point3DBox[{{0.5225606369299254, 0.19925343084441804`, 
     0.9120714690753047}, {0.6337121394144183, 0.41560156243382207`, 
     0.6194277907485097}, {0.3300506266690395, 0.8799710825807001, 
     0.04931291728367415}, {0.6379409640031013, 0.9319743775385629, 
     0.6679940496065508}, {0.23787687059617268`, 0.40730141898176875`, 
     0.4843776215721456}, {0.4361002480080425, 0.46752266161759004`, 
     0.5298742230531794}, {0.02954923496199502, 0.03735086164048629, 
     0.5915086145231074}, {0.07754379557191138, 0.32669322012264157`, 
     0.025128090013999627`}, {0.4530169875837402, 0.8445953085999036, 
     0.6505982624387117}, {0.29230041950682195`, 0.09071303285563803, 
     0.2526504577128119}}]}, 
   {RGBColor[0.47563919999999993`, 0.4235616, 0.6312158999999999], 
    Point3DBox[{{0.005930070620435934, 0.53970591843763, 
     0.2048163329794599}, {0.4459557116387487, 0.7134402673548699, 
     0.6824378548553962}, {0.3229833724523903, 0.3531560529828608, 
     0.4720101762259399}, {0.04286601629642295, 0.2892432688338582, 
     0.6860321860227765}, {0.13967962816028545`, 0.6144658504538019, 
     0.2731961268301142}, {0.7888299909890311, 0.1216671908138971, 
     0.6813839007578564}, {0.11204031924321178`, 0.11850191848555292`, 
     0.553570657066758}, {0.5420681805677052, 0.7004010134919496, 
     0.6450572178104363}, {0.8788387039428542, 0.19508621374538548`, 
     0.5540889173829617}, {0.032939040060044, 0.8627717994721065, 
     0.961970038606444}}]}, 
   {RGBColor[0.6948711, 0.3883986, 0.0921483], 
    Point3DBox[{{0.8215989822422329, 0.2168958728842747, 
     0.5590943265149504}, {0.5504985808258753, 0.24603218507661517`, 
     0.938003484155931}, {0.07182018572682991, 0.37083476800975235`, 
     0.13910512157550214`}, {0.7912216927434881, 0.46694118208855184`, 
     0.5198613862544927}, {0.5230072247325921, 0.5080226352496513, 
     0.1644912401089924}, {0.712986769630404, 0.9852888834361417, 
     0.928576553677442}, {0.07360042068332762, 0.036366409222296836`, 
     0.7974847775868856}, {0.9571538203044581, 0.31004285429220846`, 
     0.9099018859694123}, {0.894910145541034, 0.1660623607081868, 
     0.8432033609748866}, {0.5206941737428836, 0.5791104319257339, 
     0.6610598369456255}}]}, 
   {RGBColor[0.3275082, 0.5566509, 0.7041141], 
    Point3DBox[{{0.18040350832103536`, 0.41153235049293446`, 
     0.730698293345363}, {0.6673856479167894, 0.8178600275453054, 
     0.4093106022515858}, {0.525867167235812, 0.885230964309156, 
     0.9898181917764675}, {0.8741593623725943, 0.9868281771349345, 
     0.8049863891291675}, {0.04694517320073244, 0.881086702137029, 
     0.9255039718300051}, {0.9195954710836476, 0.19058879407248996`, 
     0.27413325177212844`}, {0.8042455793646741, 0.3670292299069773, 
     0.4276617816692314}, {0.1036247886417816, 0.4907710359647248, 
     0.3406376528838071}, {0.7623882251474117, 0.995524277280283, 
     0.012803210012553246`}, {0.43120162021884845`, 0.022290819499074077`, 
     0.2819935999419556}}]}, 
   {RGBColor[0.9, 0.675, 0.], 
    Point3DBox[{{0.12267106902872915`, 0.3969449864468697, 
     0.5965067558787855}, {0.7820686942593649, 0.6628123716938983, 
     0.5121041902376777}, {0.4064554496575521, 0.5703984535414686, 
     0.4218363977654833}, {0.41665308820671987`, 0.23126751218328168`, 
     0.7044672365762501}, {0.7336734369563007, 0.321267501533786, 
     0.9948100108334075}, {0.23611539245599156`, 0.1858731796165476, 
     0.14802811255371107`}, {0.7288804753756144, 0.2381972985933316, 
     0.4484862060306296}, {0.8709796788563535, 0.027620086477111894`, 
     0.5257864636217633}, {0.41755758644280117`, 0.0638355465431184, 
     0.10066473279811983`}, {0.5019319476297883, 0.012332613246228696`, 
     0.04978053667354709}}]}, 
   {RGBColor[0.5828616, 0.340344, 0.5526333000000001], 
    Point3DBox[{{0.20455046716287195`, 0.8306043862232826, 
     0.83059948535115}, {0.4616538130243264, 0.45036192470215397`, 
     0.5486797046540051}, {0.6344540508121221, 0.8343435669037504, 
     0.47368816612531583`}, {0.781377718336209, 0.5789238033966195, 
     0.5839022374231189}, {0.11542379034501837`, 0.22837653780502687`, 
     0.47851092968352016`}, {0.9015222779748662, 0.7941730180647217, 
     0.2777537105297494}, {0.9509984944963565, 0.6529371740870635, 
     0.7834219891164975}, {0.3442804650601785, 0.44025842451568664`, 
     0.5059591846734852}, {0.2954073758320972, 0.444077694145504, 
     0.4471235450618991}, {0.9513104548569846, 0.6329514003766785, 
     0.3755675043322624}}]}, 
   {RGBColor[0.5144301, 0.5278347, 0.], 
    Point3DBox[{{0.0858279628390326, 0.44191642525843866`, 
     0.6130522125167981}, {0.6893819465360074, 0.32571900914998, 
     0.2554675189781268}, {0.8860461353609956, 0.6315675394729428, 
     0.8113772910601087}, {0.5765294190778403, 0.9362833122492171, 
     0.5927638707657508}, {0.4899532814150711, 0.84890566575751, 
     0.07807535856203529}, {0.028833692891486074`, 0.8715826163525757, 
     0.16890278788973467`}, {0.7155590203681721, 0.4270514301710897, 
     0.5327065299386446}, {0.7372976529019766, 0.11371884645401797`, 
     0.177007013827287}, {0.6595275998842967, 0.9101338985834218, 
     0.9477400875666189}, {0.04921193647431088, 0.2554025767545567, 
     0.6304912244730589}}]}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  FaceGridsStyle->Automatic,
  PlotRange->{{0.004241630170188859, 0.9775956119179243}, {
    0.0040908623842219605`, 0.995524277280283}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7117032191934624`*^9, 3.7136213036007185`*^9, 
  3.713624521613707*^9},ExpressionUUID->"24f983e7-ab50-49c8-aad2-\
6f3354637a02"]
}, Open  ]],

Cell["\<\
There are many types of visualization available in the Wolfram Language, \
going through the documentation is a nice way to see whats available.\
\>", "Text",
 CellChangeTimes->{{3.7117032378870807`*^9, 
  3.7117032901357236`*^9}},ExpressionUUID->"493801ca-ea6f-4f13-839c-\
03aba0f8386d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"Range", "[", "100", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "way", " ", "to", " ", "randomize", " ", "a", " ", "list", 
    " ", "things"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111882730420823`*^9, 
  3.7111883918902073`*^9}},ExpressionUUID->"b7383045-8085-4b7e-b4d3-\
6050dd016641"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "94", ",", "24", ",", "77", ",", "16", ",", "97", ",", "23", ",", "48", ",",
    "65", ",", "1", ",", "11", ",", "31", ",", "76", ",", "27", ",", "63", 
   ",", "21", ",", "57", ",", "71", ",", "83", ",", "61", ",", "12", ",", 
   "53", ",", "14", ",", "56", ",", "60", ",", "79", ",", "6", ",", "7", ",", 
   "64", ",", "92", ",", "96", ",", "39", ",", "69", ",", "73", ",", "41", 
   ",", "28", ",", "18", ",", "20", ",", "81", ",", "89", ",", "4", ",", "19",
    ",", "40", ",", "33", ",", "52", ",", "42", ",", "17", ",", "25", ",", 
   "84", ",", "35", ",", "46", ",", "22", ",", "13", ",", "62", ",", "38", 
   ",", "66", ",", "2", ",", "26", ",", "67", ",", "80", ",", "54", ",", "9", 
   ",", "99", ",", "85", ",", "8", ",", "49", ",", "29", ",", "55", ",", "44",
    ",", "32", ",", "10", ",", "36", ",", "93", ",", "70", ",", "3", ",", 
   "82", ",", "37", ",", "87", ",", "59", ",", "90", ",", "68", ",", "91", 
   ",", "95", ",", "34", ",", "78", ",", "43", ",", "5", ",", "30", ",", "15",
    ",", "86", ",", "51", ",", "50", ",", "45", ",", "88", ",", "75", ",", 
   "98", ",", "47", ",", "74", ",", "58", ",", "72", ",", "100"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7111883946326427`*^9, 3.7136213036632442`*^9, 
  3.7136245216918325`*^9},ExpressionUUID->"5fe8f9e6-799d-433d-9b5a-\
a183220e08ae"]
}, Open  ]],

Cell["\<\
if you have forgotten what Range does, you could literally take out the code \
for Range[100] and run it independently, after which you will see clearly \
what RandomSample does. Breaking up complicated pieces of code in such a \
manner to understand the individual pieces is a skill that you will need when \
reading code in the wild.\
\>", "Text",
 CellChangeTimes->{{3.7111884057019453`*^9, 
  3.7111884971866355`*^9}},ExpressionUUID->"b20f8110-22ea-44be-80d4-\
35f498c7982a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<bread\>\"", ",", "\"\<butter\>\"", ",", "\"\<cheese\>\"", ",", 
     "\"\<milk\>\""}], "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Making", " ", "a", " ", "random", " ", "choice"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111885017178197`*^9, 
  3.7111885405338516`*^9}},ExpressionUUID->"15f5d775-0402-4ed0-9c84-\
f1347df136c7"],

Cell[BoxData["\<\"butter\"\>"], "Output",
 CellChangeTimes->{3.7111885413789635`*^9, 3.713621303710099*^9, 
  3.7136245217387037`*^9},ExpressionUUID->"860bb9cc-97cd-4fa5-8f31-\
fdd25510487a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<bread\>\"", ",", "\"\<butter\>\"", ",", "\"\<cheese\>\"", ",", 
     "\"\<milk\>\""}], "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Making", " ", "a", " ", "random", " ", "choice"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111885017178197`*^9, 
  3.7111885475243187`*^9}},ExpressionUUID->"09fe8772-26db-48bb-812b-\
9f0bb6709962"],

Cell[BoxData["\<\"cheese\"\>"], "Output",
 CellChangeTimes->{3.7111885493152924`*^9, 3.7136213037569675`*^9, 
  3.7136245217855525`*^9},ExpressionUUID->"7b0f6219-a06f-4de4-be12-\
4590b46cab97"]
}, Open  ]],

Cell["\<\
We mostly get some random item every time we run RandomChoice on a list of \
items. \
\>", "Text",
 CellChangeTimes->{{3.7111885515672784`*^9, 3.711188582115655*^9}, {
  3.7111886488381577`*^9, 3.7111886547453475`*^9}, {3.711701964663443*^9, 
  3.7117019699811296`*^9}},ExpressionUUID->"2e81139b-cf26-475e-8497-\
002f239a25aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining our own FUNCTIONS", "Chapter",
 CellChangeTimes->{{3.7111880853962464`*^9, 3.7111880871545396`*^9}, {
  3.7117036872539864`*^9, 
  3.711703712083144*^9}},ExpressionUUID->"734f4b63-ed57-4ee7-b544-\
515491017a60"],

Cell["\<\
So far we have used the built-in WL functions to do most of our computation, \
for most well defined tasks there are built-in WL functions that perform them \
very efficiently but for some arbitrary task we might want to perform, there \
may be no built-in functions that do it so we end up having to define our own \
functions. Before you decide to write your functions, it might be wise to \
first of all check the documentation as what you are trying to do might \
already exist, to avoid reinventing the wheel.\
\>", "Text",
 CellChangeTimes->{{3.7117037157428246`*^9, 
  3.71170389490736*^9}},ExpressionUUID->"b1a37dc1-864f-4f68-9bf5-\
d233d8e476b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", " ", "=", " ", 
  RowBox[{"RandomInteger", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.711703905113762*^9, 3.7117039074576607`*^9}, {
  3.7117040248277063`*^9, 
  3.711704039228803*^9}},ExpressionUUID->"998cafb9-aef9-4634-bf3e-\
2f3b40ed3710"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.7117040406413794`*^9, 3.711704048111411*^9}, 
   3.713621303803846*^9, 
   3.7136245218480835`*^9},ExpressionUUID->"deff9dc9-e5f4-488a-8560-\
474b101234df"]
}, Open  ]],

Cell["\<\
Above we assign x to a RandomInteger between 0 and 10 using the single equals \
sign, this what you might have seen in many other programming languages. But \
in WL we have another type of assignment\
\>", "Text",
 CellChangeTimes->{{3.7117039124712973`*^9, 3.7117039918129516`*^9}, {
  3.711704056474514*^9, 
  3.711704081268895*^9}},ExpressionUUID->"c2f453aa-5c50-4cc8-a122-\
41ad3aa63a15"],

Cell[BoxData[
 RowBox[{"y", " ", ":=", " ", 
  RowBox[{"RandomInteger", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.711703993618188*^9, 3.711704014902258*^9}, {
  3.711704088360149*^9, 
  3.711704093070253*^9}},ExpressionUUID->"3b0767a3-3ef6-425d-abfe-\
631b5a2d639e"],

Cell["\<\
The first one is called Immediate assignment while the second one is called \
delayed assignment. In the first one a RandomInteger is generated an \
Immediately assigned to a variable, this is like saving that number.\
\>", "Text",
 CellChangeTimes->{{3.711704106473357*^9, 
  3.7117041691703997`*^9}},ExpressionUUID->"3e82b080-495c-4543-83fe-\
af00d23ea35a"],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 CellChangeTimes->{
  3.7117041724554276`*^9},ExpressionUUID->"349e55b1-a1a5-4555-a965-\
baf2fe0b9f0b"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.7117041738856487`*^9, 3.7136213038819723`*^9, 
  3.7136245219262094`*^9},ExpressionUUID->"7132fa8e-e4d4-4e84-b342-\
eb7c940c0171"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 CellChangeTimes->{
  3.71170417516896*^9},ExpressionUUID->"9c20f7db-5f56-48a1-b275-024e652f07f2"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.7117041759586763`*^9, 3.7136213039288406`*^9, 
  3.7136245219730787`*^9},ExpressionUUID->"2bd1519d-c6a6-4313-984c-\
01384cabd118"]
}, Open  ]],

Cell["\<\
No matter how many times we ask for the value of x by executing it with our \
usual SHIFT + ENTER, we get the value that was generated the very first time.\
\>", "Text",
 CellChangeTimes->{{3.711704180374216*^9, 3.7117042326088543`*^9}, {
  3.7117042834077425`*^9, 
  3.71170429401212*^9}},ExpressionUUID->"dd4d693d-6a73-484c-b0f4-\
41e81a05e553"],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.711704297553813*^9},ExpressionUUID->"b15177ba-0737-444f-a772-\
30ba7a05e34d"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.711704298569442*^9, 3.7136213039913483`*^9, 
  3.7136245220199594`*^9},ExpressionUUID->"106db6b0-e1c7-41e9-97bb-\
3c4383d47820"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.711704300169473*^9},ExpressionUUID->"1a195af1-f427-4545-ba0e-\
b70ee510e36c"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.7117043010409393`*^9, 3.7136213040382185`*^9, 
  3.713624522083187*^9},ExpressionUUID->"698186d0-11e1-426c-8332-\
b3e64e1214c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{{3.711704303012617*^9, 
  3.7117043061376023`*^9}},ExpressionUUID->"b85676e1-e56c-437f-9c89-\
fdd97dd719c0"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.711704307069619*^9, 3.713621304085092*^9, 
  3.713624522211441*^9},ExpressionUUID->"82a61a1c-c641-414a-8963-\
07a6b01229dd"]
}, Open  ]],

Cell["\<\
In the second case when we first did a delayed assignment of y to a \
RandomInteger, we essentially put the computation of RandomInteger on hold. \
The delayed assignment essentially says do not compute until I explicitly \
request. So whenever we request a value for y we get a new value because we \
are re-evaluating RandomInteger each time.\
\>", "Text",
 CellChangeTimes->{{3.7117043123314886`*^9, 
  3.7117044412576866`*^9}},ExpressionUUID->"99535d2d-dd23-480c-a9b4-\
70da2323d0cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isEven", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"n", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "True", ",", 
    "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.711704482412839*^9, 3.7117045112884016`*^9}, {
  3.711704742693039*^9, 
  3.7117047506661577`*^9}},ExpressionUUID->"7b18fdde-5b61-432c-84da-\
82f46902f5d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.711704528377954*^9, 
  3.7117045315201645`*^9}},ExpressionUUID->"ff25dafa-3817-497a-ac75-\
90160e9f899c"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7117045326974745`*^9, 3.7136213041632175`*^9, 
  3.7136245222894926`*^9},ExpressionUUID->"4be76122-0f01-443b-aeca-\
e15aee1e414b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.7117045346479826`*^9, 
  3.7117045372458415`*^9}},ExpressionUUID->"f5ed6d15-31ae-4b00-921c-\
34519674bf41"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.7117045382988863`*^9, 3.713621304210092*^9, 
  3.7136245223364415`*^9},ExpressionUUID->"99afe649-b7a1-4664-bf33-\
fe5c53f60d96"]
}, Open  ]],

Cell["\<\
We define a function named isEven which receives a number and checks if its \
even, and returns True or False depending. The parameter named n is assigned \
whatever we pass into this function when we call it, which is further passed \
to the body of the function where further computation takes place, in this \
case a single If function.
Why do we put a single _ after the n? The underscore is called a pattern \
expression in WL. A pattern is an expression which matches another \
expression. In this case we are saying we want to match any single expression \
available in WL. the n is just a name for this pattern which we use to \
remember the pattern inside the body of the function expression.\
\>", "Text",
 CellChangeTimes->{{3.7117046063382015`*^9, 3.7117046230299273`*^9}, {
  3.711704653162109*^9, 3.7117048189798965`*^9}, {3.711706061927354*^9, 
  3.7117062581027355`*^9}},ExpressionUUID->"4365fbe4-7d16-48bf-bcd5-\
d751a139bcb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isOdd", "[", "number_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"number", ",", "2"}], "]"}], "\[Equal]", "0"}], "]"}], ",", 
    " ", "True", ",", " ", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7117062697981033`*^9, 
  3.7117063428785653`*^9}},ExpressionUUID->"41d4c7d3-42eb-4960-a650-\
d2b59d3eeded"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isOdd", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.711706352650928*^9, 
  3.7117063558621373`*^9}},ExpressionUUID->"21d77b46-58b9-4d81-80a4-\
4cf6a89bf8c5"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.7117063568974795`*^9, 3.7136213042882433`*^9, 
  3.7136245224145703`*^9},ExpressionUUID->"7ab94e57-3165-46f2-b2dd-\
27c7b547dc80"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isOdd", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.7117063592450204`*^9, 
  3.7117063640502377`*^9}},ExpressionUUID->"a8024081-98f8-46ff-92a2-\
44f999840e0e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.711706365417697*^9, 3.7136213043350945`*^9, 
  3.713624522461444*^9},ExpressionUUID->"28063e76-a399-4250-b090-\
421956e7372f"]
}, Open  ]],

Cell["\<\
As we can see we are not limited to single letters like n for our parameter \
names, we can name our parameters with names like number_ to give the user of \
the function an idea of the parameter type.\
\>", "Text",
 CellChangeTimes->{{3.7117063770156326`*^9, 3.711706417063799*^9}, {
  3.711706517939158*^9, 
  3.711706606748166*^9}},ExpressionUUID->"bcfac329-0930-42d4-8c0a-\
b84941db1daa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.7117066150321083`*^9, 
  3.71170661923053*^9}},ExpressionUUID->"f1818e01-e044-4a2f-aede-\
e7a4b0d757cd"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{"t", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "True", ",", 
   "False"}], "]"}]], "Output",
 CellChangeTimes->{3.7117066206773434`*^9, 3.7136213043819733`*^9, 
  3.713624522523939*^9},ExpressionUUID->"5b2cd141-018d-4176-a891-\
a17b5c964744"]
}, Open  ]],

Cell["\<\
We see that is used the symbol t inside the function and since I did not \
define the function to handle arbitrary symbols, the call fails and returns \
the body of the function. A nice way to tell the user about what kind of \
arguments a function takes is to include the head type of the parameter after \
the underscore\
\>", "Text",
 CellChangeTimes->{{3.7117066326764574`*^9, 3.7117066924300165`*^9}, {
  3.711707033553089*^9, 3.7117070566370687`*^9}, {3.7117071343537726`*^9, 
  3.711707206026792*^9}},ExpressionUUID->"3fcd43b3-0845-4ae6-892a-\
d1b4a6fda166"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isOdd", "[", "number_Integer", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"number", ",", "2"}], "]"}], "\[Equal]", "0"}], "]"}], ",", 
    " ", "True", ",", " ", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7117070618725586`*^9, 
  3.7117070857800903`*^9}},ExpressionUUID->"a1f99efe-ebdb-4716-a014-\
fe8f92f07f66"],

Cell["We can also put conditions on the arguments to functions", "Text",
 CellChangeTimes->{{3.7124705344605646`*^9, 
  3.7124705630539217`*^9}},ExpressionUUID->"41062c3d-1f6d-497e-baab-\
00d524022ecb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial1", "[", 
   RowBox[{"n_", "/;", 
    RowBox[{"n", ">", "0"}]}], "]"}], ":=", 
  RowBox[{"n", "!"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "the", " ", "factorial", " ", "of", " ", "only", " ", 
    "positive", " ", "integers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712470566877946*^9, 
  3.7124706189194326`*^9}},ExpressionUUID->"735f6d19-b9a1-4cf5-b822-\
5240d8e2ee59"],

Cell["\<\
The condition the n must be greater than 0 is given after the slash-colon /; \
\>", "Text",
 CellChangeTimes->{{3.7124706681218834`*^9, 
  3.7124707068529387`*^9}},ExpressionUUID->"08f855f1-a947-4b50-ad5a-\
c59ca6e61e51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factorial1", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.712470622150983*^9, 
  3.7124706276372757`*^9}},ExpressionUUID->"cbf452a3-62ca-4e3b-9fb8-\
2d965a13b0f0"],

Cell[BoxData["720"], "Output",
 CellChangeTimes->{3.7124706289533067`*^9, 3.7136213045829787`*^9, 
  3.71362452261769*^9},ExpressionUUID->"efe4df83-e2f5-4af1-a917-66f319c52e77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial1", "[", 
   RowBox[{"-", "5"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"doesn", "'"}], "t", " ", "work", " ", "for", " ", "negative", 
    " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712470631855814*^9, 
  3.7124706622423573`*^9}},ExpressionUUID->"55b0f276-5f77-4e9c-85ec-\
0fbd5a9562aa"],

Cell[BoxData[
 RowBox[{"factorial1", "[", 
  RowBox[{"-", "5"}], "]"}]], "Output",
 CellChangeTimes->{3.712470639111128*^9, 3.7136213046142874`*^9, 
  3.713624522664568*^9},ExpressionUUID->"2859d7a2-64b5-42e4-828d-\
4e25beddcc62"]
}, Open  ]],

Cell["We can still define functions with default values", "Text",
 CellChangeTimes->{{3.7124730798097377`*^9, 3.712473091075449*^9}, {
  3.712473139784396*^9, 
  3.7124731570471067`*^9}},ExpressionUUID->"72f889b9-0ba7-40e9-a439-\
c2d348d85fe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fibonacci", "[", "0", "]"}], " ", "=", " ", "0"}], ";", " ", 
  RowBox[{
   RowBox[{"fibonacci", "[", "1", "]"}], "=", "1"}], ";", " ", 
  RowBox[{
   RowBox[{"fibonacci", "[", 
    RowBox[{"n_:", "8"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"fibonacci", "[", "n", "]"}], "=", 
    RowBox[{
     RowBox[{"fibonacci", "[", 
      RowBox[{"n", "-", "1"}], "]"}], "+", 
     RowBox[{"fibonacci", "[", 
      RowBox[{"n", "-", "2"}], "]"}], " "}]}]}]}]], "Input",
 CellChangeTimes->{{3.712473191737424*^9, 3.712473314078923*^9}, {
  3.71247335578425*^9, 3.7124733713482695`*^9}, {3.712473931147464*^9, 
  3.7124739356435843`*^9}, {3.712474028764411*^9, 
  3.7124740301441584`*^9}},ExpressionUUID->"aeefbbda-9e22-4f8b-b398-\
b46b1ed127a6"],

Cell["\<\
We can call this function without providing arguments, not that it is \
necessary I just wanted a demonstration of this facility.\
\>", "Text",
 CellChangeTimes->{{3.712473382615078*^9, 3.71247342964342*^9}, {
  3.7124734614759827`*^9, 3.7124734657030334`*^9}, {3.712473563249838*^9, 
  3.712473584966172*^9}, {3.712473673940612*^9, 
  3.712473693560487*^9}},ExpressionUUID->"49fe866a-21c8-457d-863a-\
df029dba0f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fibonacci", "[", "]"}]], "Input",
 CellChangeTimes->{{3.712473695013629*^9, 
  3.7124736984008617`*^9}},ExpressionUUID->"7cf80978-4b22-4165-a6eb-\
6527f90ea754"],

Cell[BoxData["21"], "Output",
 CellChangeTimes->{3.712473699572132*^9, 3.7124739454001007`*^9, 
  3.712474037721351*^9, 3.712474070983218*^9, 3.713621304692415*^9, 
  3.7136245227426963`*^9},ExpressionUUID->"9bb342ce-4e58-4d6e-843e-\
d604aaf7882a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fibonacci", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7124737053082085`*^9, 
  3.7124737130709724`*^9}},ExpressionUUID->"04374b9d-2a00-409e-81a2-\
ec0d79bded11"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.7124737140161285`*^9, 3.71247394907539*^9, 
  3.7124740784778223`*^9, 3.7136213047563267`*^9, 
  3.7136245228051972`*^9},ExpressionUUID->"0dfb3788-c6dc-4968-a12f-\
07fd3aa0fe04"]
}, Open  ]],

Cell["\<\
But as usual there is a better way to do this things with built-in functions, \
always use the  documentation to check for a solution to what you want to do, \
you might just find it. It is a convention to use lowercase letters for \
function names that we define ourselves\
\>", "Text",
 CellChangeTimes->{{3.7124737248979883`*^9, 
  3.712473893889742*^9}},ExpressionUUID->"275a08de-f7e6-4a86-8b57-\
d050af40eb13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fibonacci", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7124738954204135`*^9, 
  3.7124739002322288`*^9}},ExpressionUUID->"ad13f4b2-7e99-431b-8ac3-\
ad1869d81287"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.71247390127133*^9, 3.713621304807756*^9, 
  3.7136245228520727`*^9},ExpressionUUID->"7d6506f1-a8f9-4649-aa3a-\
177d1dd64d4c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads!", "Chapter",
 CellChangeTimes->{{3.7117072252004156`*^9, 
  3.7117072301916656`*^9}},ExpressionUUID->"74584ab2-0b3a-4602-a241-\
9f089ab1e074"],

Cell["\<\
Expression in the Wolfram Language has a head and we can get the name of the \
head of an expression using Head.\
\>", "Text",
 CellChangeTimes->{{3.711707236917944*^9, 
  3.711707283408104*^9}},ExpressionUUID->"1f54280f-60af-4782-a0e6-\
7ce41bd1d0af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "x", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "remember", " ", "the", " ", "variable", " ", "x", " ", "we", " ", 
    "defined", " ", "sometime", " ", "ago"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711707285079559*^9, 
  3.7117073138411794`*^9}},ExpressionUUID->"57e00963-6324-49a4-82a5-\
b7912a91d244"],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{3.711707288425299*^9, 3.7136213048546286`*^9, 
  3.7136245228988686`*^9},ExpressionUUID->"a090c919-b98a-4f8d-ba3a-\
a5adff2d12be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "t", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "has", " ", "not", " ", "been", " ", "assigned", " ", "anything", " ", 
    "yet", " ", "and", " ", "so", " ", "its", " ", "just", " ", "a", " ", 
    "symbol"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117073179646006`*^9, 
  3.7117073544245977`*^9}},ExpressionUUID->"b28658ec-431d-43aa-9ade-\
ee36e9003431"],

Cell[BoxData["Symbol"], "Output",
 CellChangeTimes->{3.7117073231305385`*^9, 3.7136213049015245`*^9, 
  3.713624522945744*^9},ExpressionUUID->"1210dbbd-aedf-4550-89e8-\
86e89dec3318"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{"{", "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "curly", " ", "brace", " ", "has", " ", "head", " ", "list"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711707360212712*^9, 
  3.711707394831873*^9}},ExpressionUUID->"d0e99d9e-5191-4879-bed9-\
85d7dac60315"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.711707399747347*^9, 3.7136213049483767`*^9, 
  3.7136245229926925`*^9},ExpressionUUID->"d0402adb-1f98-4778-be2b-\
09816c9b6b16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "\"\<Apples\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.711707602193471*^9, 
  3.7117076219815536`*^9}},ExpressionUUID->"0cca396c-5ac2-4a30-902d-\
4e5816fe1229"],

Cell[BoxData["String"], "Output",
 CellChangeTimes->{3.711707622762191*^9, 3.713621304995256*^9, 
  3.71362452303957*^9},ExpressionUUID->"399c402c-059c-4784-b20c-75a3833b9fee"]
}, Open  ]],

Cell["\<\
Internally the Wolfram Language converts the curly brace {} into something \
with head List. \
\>", "Text",
 CellChangeTimes->{{3.7117074154342833`*^9, 3.711707493580597*^9}, 
   3.711707707413841*^9},ExpressionUUID->"2d0e8492-7309-4345-b672-\
7050e7206d10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.711707527614491*^9, 
  3.7117075555741663`*^9}},ExpressionUUID->"61ebe47a-e8d4-47c4-a0f0-\
f42511b2d871"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.7117075572913065`*^9, 3.7136213050421247`*^9, 
  3.7136245230863733`*^9},ExpressionUUID->"7cfbce69-56ac-4cbd-aa1d-\
16017b51fe96"]
}, Open  ]],

Cell["\<\
Sometimes we want to define a local constant inside a function. \
\>", "Text",
 CellChangeTimes->{{3.7117078599668627`*^9, 3.7117078876450996`*^9}, {
  3.7117081330137577`*^9, 
  3.711708150164044*^9}},ExpressionUUID->"df883bad-44e2-4cd5-b3ed-\
1880166af6cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"byThousand", "[", "value_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"multiplier", " ", "=", " ", "1000"}], "}"}], ",", " ", 
    RowBox[{"value", " ", "*", " ", "multiplier"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.711707897382895*^9, 
  3.711707978122472*^9}},ExpressionUUID->"5fe3fd59-85c0-42cf-95d6-\
0d7cb472771e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"byThousand", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.711707985138764*^9, 
  3.711707987832136*^9}},ExpressionUUID->"5ec805cc-efe2-4e24-946e-\
12263d569a2b"],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{3.711707988686403*^9, 3.713621305120282*^9, 
  3.7136245232583237`*^9},ExpressionUUID->"67b324c5-bdec-463d-889a-\
07db127232f1"]
}, Open  ]],

Cell["\<\
Note that With is just another built-in function and can be used on its own \
without being wrapped inside a function.\
\>", "Text",
 CellChangeTimes->{{3.711708180928665*^9, 
  3.7117082199128437`*^9}},ExpressionUUID->"c6f1ee27-8df5-4603-a5b4-\
f03791c66c33"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gcd", "[", 
   RowBox[{"m0_", ",", "n0_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m", "=", "m0"}], ",", 
      RowBox[{"n", "=", "n0"}]}], "}"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{
     "We", " ", "capture", " ", "the", " ", "arguments", " ", "and", " ", 
      "assign", " ", "them", " ", "to", " ", "variables", " ", "m", " ", 
      "and", " ", "n"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"n", "\[NotEqual]", "0"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"m", ",", "n"}], "}"}], "=", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{"Mod", "[", 
           RowBox[{"m", ",", "n"}], "]"}]}], "}"}]}]}], "]"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "In", " ", "this", " ", "line", " ", "we", " ", "do", " ", "multiple", 
       " ", "simultaneous", " ", "assignment"}], " ", "*)"}], 
     "\[IndentingNewLine]", "m"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7117083786023035`*^9, 3.711708380431182*^9}, {
  3.711800398514716*^9, 3.7118004472016068`*^9}, {3.7118005863960743`*^9, 
  3.711800619438553*^9}},ExpressionUUID->"a9b02cdf-6315-47f9-a38d-\
8fd9671d3d52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gcd", "[", 
  RowBox[{"18", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.7117083832614703`*^9, 
  3.711708389099694*^9}},ExpressionUUID->"4bf79cb0-077d-4e28-8bf9-\
5a569d0b4eba"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.711708389905264*^9, 3.7136213051983795`*^9, 
  3.713624523320815*^9},ExpressionUUID->"97c159e4-8014-445f-9863-\
61761257c046"]
}, Open  ]],

Cell["\<\
In this case we use Module to define local variables inside a function gcd \
function, gcd stands for greatest common divisor. We did not use With because \
during the computation we change the values of m and n, that is why we need a \
variable rather than a constant. As you gain more experience with WL you will \
know when its appropriate to use With or Module.\
\>", "Text",
 CellChangeTimes->{{3.7117083954177403`*^9, 3.711708561452038*^9}, {
   3.7117994804407873`*^9, 3.7117994975864964`*^9}, 3.71179953771663*^9, 
   3.711799601911755*^9},ExpressionUUID->"506f568d-ea8a-45b3-baa7-\
b9133b1440cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pure functions", "Chapter",
 CellChangeTimes->{{3.71179954295935*^9, 
  3.7117995472322655`*^9}},ExpressionUUID->"53090ffc-4a41-4a7a-8dff-\
9c8bb5d3fc0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"#", "+", "2"}], "&"}]], "Input",
 CellChangeTimes->{{3.711799606583487*^9, 
  3.7117996310393944`*^9}},ExpressionUUID->"85594803-3edd-4f15-8e32-\
d6cccecdc2f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"#1", "+", "2"}], "&"}]], "Output",
 CellChangeTimes->{{3.711799622679415*^9, 3.711799631977984*^9}, 
   3.713621305260871*^9, 
   3.713624523367693*^9},ExpressionUUID->"f401da39-1e7d-4835-b296-\
94f592918164"]
}, Open  ]],

Cell["\<\
Above is the definition of a simple pure function. Pure functions are \
sometimes called anonymous functions because we do not need a name when we \
are defining them. The # is called a slot variable, this is the variable that \
will be latter assigned a value when we call the function. the & indicates \
the end of the function. When we evaluate a pure function all that happens is \
that it just returns the entire definition on the output line with the slot \
variable being given a number. \
\>", "Text",
 CellChangeTimes->{{3.7117996387626505`*^9, 
  3.71179985922754*^9}},ExpressionUUID->"4a333716-4fd5-468e-9302-\
2f6315f46164"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"#1", " ", "+", " ", "#2"}], ")"}], "/", "10"}], "&"}]], "Input",
 CellChangeTimes->{{3.7117998640753813`*^9, 3.71179987916284*^9}, {
  3.711800162642518*^9, 
  3.7118002442262316`*^9}},ExpressionUUID->"3b17a43a-a231-4aff-8537-\
d46a94d787ff"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"#1", "+", "#2"}], "10"], "&"}]], "Output",
 CellChangeTimes->{
  3.7117998839079113`*^9, 3.7118001667883277`*^9, {3.71180020035133*^9, 
   3.711800245708099*^9}, 3.7136213053077545`*^9, 
   3.713624523430163*^9},ExpressionUUID->"f68283d8-0c35-4145-864c-\
e39c5171bf0d"]
}, Open  ]],

Cell["\<\
We can also have multiple arguments or parameters to a pure function, each \
parameter being replaced by the appropriate slot number.\
\>", "Text",
 CellChangeTimes->{{3.711799888697095*^9, 3.711799950433712*^9}, 
   3.711800016129178*^9},ExpressionUUID->"1a71b002-45a7-4134-a591-\
009b26660366"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calling functions", "Chapter",
 CellChangeTimes->{{3.711800646393447*^9, 
  3.7118006747918034`*^9}},ExpressionUUID->"3263a6bb-008a-4e28-b991-\
2061b0dab59f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", " ", "+", " ", "2"}], "&"}], "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Supply", " ", "a", " ", "single", " ", "argument", " ", "to", " ", "a", 
    " ", "pure", " ", "function"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711800680771531*^9, 3.711800692612086*^9}, {
  3.711800737778103*^9, 
  3.711800779680562*^9}},ExpressionUUID->"485cfd84-1db1-4945-aec3-\
da01992615fd"],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.711800695020691*^9, 3.7136213053546257`*^9, 
  3.713624523477064*^9},ExpressionUUID->"540793b3-01cf-4a53-9c66-\
db93bf5499be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#1", " ", "*", " ", "#2"}], ")"}], "/", "#3"}], "&"}], "[", 
   RowBox[{"2", ",", "3", ",", "5"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Multiple", " ", "arguments"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118006971560626`*^9, 3.7118007275657983`*^9}, {
  3.711800828832494*^9, 
  3.71180083658574*^9}},ExpressionUUID->"bf80e959-3b34-47b5-bb0c-\
a79e4e80555f"],

Cell[BoxData[
 FractionBox["6", "5"]], "Output",
 CellChangeTimes->{3.711800728589616*^9, 3.713621305401497*^9, 
  3.7136245235239406`*^9},ExpressionUUID->"0fbc1526-415f-49b8-a8f1-\
3a324e3fb955"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", " ", "*", " ", "#2"}], ")"}], "/", "#3"}], "&"}], "[", 
    RowBox[{"2", ",", "3", ",", "5"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Call", " ", "N", " ", "the", " ", "regular", " ", "way"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118006971560626`*^9, 3.7118007275657983`*^9}, {
  3.711800785990796*^9, 
  3.711800853513425*^9}},ExpressionUUID->"01154ee3-a7d7-49f3-a216-\
b19df811e4f1"],

Cell[BoxData["1.2`"], "Output",
 CellChangeTimes->{{3.7118007945438185`*^9, 3.7118008213988347`*^9}, 
   3.7136213054483767`*^9, 
   3.7136245235708127`*^9},ExpressionUUID->"afd66d99-602d-4d6a-94d6-\
3cc303e23c8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"32234", " ", "/", " ", "45"}], "//", "N", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Double", " ", "forward", " ", "slash", " ", "calls", " ", "a", " ", 
    "function", " ", "as", " ", "an", " ", "afterthought"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71180086304105*^9, 
  3.711800914366066*^9}},ExpressionUUID->"5afaf0e2-2fae-4724-a71c-\
c5527bdead29"],

Cell[BoxData["716.3111111111111`"], "Output",
 CellChangeTimes->{3.7118008756702633`*^9, 3.7136213055733795`*^9, 
  3.713624523617697*^9},ExpressionUUID->"9ae9a3d5-8023-4c99-803c-\
88366ae378ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", "7", "]"}]], "Input",
 CellChangeTimes->{{3.711800921518545*^9, 
  3.7118009330094357`*^9}},ExpressionUUID->"70b83350-6307-4838-b5f7-\
a400ee4ff75e"],

Cell[BoxData[
 SqrtBox["7"]], "Output",
 CellChangeTimes->{{3.7118009279208956`*^9, 3.711800935992555*^9}, 
   3.713621305620247*^9, 
   3.713624523664571*^9},ExpressionUUID->"a5ce720f-225f-4ef0-be18-\
f0e4ef4107b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Sqrt", "[", "7", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "way", " ", "to", " ", "call", " ", "the", " ", "N", " ", 
    "funtion"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118009418145347`*^9, 
  3.711801005006417*^9}},ExpressionUUID->"289ae783-a788-4e1a-8c1d-\
c0826d70bb07"],

Cell[BoxData["2.6457513110645907`"], "Output",
 CellChangeTimes->{3.711800963214501*^9, 3.7118010070426073`*^9, 
  3.7136213056827517`*^9, 
  3.713624523711447*^9},ExpressionUUID->"c3f9dc67-6997-495c-8198-\
946253cb7f80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Recursion", "Chapter",
 CellChangeTimes->{{3.711899615846634*^9, 
  3.7118996175027475`*^9}},ExpressionUUID->"4d6de9db-b5e6-463d-823f-\
e0369d740068"],

Cell["\<\
It is a programming technique where a function calls itself. There are \
certain things to keep in mind when designing a recursive solution to a \
problem in programming. 
1. You must have 1 or more base cases so as to prevent infinite recursion.
2. Reduce the problem to simpler versions of the same problem.\
\>", "Text",
 CellChangeTimes->{{3.7118996417511296`*^9, 3.7118997204242773`*^9}, {
  3.711899763704565*^9, 
  3.7118997973582096`*^9}},ExpressionUUID->"04370413-2122-4d12-ae24-\
378a2d30215e"],

Cell["Recursive multiplication example", "Text",
 CellChangeTimes->{{3.711899892886423*^9, 
  3.711899899443983*^9}},ExpressionUUID->"d1bab50e-f4e9-4171-bfd2-\
08dc62b57ee9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"multiply", "[", 
     RowBox[{"a_", ",", "1"}], "]"}], ":=", "a"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Base", " ", "case"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", " ", 
  RowBox[{"a", "+", 
   RowBox[{"mult", "[", 
    RowBox[{"a", ",", 
     RowBox[{"b", "-", "1"}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.711899845300109*^9, 
  3.711899881372652*^9}},ExpressionUUID->"e17a0d16-a7bc-4acc-9cb7-\
06f1571a3024"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"6", ",", "1"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "base", " ", "case"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118999069076333`*^9, 
  3.7118999259367943`*^9}},ExpressionUUID->"ba537d6e-899a-43e2-af09-\
24bc151edf82"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.71189992692117*^9, 3.7136213057608795`*^9, 
  3.713624523795766*^9},ExpressionUUID->"358b1080-4dac-4ad5-ad32-\
7695c1d941a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"9", ",", "7"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "main", " ", "recursion"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711899928874231*^9, 
  3.7118999487465296`*^9}},ExpressionUUID->"7c5376d2-1db7-4774-8b64-\
2c9bc0f77d1e"],

Cell[BoxData[
 RowBox[{"9", "+", 
  RowBox[{"mult", "[", 
   RowBox[{"9", ",", "6"}], "]"}]}]], "Output",
 CellChangeTimes->{3.7118999496740055`*^9, 3.7136213058077583`*^9, 
  3.7136245238426433`*^9},ExpressionUUID->"d2ed4d9f-70e6-44ae-aa4c-\
0d52ba6c3583"]
}, Open  ]],

Cell["\<\
There is a much faster way to multiply in WL using the built-in Times \
function, the above program is only to show the concept of recursion\
\>", "Text",
 CellChangeTimes->{{3.7119000696457233`*^9, 
  3.7119001298059425`*^9}},ExpressionUUID->"ed4aee34-6519-436a-83fc-\
71fb05a6e534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Times", "[", 
  RowBox[{"9", ",", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.711900107929778*^9, 
  3.711900113896727*^9}},ExpressionUUID->"d5aaaad5-5fce-49bd-8a83-\
c1357ad73c48"],

Cell[BoxData["63"], "Output",
 CellChangeTimes->{3.71190011461547*^9, 3.7136213058546305`*^9, 
  3.7136245238894386`*^9},ExpressionUUID->"9662e33e-43e8-4a6d-964b-\
090449dcc32d"]
}, Open  ]],

Cell["\<\
Find the FACTORIAL recursively. The definition of n! = n *(n-1) * (n-2) * \
(n-3) * ... * 1\
\>", "Text",
 CellChangeTimes->{{3.7118999888023624`*^9, 3.7119000637076683`*^9}, {
  3.711900161999115*^9, 
  3.711900166552828*^9}},ExpressionUUID->"266d3831-40fa-4e60-954d-\
2034d0477cda"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"factorial", "[", "1", "]"}], " ", "=", " ", "1"}], " ", ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{"Base", " ", "case"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"factorial", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"factorial", "[", "n", "]"}], "=", 
   RowBox[{"n", " ", 
    RowBox[{"factorial", "[", 
     RowBox[{"n", "-", "1"}], "]"}], " ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Recursive", " ", "solution", " ", "with", " ", 
       RowBox[{"factorial", "[", "n", "]"}], " ", "spliced", " ", "in", " ", 
       "to", " ", "speed", " ", "up", " ", "computation"}], ",", " ", 
      RowBox[{
      "its", " ", "a", " ", "technique", " ", "called", " ", 
       "memoization"}]}], " ", "*)"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.7119001729541807`*^9, 
  3.711900337600848*^9}},ExpressionUUID->"d3fd54be-eadc-4c6d-8396-\
08d95cccc660"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factorial", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.711900343362749*^9, 
  3.711900356306579*^9}},ExpressionUUID->"27443589-c8d3-4f69-88da-\
f21a2c984236"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{{3.711900349979351*^9, 3.7119003577616787`*^9}, 
   3.7136213059327493`*^9, 
   3.713624523967564*^9},ExpressionUUID->"e636f38e-b972-47f7-bd88-\
77177cb26e7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"10", "!"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Using", " ", "the", " ", "more", " ", "optimal", " ", "built"}], 
    "-", "in"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711900362548913*^9, 
  3.711900381558176*^9}},ExpressionUUID->"726fdce1-d06e-48e9-8efb-\
09f051c1d3d4"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.711900383183196*^9, 3.7136213059796314`*^9, 
  3.713624524014513*^9},ExpressionUUID->"89af9a22-c439-42fa-9988-\
23d5340029aa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pairing things", "Chapter",
 CellChangeTimes->{{3.712292199553811*^9, 
  3.7122922445065713`*^9}},ExpressionUUID->"d7b0ce69-994e-4dff-a187-\
ed84879cbf05"],

Cell["\<\
If we are given lists of items that are related in some way like a list of \
student names and associated scores:\
\>", "Text",
 CellChangeTimes->{{3.7122922502714386`*^9, 3.712292322376396*^9}, 
   3.7122924211460967`*^9},ExpressionUUID->"1cd37c6a-a593-4aca-8642-\
19194221affa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"names", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Vestal\>\"", ",", "\"\<Denis\>\"", ",", "\"\<William\>\"", ",", 
     "\"\<Joe\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scores", " ", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A+\>\"", ",", "\"\<B\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\""}], 
    "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.712292324917313*^9, 
  3.712292414739787*^9}},ExpressionUUID->"055b099c-6f13-4448-a13d-\
2f5dee5f0307"],

Cell["\<\
With each name in the names List associated with a corresponding score in the \
scores list. For example \
\[OpenCurlyDoubleQuote]Vestal\[CloseCurlyDoubleQuote] had an \
\[OpenCurlyDoubleQuote]A+\[OpenCurlyDoubleQuote], because the name and the \
score are in the same position in both lists.
One way of pairing these lists is by Transposing them:\
\>", "Text",
 CellChangeTimes->{{3.712292430017031*^9, 
  3.712292583564929*^9}},ExpressionUUID->"cf34feff-de8b-47b4-8d97-\
0a2d9afd60ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{"names", ",", "scores"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 
  3.712292619948574*^9}},ExpressionUUID->"7cb151f3-6709-4017-a55f-\
cf66538587e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Vestal\"\>", ",", "\<\"A+\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Denis\"\>", ",", "\<\"B\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"William\"\>", ",", "\<\"B\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Joe\"\>", ",", "\<\"C\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7122925951704674`*^9, 3.712292621297919*^9}, 
   3.7136213060577755`*^9, 
   3.7136245240926037`*^9},ExpressionUUID->"7f737b67-1299-41ae-90c4-\
c52072123b0c"]
}, Open  ]],

Cell["\<\
We can query this mini data structure using the usual indexing operations\
\>", "Text",
 CellChangeTimes->{{3.712292649784049*^9, 
  3.7122926661601267`*^9}},ExpressionUUID->"c7ea44f5-6ab6-4f66-a453-\
901eef5dd713"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"names", ",", "scores"}], "}"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "value", " ", "for", " ", "Denis"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 3.712292619948574*^9}, {
  3.7122926801981144`*^9, 
  3.712292720097783*^9}},ExpressionUUID->"856aa528-e8cb-42b7-866a-\
343bc3bef0f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Denis\"\>", ",", "\<\"B\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7122927057049007`*^9, 3.7136213061046286`*^9, 
  3.713624524155135*^9},ExpressionUUID->"a108ba93-b094-4f79-9f45-\
7300b2423ac6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"names", ",", "scores"}], "}"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"4", ",", "2"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", 
    RowBox[{"Joe", "'"}], "s", " ", "Score"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 3.712292619948574*^9}, {
  3.7122926801981144`*^9, 
  3.712292756781005*^9}},ExpressionUUID->"550263a0-4fd8-4357-9f54-\
c0188c8dce24"],

Cell[BoxData["\<\"C\"\>"], "Output",
 CellChangeTimes->{3.7122927410320435`*^9, 3.7136213061514997`*^9, 
  3.713624524280139*^9},ExpressionUUID->"7725db20-df73-4b62-9eb4-\
b1d88c2ceaef"]
}, Open  ]],

Cell["\<\
There is a better way to handle these kinds of key -> value pairs in WL, its \
called associations.\
\>", "Text",
 CellChangeTimes->{{3.7122927603481474`*^9, 
  3.712292799809573*^9}},ExpressionUUID->"adb6266e-bd93-4ff8-9729-\
4b2dad22a524"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grades", " ", "=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Vestal\>\"", "\[Rule]", "\"\<A+\>\""}], ",", 
    RowBox[{"\"\<Denis\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
    RowBox[{"\"\<William\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
    RowBox[{"\"\<Joe\>\"", "\[Rule]", "\"\<C\>\""}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.712292994570183*^9, 
  3.7122930788087425`*^9}},ExpressionUUID->"6084c523-ddbf-4fcf-bded-\
615f276de2ff"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"William\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.712293082989256*^9, 3.7136213061983786`*^9, 
  3.7136245243304253`*^9},ExpressionUUID->"ce88e174-3224-4c6f-befe-\
d43d23f91013"]
}, Open  ]],

Cell["\<\
We type a \[OpenCurlyDoubleQuote]less than\[CloseCurlyDoubleQuote] < followed \
by a vertical bar | to start the association. We separate the key value pairs \
with a  dash - followed by a greater than > on the keyboard. This is how we \
create the rule notation -> which we will be see a lot later. The names are \
they Keys while the scores are the Values.\
\>", "Text",
 CellChangeTimes->{{3.7122930930306187`*^9, 
  3.712293247387491*^9}},ExpressionUUID->"f1343662-7f04-4674-bbef-\
a20a5c6db8f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Vestal\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", 
    RowBox[{"Vestal", "'"}], "s", " ", "grade"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293361963917*^9, 
  3.7122933882644253`*^9}},ExpressionUUID->"ea89f89d-ccbd-4cd0-be12-\
002c7d9500ee"],

Cell[BoxData["\<\"A+\"\>"], "Output",
 CellChangeTimes->{3.7122933696216106`*^9, 3.7136213062452497`*^9, 
  3.713624524367009*^9},ExpressionUUID->"380142da-5b54-4d86-ba76-\
a55c8469104a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Felix\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "If", " ", "we", " ", "try", " ", "to", " ", "get", " ", "a", " ", 
    "missing", " ", "key", " ", "we", " ", "get", " ", "a", " ", 
    RowBox[{"Missing", "[", "]"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122933908341675`*^9, 
  3.7122934321175823`*^9}},ExpressionUUID->"323ea79e-9e1d-4b97-8a4f-\
8737cf098d3a"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"KeyAbsent\"\>", ",", "\<\"Felix\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.7122934000427675`*^9, 3.7122934333938684`*^9, 
  3.7136213065421324`*^9, 
  3.71362452449201*^9},ExpressionUUID->"8ea661d5-72dc-4b53-a4ed-b0894b1b472f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Felix\>\"", "]"}], " ", "=", " ", "\"\<A\>\"", 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "a", " ", "grade", " ", "for", " ", "Felix"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293467855733*^9, 
  3.712293507699806*^9}},ExpressionUUID->"863f9c49-60ff-4d42-923a-\
1280caa069f7"],

Cell[BoxData["\<\"A\"\>"], "Output",
 CellChangeTimes->{3.7122934835676303`*^9, 3.7136213067085037`*^9, 
  3.713624524538886*^9},ExpressionUUID->"8a2c3efc-cc31-4154-96ad-\
61d567ad69c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["grades"], "Input",
 CellChangeTimes->{{3.7122934852837887`*^9, 
  3.71229348616733*^9}},ExpressionUUID->"dd3e728d-e420-472a-a560-\
4ffcbb24ccb8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"William\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"Felix\"\>", "\[Rule]", "\<\"A\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7122934876509886`*^9, 3.713621306755375*^9, 
  3.7136245245857573`*^9},ExpressionUUID->"baa2bc4e-894d-4cf2-8301-\
0bacad473f0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"KeyDrop", "[", 
   RowBox[{"grades", ",", "\"\<William\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Delete", " ", "a", " ", "key"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293693864764*^9, 
  3.7122937175286064`*^9}},ExpressionUUID->"ba5a2b84-06c0-4966-bd6c-\
0dad6159a985"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"Felix\"\>", "\[Rule]", "\<\"A\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.71229370824792*^9, 3.713621306802252*^9, 
  3.713624524632634*^9},ExpressionUUID->"8048a74f-32d8-4b32-8eae-\
5bf8730a3ad8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Keys", "[", "grades", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "Keys"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122993709977527`*^9, 
  3.712299392028577*^9}},ExpressionUUID->"6252db37-a50a-43a8-bd04-\
c2d8213d7289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Vestal\"\>", ",", "\<\"Denis\"\>", ",", "\<\"William\"\>", 
   ",", "\<\"Joe\"\>", ",", "\<\"Felix\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.712299377976013*^9, 3.713621306849105*^9, 
  3.713624524679507*^9},ExpressionUUID->"f4eb5922-c334-4e5f-b46c-\
1c9c2fd3f734"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Values", "[", "grades", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "Values"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122993957634916`*^9, 
  3.7122994104434958`*^9}},ExpressionUUID->"3446041e-99f4-478b-bd92-\
e54af59a9dfd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A+\"\>", ",", "\<\"B\"\>", ",", "\<\"B\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"A\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7122994112101235`*^9, 3.7136213068960013`*^9, 
  3.713624524726311*^9},ExpressionUUID->"6b26f1bd-ddb6-4a56-9847-\
b623cf095e7a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Searching for stuff", "Chapter",
 CellChangeTimes->{{3.712465879803797*^9, 
  3.712465883189028*^9}},ExpressionUUID->"109a9c98-fe69-4e87-ae5a-\
d1f8a2e7f336"],

Cell["\<\
In many other programming languages you might be required to implement your \
own search algorithms, but because WL has an enormous stack of extremely \
efficient algorithms for doing most things you will want to do there is no \
need to implement these algorithms yourself, you can free yourself to solve \
higher level computational problems rather than trying to optimize some \
algorithms for which far faster implementations have been done by experts. \
Like they say lets not re-invent the wheel. Many purist will argue that \
teaching these \[OpenCurlyDoubleQuote]fundamental\[CloseCurlyDoubleQuote] \
methods are important but in my view this misses the point of using a very \
high level knowledge based language like WL, there are more things in the \
life to bother about. If you are still interested in that kind of stuff you \
will also find implementing your version in WL very efficient.\
\>", "Text",
 CellChangeTimes->{{3.7124658946303062`*^9, 
  3.712466241168831*^9}},ExpressionUUID->"a28ebfd2-d05d-4266-ad5c-\
36e0ad348353"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "20", "]"}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 
  3.712466261508563*^9}},ExpressionUUID->"70f5a2b0-7e86-40be-bf4e-\
6c44b9a80fa6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.712466264242068*^9, 3.7136213069584713`*^9, 
  3.7136245247732553`*^9},ExpressionUUID->"a05369c2-846d-464b-8d84-\
0af096ef6c1f"]
}, Open  ]],

Cell["Let us select all the even items from this list", "Text",
 CellChangeTimes->{{3.712466267453743*^9, 
  3.712466282739826*^9}},ExpressionUUID->"6581a016-b8ff-43c4-bb19-\
bf05b02eafb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], ",", "EvenQ"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Select", " ", "items", " ", "from", " ", "a", " ", "list", " ", "for", 
     " ", "which", " ", "a", " ", "particular", " ", "function"}], ",", " ", 
    RowBox[{
    "in", " ", "this", " ", "case", " ", "EvenQ", " ", "returns", " ", 
     "true"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 
  3.712466343207712*^9}},ExpressionUUID->"0510f576-c994-4dc7-a7a4-\
73f4fa65c12e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.712466303417549*^9, 3.7136213070053473`*^9, 
  3.713624524820136*^9},ExpressionUUID->"0520ca6f-d1b6-44f3-8b1c-\
10d6adfcf1a7"]
}, Open  ]],

Cell["\<\
We can even build our own even function using a pure function\
\>", "Text",
 CellChangeTimes->{{3.712466347402652*^9, 
  3.7124663648720093`*^9}},ExpressionUUID->"e11c832a-3e48-4706-a21c-\
1b9138d32793"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"#", ",", "2"}], "]"}], "\[Equal]", "0"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Select", " ", "items", " ", "from", " ", "a", " ", "list", " ", "for", 
    " ", "which", " ", "a", " ", "particular", " ", "pure", " ", "function", 
    " ", "returns", " ", "true", " ", "#", " ", "here", " ", "represents", 
    " ", "each", " ", "element", " ", "from", " ", "the", " ", "list"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 3.712466343207712*^9}, {
  3.712466373888235*^9, 3.712466418744852*^9}, {3.712466458572919*^9, 
  3.7124664811038723`*^9}},ExpressionUUID->"b50dbaa7-e6bf-4510-bf15-\
6e487898daee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.7124664842895412`*^9, 3.713621307052247*^9, 
  3.71362452486701*^9},ExpressionUUID->"c657141a-f516-4ba0-90c3-7c327e6bed90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"someRandomInts", " ", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7124665672428136`*^9, 
  3.7124666175870037`*^9}},ExpressionUUID->"64538edf-fe36-4b64-8af2-\
2cbd5874080a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "5", ",", "10", ",", "4", ",", "1", ",", "6", ",", "8", 
   ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.7124666210090394`*^9, 3.713621307099101*^9, 
  3.7136245249138813`*^9},ExpressionUUID->"7dc95a5e-ad51-422c-ba52-\
2dff118b1b81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{"someRandomInts", ",", 
    RowBox[{
     RowBox[{"#", " ", ">", "3"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"all", " ", "greater", " ", "than", " ", "3"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124666234658422`*^9, 
  3.7124666773668933`*^9}},ExpressionUUID->"0f2f8bea-ab20-4544-afac-\
4a4eeb992320"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "10", ",", "4", ",", "6", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.712466649742626*^9, 3.7136213071459775`*^9, 
  3.7136245250076303`*^9},ExpressionUUID->"ecf03c19-fd56-41cc-95e1-\
a50e2fcde8ed"]
}, Open  ]],

Cell["You might see the operator form of select used sometimes", "Text",
 CellChangeTimes->{{3.712466729661992*^9, 
  3.7124667415357656`*^9}},ExpressionUUID->"7be3e930-054a-436d-a16c-\
1e53492b3aae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", "OddQ", "]"}], "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.712466745109606*^9, 
  3.712466789585578*^9}},ExpressionUUID->"f608295a-4896-490b-81c3-\
b35e1ec0ad21"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.7124667904462023`*^9, 3.713621307192871*^9, 
  3.713624525101387*^9},ExpressionUUID->"5e955d75-4f16-45f4-8455-\
ad2da1564ca7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "n", "]"}], ",", "even", ",", "odd"}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712467529719624*^9, 3.7124676072629023`*^9}, {
  3.7124676866979747`*^9, 
  3.7124676932455873`*^9}},ExpressionUUID->"dca34c9a-cf3d-43b1-8974-\
ebbab99c5d1d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "even"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7124675844988346`*^9, 3.712467610729541*^9}, {
   3.7124676961579685`*^9, 3.7124677185942535`*^9}, 3.713621307239747*^9, 
   3.7136245251922507`*^9},ExpressionUUID->"873e5b1d-5480-40cc-8d60-\
5ba1725e593b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"EvenQ", "[", "n", "]"}], ",", "even", ",", "odd"}], 
         "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{"#", ",", "odd"}], "]"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Use", " ", "MemberQ", " ", "to", " ", "Select", " ", "sublists", " ", 
    "that", " ", "contain", " ", "the", " ", "odd", " ", "symbol"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712467529719624*^9, 3.7124676072629023`*^9}, {
  3.712467640067882*^9, 3.712467677763357*^9}, {3.712467725555599*^9, 
  3.7124677908617907`*^9}},ExpressionUUID->"fc9d087a-d84c-4ea8-b0be-\
bfc08605b3e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "odd"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7124676791740913`*^9, 3.71246773499727*^9}, 
   3.713621307286621*^9, 
   3.713624525379751*^9},ExpressionUUID->"4b899891-149e-47ca-9fb8-\
7d8d8689b439"]
}, Open  ]],

Cell["\<\
One goal I have in this book is to gradually bring the user to understand \
greater levels of complexity within code, the kind you will meet in the real \
world. I am trying as much as possible to automatically generate most of the \
data you see because real world code will require that you hold certain data \
structures mentally and observe operations being done on them. WL is a very \
compact language enabling you to say so much with so little and generate a \
lot of what you want to deal with automatically, so it is imperative that you \
start understanding nested pieces of code.
So rather than create a list manually like {1,2,3,4,5}, I will do Range[5]\
\>", "Text",
 CellChangeTimes->{{3.7124678851502275`*^9, 
  3.7124681074595933`*^9}},ExpressionUUID->"03fc675a-3fe6-42cb-861c-\
2fb4bd21b0e7"],

Cell["More complex conditions", "Text",
 CellChangeTimes->{{3.712468189514041*^9, 
  3.7124681930850644`*^9}},ExpressionUUID->"5f4987f3-678e-42f6-b3bd-\
7fc79903f388"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"#", ",", "3"}], "]"}], " ", "\[Equal]", " ", "0"}], " ", "&&",
       " ", 
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"#", ",", " ", "5"}], "]"}], " ", "\[Equal]", "0"}]}], 
     "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Select", " ", "numbers", " ", "up", " ", "to", " ", "100", " ", "that", 
     " ", "are", " ", "divisible", " ", "by", " ", "both", " ", "3", " ", 
     "and", " ", "5.", " ", "The"}], " ", "&&", " ", 
    RowBox[{"is", " ", "a", " ", "logical", " ", "AND"}]}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124681994749746`*^9, 3.712468286857792*^9}, {
  3.7124686564302945`*^9, 
  3.712468673106914*^9}},ExpressionUUID->"70065843-7bcb-41d0-80ca-\
0b39ccda8fcf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"15", ",", "30", ",", "45", ",", "60", ",", "75", ",", "90"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7124682883350277`*^9, 3.7136213073334975`*^9, 
  3.713624525442252*^9},ExpressionUUID->"d4452f5b-bd08-4103-a5af-\
a8e58ca9e8b0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patterns", "Chapter",
 CellChangeTimes->{{3.712468445304388*^9, 3.7124684533280535`*^9}, {
  3.712468530301993*^9, 
  3.7124685427495594`*^9}},ExpressionUUID->"5b265e4d-8891-4298-84bb-\
4f7fc26d457d"],

Cell["\<\
We use patterns in WL to search for stuff and possibly apply some kind of \
transformation to them.\
\>", "Text",
 CellChangeTimes->{{3.7124685535197268`*^9, 3.71246862786994*^9}, {
  3.7124686818755827`*^9, 3.712468691730714*^9}, {3.7124687240391507`*^9, 
  3.7124687278381324`*^9}},ExpressionUUID->"dec093e4-342a-4740-a610-\
0610abd0830d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], "/.", 
  RowBox[{"num_", "\[Rule]", 
   SuperscriptBox["num", "2"], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "using", " ", "a", " ", "named", " ", "pattern", " ", "to", " ", "search",
      " ", "a", " ", "list", " ", "and", " ", "square", " ", "every", " ", 
     "single", " ", "item"}], " ", "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.712468763924532*^9, 
  3.7124689150982323`*^9}},ExpressionUUID->"a8f6ea7a-9dd2-4a98-9daf-\
1b026951929d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.712468853501315*^9, 3.713621307380376*^9, 
  3.713624525489127*^9},ExpressionUUID->"7d172f4c-b39b-493e-bbf9-\
09ffb95d94cc"]
}, Open  ]],

Cell["\<\
The main pattern here is the underscore _, it matches single anything. It is \
preceded by a name num so that we use num in the transformation on the other \
side of the Rule -> symbol.
double underscore __ matches 1 one or more things while triple underscore \
matches zero or more things, we will see these patterns used in programs we \
will encounter.\
\>", "Text",
 CellChangeTimes->{{3.712469203570334*^9, 3.712469226211088*^9}, {
  3.7124692762001624`*^9, 3.712469330936516*^9}, {3.7124700483282228`*^9, 
  3.712470150358751*^9}},ExpressionUUID->"b44e6676-a34f-4f40-9d33-\
51ba70716665"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"Range", "[", "3", "]"}], ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     SuperscriptBox["i", "n"], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    SuperscriptBox["j", "3"], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712469493226033*^9, 3.712469503271201*^9}, {
  3.7124713269638357`*^9, 3.712471436789711*^9}, {3.712471477172843*^9, 
  3.712471481112101*^9}},ExpressionUUID->"82b6015c-fcd9-43d7-b01c-\
2d5dc27a7a69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "i", ",", 
   SuperscriptBox["i", "2"], ",", 
   SuperscriptBox["i", "3"], ",", 
   SuperscriptBox["j", "3"]}], "}"}]], "Output",
 CellChangeTimes->{3.712471467735742*^9, 3.712471526025812*^9, 
  3.713621307427226*^9, 
  3.713624525536007*^9},ExpressionUUID->"bdcf7307-fc66-413e-8bf9-\
d8a24eddad8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Range", "[", "3", "]"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      SuperscriptBox["i", "n"], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     SuperscriptBox["j", "3"], "}"}]}], "]"}], "/.", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"i", "|", 
     RowBox[{"i", "^", "_"}]}], ")"}], " ", "\[Rule]", " ", "q", "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "This", " ", "rule", " ", "says", " ", "turn", " ", "any", " ", "i", " ", 
     "or", " ", "i", " ", "to", " ", "the", " ", "power", " ", "anything", 
     " ", "to", " ", "q"}], " ", "*)"}], " "}]}]], "Input",
 CellChangeTimes->{{3.712469493226033*^9, 3.712469503271201*^9}, {
  3.7124713269638357`*^9, 3.712471436789711*^9}, {3.712471477172843*^9, 
  3.712471481112101*^9}, {3.7124715680181146`*^9, 3.7124716060359707`*^9}, {
  3.7125911510726533`*^9, 
  3.712591214650171*^9}},ExpressionUUID->"c2f98157-a31e-4149-8a94-\
ad2625055617"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "q", ",", "q", ",", "q", ",", 
   SuperscriptBox["j", "3"]}], "}"}]], "Output",
 CellChangeTimes->{3.7124716449647417`*^9, 3.7136213074741*^9, 
  3.713624525582806*^9},ExpressionUUID->"9403d21a-fba6-41d6-bce2-\
73f959cc01e3"]
}, Open  ]],

Cell["\<\
The pattern language available in WL is more elegant than regular expressions \
found in other languages.\
\>", "Text",
 CellChangeTimes->{{3.712592582792923*^9, 3.7125925854950023`*^9}, {
  3.71259266238581*^9, 
  3.7125927113008547`*^9}},ExpressionUUID->"f39284ae-65be-4071-9b6c-\
51499b1b3b6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"10", ",", "5"}], "]"}], ",", 
   RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712592715456014*^9, 
  3.712592779523098*^9}},ExpressionUUID->"a993f750-ffae-4eb7-b293-\
ec253cf65d21"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5", ",", "4", ",", "7", ",", "10", ",", "4", ",", "\<\"W\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7125927821539173`*^9, 3.71362130752094*^9, 
  3.7136245256766224`*^9},ExpressionUUID->"3470aae8-f292-4d51-842d-\
309e9f4ec50b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wordsNnumbers", " ", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", "5"}], "]"}], ",", 
     RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.712592715456014*^9, 
  3.7125928569112434`*^9}},ExpressionUUID->"c24d5cd2-0b96-4515-b620-\
9724bcdcc541"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"l\"\>", ",", "7", ",", "3", ",", "\<\"W\"\>", ",", "\<\"o\"\>",
    ",", "2", ",", "\<\"a\"\>", ",", "\<\"r\"\>", ",", "\<\"m\"\>", 
   ",", "\<\"f\"\>", ",", "5", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.712592819347392*^9, 3.7125928609958897`*^9, 
  3.7136213075678453`*^9, 
  3.7136245257703733`*^9},ExpressionUUID->"95804fb1-086d-482e-8b7d-\
fe5f0ff51e18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"wordsNnumbers", ",", "_Integer"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "integers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712592867242684*^9, 
  3.712592896156571*^9}},ExpressionUUID->"52afa83e-0c7d-4222-9ae9-\
8bce3d3e883f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "3", ",", "2", ",", "5", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.712592897291218*^9, 3.7136213077084737`*^9, 
  3.7136245258172555`*^9},ExpressionUUID->"b18ff227-169b-48ea-8f54-\
abac69201867"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"wordsNnumbers", ",", 
    RowBox[{"Except", "[", "_Integer", "]"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Find", " ", "all", " ", "non"}], "-", "integers"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712592867242684*^9, 3.7125929290373135`*^9}, {
  3.7125929749916344`*^9, 
  3.712592977934416*^9}},ExpressionUUID->"1d23af36-9e76-4035-999c-\
c5e619c86e5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"l\"\>", ",", "\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"m\"\>", ",", "\<\"f\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.712592935441183*^9, 3.712592982463234*^9, 
  3.713621307755351*^9, 
  3.713624525876965*^9},ExpressionUUID->"b257f7ee-d1a1-42a1-a4f3-\
9530b49205f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairsNtriples", " ", "=", " ", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7125930409040923`*^9, 
  3.7125931480464277`*^9}},ExpressionUUID->"eddcadc6-a512-4428-8946-\
f71d30a577f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.71259312819654*^9, 3.7125931493038654`*^9}, 
   3.7136213078022203`*^9, 
   3.7136245259239054`*^9},ExpressionUUID->"b15511a5-11d7-4806-ad4f-\
07ecd4e722ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "pairs"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125932050654736`*^9}},ExpressionUUID->"9bf08129-c1d3-49d5-92ce-\
3b83ba15403a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7125932064226856`*^9, 3.713621307849104*^9, 
  3.713624525970708*^9},ExpressionUUID->"38f1b6d4-ad33-40c3-84f6-\
317886bc2bb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "_"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "triples"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125932361608*^9}},ExpressionUUID->"467f7256-18d5-4fc8-83a1-64e23cc2c530"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.712593242486559*^9, 3.7136213078959694`*^9, 
  3.7136245260176535`*^9},ExpressionUUID->"c21bfbc0-42fc-484e-9316-\
7b174c3af252"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_"}], "}"}], "\[Rule]", " ", 
     RowBox[{"a", " ", "+", " ", "b", " ", "+", "c"}]}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sum", " ", "all", " ", "triples"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125933090021*^9}},ExpressionUUID->"e574d242-ddf3-419b-bda2-2b1c63db33f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "10", ",", "11"}], "}"}]], "Output",
 CellChangeTimes->{3.712593314982442*^9, 3.7136213079916425`*^9, 
  3.7136245260645275`*^9},ExpressionUUID->"a5a77a2f-166f-4ac1-8b75-\
2f1ceb6b7707"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sorting stuff", "Chapter",
 CellChangeTimes->{{3.7127231016239243`*^9, 
  3.7127231049197283`*^9}},ExpressionUUID->"8bd1dcf3-a337-4f02-b744-\
909a2cdbd069"],

Cell["\<\
Sorting is putting things in a certain order. For instance we might have a \
bunch of random numbers we wish to arrange in ascending or descending order. \
Its not usually advisable to implement your own sorting algorithms except for \
fun, or maybe you want to discover a sort method that is faster than anything \
ever discovered. WL implements a very efficient sort algorithm and its always \
advisable to use the built-in stuff.\
\>", "Text",
 CellChangeTimes->{{3.7127231321672773`*^9, 3.7127233466109447`*^9}, {
  3.712723400850381*^9, 
  3.7127234442046995`*^9}},ExpressionUUID->"408c55c0-124b-4199-81c0-\
b01a26076607"],

Cell[CellGroupData[{

Cell[BoxData["someRandomInts"], "Input",
 CellChangeTimes->{{3.7127230816178017`*^9, 
  3.712723088435858*^9}},ExpressionUUID->"1aefe7d6-4b6f-453d-b3e2-\
8e0493f2d62b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "5", ",", "10", ",", "4", ",", "1", ",", "6", ",", "8", 
   ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.7127230905416756`*^9, 3.7136213080338097`*^9, 
  3.713624526118235*^9},ExpressionUUID->"61c0db44-4113-44f5-8d8a-\
a7264dbc95f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", "someRandomInts", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"In", " ", "ascending", " ", "order"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712723449638192*^9, 
  3.7127234696698713`*^9}},ExpressionUUID->"c5af9d1a-34dd-44ad-8efa-\
cfeb032819ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "4", ",", "5", ",", "6", 
   ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.712723455344245*^9, 3.7136213080806856`*^9, 
  3.713624526149486*^9},ExpressionUUID->"deb10cf9-520a-4951-b552-\
9e8a009b7ad5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"someRandomInts", ",", " ", 
    RowBox[{
     RowBox[{"#1", " ", ">", " ", "#2"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "descending", " ", "order", " ", "using", " ", "an", " ", 
    "ordering", " ", "function", " ", "that", " ", "specifies", " ", "that", 
    " ", "the", " ", "previous", " ", "number", " ", "be", " ", "greater", 
    " ", "than", " ", "the", " ", "next", " ", "one"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712723475707801*^9, 
  3.712723551920385*^9}},ExpressionUUID->"696eb959-2cef-41be-854d-\
9f8d9948dc8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "8", ",", "6", ",", "5", ",", "4", ",", "1", ",", "1", ",", "1", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.7127235538023605`*^9, 3.7136213082056894`*^9, 
  3.7136245261963615`*^9},ExpressionUUID->"ecf86192-749a-4694-91ce-\
8f0475c7d49c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randWords", " ", "=", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{
    RowBox[{"WordList", "[", "]"}], ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "list", " ", "of", " ", "10", " ", "random", " ", "words"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127237258978243`*^9, 3.712723764378605*^9}, {
  3.712723870871478*^9, 
  3.712723907352166*^9}},ExpressionUUID->"99f76dbd-7990-4e52-aba5-\
54dabaad31c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"lingerie\"\>", ",", "\<\"convolve\"\>", ",", "\<\"locket\"\>", 
   ",", "\<\"temperature\"\>", ",", "\<\"bottommost\"\>", 
   ",", "\<\"lilting\"\>", ",", "\<\"vixen\"\>", ",", "\<\"soulful\"\>", 
   ",", "\<\"petrifying\"\>", ",", "\<\"lumpen\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7127237665179863`*^9, {3.712723855439438*^9, 3.7127239104658766`*^9}, 
   3.7136213097711306`*^9, 
   3.7136245452837567`*^9},ExpressionUUID->"16a82037-1714-4ee8-b3bd-\
94e71fe51ae3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", "randWords", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sort", " ", "handles", " ", "words", " ", "with", " ", 
    RowBox[{"ease", ".", " ", "Dictionary"}], " ", "order"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239144257603`*^9, 3.7127239419633474`*^9}, {
  3.7127243004869785`*^9, 
  3.712724312211463*^9}},ExpressionUUID->"30c3a623-bfc7-4f6d-b649-\
4dad22a21a1f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"bottommost\"\>", ",", "\<\"convolve\"\>", 
   ",", "\<\"lilting\"\>", ",", "\<\"lingerie\"\>", ",", "\<\"locket\"\>", 
   ",", "\<\"lumpen\"\>", ",", "\<\"petrifying\"\>", ",", "\<\"soulful\"\>", 
   ",", "\<\"temperature\"\>", ",", "\<\"vixen\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.7127239238738146`*^9, 3.7127239435176387`*^9}, 
   3.713621309943026*^9, 
   3.7136245454712534`*^9},ExpressionUUID->"bffd44fd-01a3-4b88-b25c-\
d42b12d9f57b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21"}], ",", "21"}], "}"}], ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Random", " ", "Integers", " ", "Including", " ", "Negatives"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239960068064`*^9, 
  3.712724040318719*^9}},ExpressionUUID->"9491dd8a-8f8c-4057-aa82-\
38331c860dc9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "7", ",", 
   RowBox[{"-", "21"}], ",", "10", ",", "17", ",", "0", ",", "20", ",", 
   RowBox[{"-", "21"}], ",", "14", ",", 
   RowBox[{"-", "17"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7127240175065823`*^9, 3.7127240423605566`*^9}, 
   3.7136213099899*^9, 
   3.7136245455025363`*^9},ExpressionUUID->"07438640-de78-4dfe-bb13-\
cd7bff95795e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"%", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", "#1", "]"}], "<", 
      RowBox[{"Abs", "[", "#2", "]"}]}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"%", " ", "Stands", " ", "for", " ", "the", " ", "last", " ", 
    RowBox[{"output", ".", " ", "We"}], " ", "Sort", " ", "by", " ", 
    "Absolute", " ", "value", " ", "using", " ", "an", " ", "ordering", " ", 
    "function"}], "  ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239960068064`*^9, 
  3.7127242139555063`*^9}},ExpressionUUID->"8086e217-fc7d-4d23-b793-\
11d9f8d739c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "7", ",", "10", ",", "14", ",", 
   RowBox[{"-", "17"}], ",", "17", ",", "20", ",", 
   RowBox[{"-", "21"}], ",", 
   RowBox[{"-", "21"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7127242185550594`*^9, 3.7136213100367527`*^9, 
  3.713624545549404*^9},ExpressionUUID->"ac2c57f5-3468-4cbd-b2f7-\
22e644233637"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"randWords", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"StringLength", "[", "#1", "]"}], " ", "<", " ", 
      RowBox[{"StringLength", "[", "#2", "]"}]}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sort", " ", "by", " ", "string", " ", "Length"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127242460318727`*^9, 
  3.712724287323826*^9}},ExpressionUUID->"6106bb61-68a4-4213-8746-\
3c86f382f767"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"vixen\"\>", ",", "\<\"lumpen\"\>", ",", "\<\"locket\"\>", 
   ",", "\<\"soulful\"\>", ",", "\<\"lilting\"\>", ",", "\<\"convolve\"\>", 
   ",", "\<\"lingerie\"\>", ",", "\<\"petrifying\"\>", 
   ",", "\<\"bottommost\"\>", ",", "\<\"temperature\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.712724288423807*^9, 3.7136213100836306`*^9, 
  3.7136245455962825`*^9},ExpressionUUID->"331f9334-09a9-403d-b6c6-\
883c7a15dca8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21"}], ",", "21"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7127243417265034`*^9, 3.7127243708015766`*^9}, {
  3.7127244012404056`*^9, 
  3.712724407722045*^9}},ExpressionUUID->"5dd90000-dd82-40d9-bd57-\
a952e46a72ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "21"}], ",", "13", ",", 
     RowBox[{"-", "8"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "19"}], ",", "20", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "10"}], ",", 
     RowBox[{"-", "16"}], ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "9"}], ",", 
     RowBox[{"-", "14"}], ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8"}], ",", 
     RowBox[{"-", "13"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7"}], ",", "18", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6"}], ",", "11", ",", 
     RowBox[{"-", "9"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "9", ",", 
     RowBox[{"-", "7"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "13", ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "10", ",", 
     RowBox[{"-", "10"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7127243728068743`*^9, 3.712724408634699*^9, 
  3.7136213101305*^9, 
  3.7136245456587563`*^9},ExpressionUUID->"123fddd1-67d3-4709-a613-\
8073bb1d50d1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphs", "Chapter",
 CellChangeTimes->{{3.7134184605982904`*^9, 
  3.713418461869225*^9}},ExpressionUUID->"1a4e8ba4-ce56-47aa-b09d-\
bcdb9c6e61a7"],

Cell["\<\
A graph is simply a set of nodes (vertices) and edges (arcs). An edge \
connects a pair of nodes.\
\>", "Text",
 CellChangeTimes->{{3.713418512736163*^9, 
  3.713418673215619*^9}},ExpressionUUID->"3494af42-4a2e-4e18-8ede-\
7eace2937b1f"],

Cell["\<\
A graph can be either directed, with arrowheads indicating direction of \
connectivity\
\>", "Text",
 CellChangeTimes->{{3.71341868730322*^9, 3.7134186959954057`*^9}, {
  3.713419012999893*^9, 3.7134190228139057`*^9}, {3.713419067728431*^9, 
  3.7134190751980677`*^9}},ExpressionUUID->"b4a7be38-9de7-4623-8155-\
872563fa0555"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}], ",", 
    RowBox[{"4", "\[Rule]", "5"}], ",", 
    RowBox[{"4", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 
  3.7134188163212*^9}},ExpressionUUID->"2b74d0bb-e9bb-4096-b81d-e18a27bbf8b3"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 
      5}, {{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}, Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQMll2Rt259et29i0m5+F/TGHia+5aRT+MzgN/YC
ml8e9zx7bu/VuUdW2PafvWtr4vnbQPUCPV/6OGw4HNrOxLivAfJjlHd2XCl4
bc+x+EfPdcMt9n6cjyfNsH5tX1j25+Lz8J32ETkPjCP4XtvP/n2++fWEffb/
Eqea6b18Za/tub7x6ZuD9oeiBOYYnHllr3r+9bJN04/YH33e1Few/ZV9Fmvl
aw/34/ZpTBLhv1a9speSvmws+OukvdyttWFXl72yF8tUbChad8b+lGbLasnl
r+y9WLL0OHY/sNc77hvmsfqVffXkn64KGQ/tP0rGG50AmvfRY/nSiyKP7O38
VG5OBNr3as4z3m0HHtk7dR/+PQPonl3JbTvSsx/bz2hKyzoDdO8Jxs9TGkWe
2Es1pMuJ2by2nyrO2zJ/9xP7bZ+j3aMLX9s/MS+cHJfw1L7xhuBkHdO39jWd
4i1FQP/L+LDtKcx6a/+92+J/FtD/8z3ZC3ZPf2sfa8VZEQX0/xeHVffe7Xlr
nyq6fe0UoP9/1Hoyfrv51n6pgVlENND/bpv4Vux/99a+p8H45xu34/YcrAot
9r/f2ieFvSrf9POkfe6il3p5/9/aK03WuCYE9L/Up/3Nm4D8c+deO3/Y9cD+
0snQ5l6get+k/9M4gP4vevLKW/z9W/udz0VX7gL6v7ww1i781lt7L1NLqwVA
/1tl3Vgcufet/YmwjuZgoP/vxfcu05/x1n6BZlVxPtD/Lw91ub8H+sd11paX
/UD/316xJXAz0L+bREI/BQL9DwCaECv8
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{1, 2}, 0.030449365958857832`], 
         ArrowBox[BezierCurveBox[{
          2, {0.7623445247291688, 0.3734600717479594}, 3}], 
          0.030449365958857832`], 
         ArrowBox[BezierCurveBox[{
          2, {1.0079839270177136`, 0.37343328192618247`}, 3}], 
          0.030449365958857832`], ArrowBox[{3, 1}, 0.030449365958857832`], 
         ArrowBox[{3, 4}, 0.030449365958857832`], 
         ArrowBox[{4, 2}, 0.030449365958857832`], 
         ArrowBox[{4, 5}, 0.030449365958857832`]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.030449365958857832], DiskBox[2, 0.030449365958857832], 
         DiskBox[3, 0.030449365958857832], DiskBox[4, 0.030449365958857832], 
         DiskBox[5, 0.030449365958857832]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.713418793601492*^9, 3.7134188203325024`*^9}, 
   3.713621310474245*^9, 
   3.7136245458462534`*^9},ExpressionUUID->"14912cd0-6652-4a16-a17e-\
2840d00430db"]
}, Open  ]],

Cell["Or undirected", "Text",
 CellChangeTimes->{{3.7134189692690697`*^9, 
  3.7134189728505635`*^9}},ExpressionUUID->"1cdf802d-0b5b-4632-ad72-\
edef1a891267"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "<->", "2"}], ",", 
    RowBox[{"2", "<->", "3"}], ",", 
    RowBox[{"3", "<->", "4"}], ",", 
    RowBox[{"4", "<->", "5"}], ",", 
    RowBox[{"4", "<->", "2"}], ",", 
    RowBox[{"2", "<->", "3"}], ",", 
    RowBox[{"3", "<->", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 3.7134188163212*^9}, {
  3.7134188524275875`*^9, 3.713418885828278*^9}, {3.7134189634279213`*^9, 
  3.7134190071178303`*^9}, {3.713419082186406*^9, 
  3.713419102096507*^9}},ExpressionUUID->"31afa417-e090-4ad8-8e38-\
37d1215d9c4f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1z2tI02EUBvAhaiairllShqSgSeGFkEqzns1UmoSpM1LTmcPbJDfNCyah
BatEPzS8QXhpFKZZouRgaWpaOhMvuUlKGdk2L+z/912tDEVBe/vggcPhged8
+HlJ5PGZNhwOx4fu/7s3stwsjw3TPA4kpAz5JK1hol2mczauosb70ru2a2vY
653d4kkUgh0sy9K2ow3zKOvpqeGFOfBVDS+7/eh/kLMDsxNKUGZ3pjIyZRmJ
+YP+J/MJGj0+qlSaJdyrmIpMbSaYyIyxbXFdQrX/qLzsPcEXslunyjbht0Pg
65uLBPq84+lOA0YEbyrN3usEFuVKdhTXCL/NGr2SY0FfozRVnWGAcEHA7bK1
QGTqkvVrfkBYZx9xiGbnywsthe2TSCwJzDHuEvA7Yjbr18dhvaKziP8QdEsC
HBPCxxDx6Rm/9jvBPNEqompHcPqqurN6mKBjX+spW/Mw5ro8spKaCGbEJS7h
VYMIMs3ID8gJTvTmZiTH92LV/sljXQiB2pF7PcdfjSG53cp2CYuih07adOov
rZ11eStg0RpnUHygfr228nCRGwvrt4pHWuov8PqlE/xksJg1OjJF/RltHITq
GSSQsKDz1K/xnVXKBhh4upqmb1N/LKfYne1mELqTLDJTv9jYfE7zisHYZ43Z
Sv3iRonMk+avB7erhC8mcbec2xlG+xeC3Wakf8dRWM5r6OhncCvt2HOvi2NQ
5xVP3dAxMLBHh/fXjcBTuOgisjDQsn3WN9TvuzEXks9jseVuI31QPYhY+5W4
p3wWd6TB9wtEvSjNaaqfLmahODIgjA5Q4x84sCk0
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], ArrowBox[{1, 2}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{1, 3}, 0.030449516090916492`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{
           2, {1.008520704478869, 0.37314252471395337`}, 3}], 
           0.030449516090916492`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{
           2, {0.7630616598911268, 0.37320243172925066`}, 3}], 
           0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{2, 4}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{3, 4}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{4, 5}, 0.030449516090916492`]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.030449516090916492], DiskBox[2, 0.030449516090916492], 
         DiskBox[3, 0.030449516090916492], DiskBox[4, 0.030449516090916492], 
         DiskBox[5, 0.030449516090916492]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7134191045752764`*^9, 3.7136213106148806`*^9, 
  3.7136245459243765`*^9},ExpressionUUID->"e2487f2e-7e7f-460d-a2df-\
ed2499484901"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "<->", "2"}], ",", 
      RowBox[{"2", "<->", "3"}], ",", 
      RowBox[{"3", "<->", "4"}], ",", 
      RowBox[{"4", "<->", "5"}], ",", 
      RowBox[{"4", "<->", "2"}], ",", 
      RowBox[{"2", "<->", "3"}], ",", 
      RowBox[{"3", "<->", "1"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Labelling", " ", "vertices"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 3.7134188163212*^9}, {
  3.7134188524275875`*^9, 3.713418885828278*^9}, {3.7134189634279213`*^9, 
  3.7134190071178303`*^9}, {3.713419082186406*^9, 3.713419102096507*^9}, {
  3.7134191973649454`*^9, 
  3.7134192374089117`*^9}},ExpressionUUID->"fdeea770-0393-4b3b-b4a6-\
c800d21e657e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}}, {
      VertexLabels -> {Automatic}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.3732888953760839}, {0.8858822590869997, 
          0.7463449564432038}}, 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.3732888953760839}, {0.8857001052829949, 0.}}, 
          0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[BezierCurveBox[{{0.8858822590869997, 0.7463449564432038}, {
          1.008520704478869, 0.37314252471395337`}, {0.8857001052829949, 
          0.}}], 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[BezierCurveBox[{{0.8858822590869997, 0.7463449564432038}, {
          0.7630616598911268, 0.37320243172925066`}, {0.8857001052829949, 
          0.}}], 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8858822590869997, 0.7463449564432038}, {
          1.8909953910039246`, 0.37312578724025364`}}, 
          0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8857001052829949, 0.}, {1.8909953910039246`, 
          0.37312578724025364`}}, 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.8909953910039246`, 0.37312578724025364`}, {
          3.0293342076387804`, 0.3732396817489221}}, 0.030449516090916492`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.3732888953760839}, 0.030449516090916492], 
         InsetBox["1", 
          Offset[{2, 2}, {0.030449516090916492, 0.4037384114670004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8858822590869997, 0.7463449564432038}, 
          0.030449516090916492], 
         InsetBox["2", 
          Offset[{2, 2}, {0.9163317751779162, 0.7767944725341203}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8857001052829949, 0.}, 0.030449516090916492], 
         InsetBox["3", 
          Offset[{2, 2}, {0.9161496213739114, 0.030449516090916492}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8909953910039246, 0.37312578724025364}, 
          0.030449516090916492], 
         InsetBox["4", 
          Offset[{2, 2}, {1.921444907094841, 0.40357530333117014}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.0293342076387804, 0.3732396817489221}, 
          0.030449516090916492], 
         InsetBox["5", 
          Offset[{2, 2}, {3.059783723729697, 0.4036891978398386}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.713419211719124*^9, 3.71362131080719*^9, 
  3.713624546033763*^9},ExpressionUUID->"4150392a-1aa7-45ab-94ee-\
52a2f64b5956"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"el", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "1"}]}], "}"}]}], ";"}]], "Input",Expre\
ssionUUID->"05c5122e-d2a0-4165-99e7-20935a0079a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"el", ",", 
    RowBox[{"EdgeLabels", "\[Rule]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"el", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        "\[Rule]", 
        SubscriptBox["e", "i"]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "el", "]"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"Lablelling", " ", "edges", " ", "Individually"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7134196826972218`*^9, 3.713419728493623*^9}, {
  3.7134198760210495`*^9, 
  3.713419900738537*^9}},ExpressionUUID->"7f1f4bbd-995a-4a4d-97cf-\
25fe1192e794"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {3, 1}}}, {
      EdgeLabels -> {
        UndirectedEdge[3, 1] -> Subscript[$CellContext`e, 3], 
         UndirectedEdge[1, 2] -> Subscript[$CellContext`e, 1], 
         UndirectedEdge[2, 3] -> Subscript[$CellContext`e, 2]}, 
       VertexLabels -> {Automatic}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], 
          ArrowBox[{{-0.8660254037844384, -0.49999999999999933`}, {
           0.8660254037844389, -0.5000000000000012}}, 0.020399597244776385`]},
          InsetBox[
          SubscriptBox["e", "1"], {2.7755575615628914*^-16, -0.5000000000000002},
           ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{-0.8660254037844384, -0.49999999999999933`}, {
           1.8369701987210297`*^-16, 1.}}, 0.020399597244776385`]}, InsetBox[
          SubscriptBox["e", "3"], {-0.4330127018922191, 0.25000000000000033}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
           1.8369701987210297`*^-16, 1.}}, 0.020399597244776385`]}, InsetBox[
          SubscriptBox["e", "2"], {0.4330127018922196, 0.2499999999999994}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{-0.8660254037844384, -0.49999999999999933}, 
          0.020399597244776385], 
         InsetBox["1", 
          Offset[{2, 2}, {-0.845625806539662, -0.479600402755223}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8660254037844389, -0.5000000000000012}, 
          0.020399597244776385], 
         InsetBox["2", 
          Offset[{2, 2}, {0.8864250010292153, -0.47960040275522486}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8369701987210297*^-16, 1.}, 0.020399597244776385], 
         InsetBox["3", 
          Offset[{2, 2}, {0.02039959724477657, 1.0203995972447764}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7134198715822372`*^9, 3.7136213110884447`*^9, 
  3.7136245461608124`*^9},ExpressionUUID->"b818f423-4c3b-44a7-9f20-\
e46d524e3f13"]
}, Open  ]],

Cell["\<\
We use graphs to capture useful relationships among entities, like in Social \
networks, the relationships between friends are captured in a graph. A graph \
is usually also called a network.\
\>", "Text",
 CellChangeTimes->{{3.7134204443370667`*^9, 
  3.7134205374207706`*^9}},ExpressionUUID->"d3481413-6f94-48d1-a466-\
95d4b365aa97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<William\>\"", " ", "\[Rule]", " ", "\"\<Elvis\>\""}], ",", 
     RowBox[{"\"\<Elvis\>\"", " ", "\[UndirectedEdge]", "\"\<Sylvia\>\""}], 
     ",", 
     RowBox[{"\"\<Elvis\>\"", "\[Rule]", " ", "\"\<Trina\>\""}], ",", 
     RowBox[{"\"\<Trina\>\"", "\[Rule]", " ", "\"\<Sylvia\>\""}], ",", 
     RowBox[{"\"\<Sylvia\>\"", " ", "\[UndirectedEdge]", "\"\<Vivian\>\""}]}],
     "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.71342055054978*^9, 
  3.7134207329577074`*^9}},ExpressionUUID->"6652ab1b-75a8-4668-9f6b-\
7137ae3af635"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "William", "Elvis", "Sylvia", "Trina", "Vivian"}, {{{1, 2}, {2, 4}, {4, 
       3}}, {{2, 3}, {3, 5}}}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 0.}, {1.0232890200771365`, 0.28594218604150734`}}, 
         0.031293254495300085`], 
        {Arrowheads[0.], 
         ArrowBox[{{1.0232890200771365`, 0.28594218604150734`}, {
          2.1231559613218374`, 0.28530404267550774`}}, 
          0.031293254495300085`]}, 
        ArrowBox[{{1.0232890200771365`, 0.28594218604150734`}, {
         1.5735707686584046`, 0.9655491216866833}}, 0.031293254495300085`], 
        {Arrowheads[0.], 
         ArrowBox[{{2.1231559613218374`, 0.28530404267550774`}, {
          3.1482422081128902`, 0.000428109524294229}}, 
          0.031293254495300085`]}, 
        ArrowBox[{{1.5735707686584046`, 0.9655491216866833}, {
         2.1231559613218374`, 0.28530404267550774`}}, 0.031293254495300085`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.031293254495300085], 
         InsetBox["\<\"William\"\>", 
          Offset[{2, 2}, {0.031293254495300085, 0.031293254495300085}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.0232890200771365, 0.28594218604150734}, 
          0.031293254495300085], 
         InsetBox["\<\"Elvis\"\>", 
          Offset[{2, 2}, {1.0545822745724367, 0.3172354405368074}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.1231559613218374, 0.28530404267550774}, 
          0.031293254495300085], 
         InsetBox["\<\"Sylvia\"\>", 
          Offset[{2, 2}, {2.1544492158171376, 0.3165972971708078}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5735707686584046, 0.9655491216866833}, 
          0.031293254495300085], 
         InsetBox["\<\"Trina\"\>", 
          Offset[{2, 2}, {1.6048640231537048, 0.9968423761819833}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.1482422081128902, 0.000428109524294229}, 
          0.031293254495300085], 
         InsetBox["\<\"Vivian\"\>", 
          Offset[{2, 2}, {3.1795354626081904, 0.031721364019594314}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.71342072325931*^9, 3.7134207349971476`*^9}, 
   3.71362131127594*^9, 
   3.7136245462702584`*^9},ExpressionUUID->"fc00d902-548f-4fcc-9987-\
2c0ce7b1a2db"]
}, Open  ]],

Cell[TextData[{
 "A simple social network graph, the directed edges, the ones with an \
arrowhead are one way follow relationships like the one on Twitter and \
Instagram, for instance: William follows Elvis but Elvis does not follow \
William. Sylvia and Vivian both follow each other. \nWe can model all sorts \
of situations with graphs, Your Google maps usually uses a graph to find the \
Shortest Path between two location.\nThere are other networks like Financial \
networks etc.\n\n",
 StyleBox["Uses of Graphs", "Chapter"]
}], "Text",
 CellChangeTimes->{{3.7134207565766153`*^9, 3.713420792009548*^9}, {
  3.7134208475121393`*^9, 3.71342095801989*^9}, {3.7134210043419447`*^9, 
  3.713421110341259*^9}, {3.7134255102944984`*^9, 3.7134255510078335`*^9}, {
  3.7134257861146235`*^9, 
  3.713425827499996*^9}},ExpressionUUID->"c1f776f9-f17f-47af-842c-\
ad5bcd18ffec"],

Cell["\<\
Once we have a graph, we can ask several useful questions on the structures \
contained in the graph, this is how we use graphs as computational objects. \
e.g. 
1. Finding connected elements and paths
2. Finding the shortest path between elements
3. Breaking up or partitioning the graph into sets of connected elements.\
\>", "Text",
 CellChangeTimes->{{3.713425833428476*^9, 3.7134259920251946`*^9}, 
   3.7134260833752995`*^9},ExpressionUUID->"54b2009f-7e8a-4aeb-aac8-\
1cc7f3e18330"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cityConnections", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "\"\<Boston\>\"", " ", "\[UndirectedEdge]", " ", "\"\<Providence\>\""}], 
     ",", 
     RowBox[{"\"\<Boston\>\"", "\[UndirectedEdge]", "\"\<New York\>\""}], ",", 
     RowBox[{"\"\<Providence\>\"", "\[UndirectedEdge]", "\"\<New York\>\""}], 
     ",", 
     RowBox[{"\"\<New York\>\"", "\[UndirectedEdge]", "\"\<Chicago\>\""}], 
     ",", 
     RowBox[{"\"\<Chicago\>\"", " ", "\[UndirectedEdge]", "\"\<Denver\>\""}], 
     ",", 
     RowBox[{"\"\<Chicago\>\"", "\[UndirectedEdge]", "\"\<Phoenix\>\""}], ",", 
     RowBox[{"\"\<Denver\>\"", "\[UndirectedEdge]", "\"\<Phoenix\>\""}], ",", 
     RowBox[{"\"\<Denver\>\"", "\[UndirectedEdge]", "\"\<New York\>\""}], ",", 
     RowBox[{"\"\<Los Angeles\>\"", "\[UndirectedEdge]", "\"\<Boston\>\""}]}],
     "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7134272736687517`*^9, 3.71342751446379*^9}, {
  3.7136245743014374`*^9, 
  3.71362466666648*^9}},ExpressionUUID->"8086408f-f6ec-4af5-be6d-\
bcfcfe27fc66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"cityConnections", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7134274961844463`*^9, 
  3.7134275318394947`*^9}},ExpressionUUID->"63e66c3b-f18a-49b3-a2b7-\
6ba928936f8d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Boston", "Providence", "New York", "Chicago", "Denver", "Phoenix", 
       "Los Angeles"}, {
      Null, {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 3}, {
       7, 1}}}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {2.737840952918195,
           0.}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {
          1.9282413868699342`, 0.5237498549521787}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {4.256506502169779,
           0.9113246942232087}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.737840952918195, 0.}, {1.9282413868699342`, 
          0.5237498549521787}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.9282413868699342`, 0.5237498549521787}, {
          0.8840639763411773, 0.9562088245523754}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.9282413868699342`, 0.5237498549521787}, {
          0.8141731843471403, 0.3229095504781709}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8840639763411773, 0.9562088245523754}, {
          0.8141731843471403, 0.3229095504781709}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8840639763411773, 0.9562088245523754}, {0., 
          0.7287327171728711}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8141731843471403, 0.3229095504781709}, {0., 
          0.7287327171728711}}, 0.038619760210131665`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{3.19006335088223, 0.6537028907214175}, 
          0.038619760210131665], 
         InsetBox["\<\"Boston\"\>", 
          Offset[{2, 2}, {3.2286831110923613, 0.6923226509315492}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.737840952918195, 0.}, 0.038619760210131665], 
         InsetBox["\<\"Providence\"\>", 
          Offset[{2, 2}, {2.7764607131283263, 0.038619760210131665}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.9282413868699342, 0.5237498549521787}, 
          0.038619760210131665], 
         InsetBox["\<\"New York\"\>", 
          Offset[{2, 2}, {1.9668611470800659, 0.5623696151623104}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8840639763411773, 0.9562088245523754}, 
          0.038619760210131665], 
         InsetBox["\<\"Chicago\"\>", 
          Offset[{2, 2}, {0.922683736551309, 0.9948285847625071}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8141731843471403, 0.3229095504781709}, 
          0.038619760210131665], 
         InsetBox["\<\"Denver\"\>", 
          Offset[{2, 2}, {0.852792944557272, 0.3615293106883025}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7287327171728711}, 0.038619760210131665], 
         InsetBox["\<\"Phoenix\"\>", 
          Offset[{2, 2}, {0.038619760210131665, 0.7673524773830028}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.256506502169779, 0.9113246942232087}, 
          0.038619760210131665], 
         InsetBox["\<\"Los Angeles\"\>", 
          Offset[{2, 2}, {4.295126262379911, 0.9499444544333404}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7134275328541756`*^9, 3.713621311479064*^9, 
  3.7136245465202594`*^9, 
  3.7136246906310277`*^9},ExpressionUUID->"87b32fd9-9760-4dd5-9161-\
9ef0027c766f"]
}, Open  ]],

Cell["\<\
We can do useful things like find the shortest path from one city to another\
\>", "Text",
 CellChangeTimes->{{3.7136246986762447`*^9, 
  3.71362472285808*^9}},ExpressionUUID->"45825643-c387-418c-b00b-\
b6f09001abbc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindShortestPath", "[", 
  RowBox[{
  "cityConnections", ",", "\"\<Phoenix\>\"", ",", "\"\<Los Angeles\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7136247268696513`*^9, 3.7136247858839407`*^9}, {
  3.713624926222189*^9, 
  3.71362493101291*^9}},ExpressionUUID->"dda5b267-fbbf-4154-97b8-\
ccb59af0ecc8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Phoenix\"\>", ",", "\<\"Chicago\"\>", ",", "\<\"New York\"\>", 
   ",", "\<\"Boston\"\>", ",", "\<\"Los Angeles\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.7136247769128227`*^9, 3.713624789080728*^9}, 
   3.7136249323042836`*^9},ExpressionUUID->"3d62ae83-fe30-4ad5-9f15-\
6bd385fcde09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"cityConnections", ",", 
   RowBox[{"FindShortestPath", "[", 
    RowBox[{
    "cityConnections", ",", "\"\<Phoenix\>\"", ",", "\"\<Los Angeles\>\""}], 
    "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7136247955012383`*^9, 3.7136248268636713`*^9}, {
  3.713624936040523*^9, 
  3.7136249407608085`*^9}},ExpressionUUID->"aaf28768-6564-4759-809d-\
eb0d636368ee"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Boston", "Providence", "New York", "Chicago", "Denver", "Phoenix", 
       "Los Angeles"}, {
      Null, {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 3}, {
       7, 1}}}, {
      VertexLabels -> {
        "Phoenix" -> "Name", "Los Angeles" -> "Name", "New York" -> "Name", 
         "Boston" -> "Name", "Chicago" -> "Name"}, 
       GraphHighlight -> {
        "Boston", "New York", "Chicago", "Los Angeles", "Phoenix"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {2.737840952918195,
           0.}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {
          1.9282413868699342`, 0.5237498549521787}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.19006335088223, 0.6537028907214175}, {4.256506502169779,
           0.9113246942232087}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.737840952918195, 0.}, {1.9282413868699342`, 
          0.5237498549521787}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.9282413868699342`, 0.5237498549521787}, {
          0.8840639763411773, 0.9562088245523754}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.9282413868699342`, 0.5237498549521787}, {
          0.8141731843471403, 0.3229095504781709}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8840639763411773, 0.9562088245523754}, {
          0.8141731843471403, 0.3229095504781709}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8840639763411773, 0.9562088245523754}, {0., 
          0.7287327171728711}}, 0.038619760210131665`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8141731843471403, 0.3229095504781709}, {0., 
          0.7287327171728711}}, 0.038619760210131665`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{3.19006335088223, 0.6537028907214175}, 
           0.038619760210131665]}, 
         InsetBox["\<\"Boston\"\>", 
          Offset[{2, 2}, {3.2286831110923613, 0.6923226509315492}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, 
        DiskBox[{2.737840952918195, 0.}, 0.038619760210131665], {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{1.9282413868699342, 0.5237498549521787}, 
           0.038619760210131665]}, 
         InsetBox["\<\"New York\"\>", 
          Offset[{2, 2}, {1.9668611470800659, 0.5623696151623104}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0.8840639763411773, 0.9562088245523754}, 
           0.038619760210131665]}, 
         InsetBox["\<\"Chicago\"\>", 
          Offset[{2, 2}, {0.922683736551309, 0.9948285847625071}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, 
        DiskBox[{0.8141731843471403, 0.3229095504781709}, 
         0.038619760210131665], {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 0.7287327171728711}, 0.038619760210131665]}, 
         InsetBox["\<\"Phoenix\"\>", 
          Offset[{2, 2}, {0.038619760210131665, 0.7673524773830028}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{4.256506502169779, 0.9113246942232087}, 
           0.038619760210131665]}, 
         InsetBox["\<\"Los Angeles\"\>", 
          Offset[{2, 2}, {4.295126262379911, 0.9499444544333404}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7136248274453645`*^9, 
  3.7136249463393383`*^9},ExpressionUUID->"ddde12c6-012d-4013-97fb-\
175edbcc52d1"]
}, Open  ]],

Cell["\<\
The example above might not be realistic, there are standard ways to find the \
shortest path between cities on a real map in WL, but we are using this toy \
example to demonstrate what we can do with graphs, this doesn\
\[CloseCurlyQuote]t scratch the surface of what is possible. Like I always \
say keep your documentation under your pillow. For those interested there is \
a whole section in the documentation dedicated to geographic computing, \
explore for more!\
\>", "Text",
 CellChangeTimes->{{3.7136248691964626`*^9, 3.7136249017369256`*^9}, {
  3.7136249619630976`*^9, 
  3.7136250754548473`*^9}},ExpressionUUID->"c450af82-ca74-4196-bb17-\
a7396fda1b8a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{672, 686},
WindowMargins->{{Automatic, -1}, {Automatic, 0}},
Magnification:>1.2 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 27, 2017)",
StyleDefinitions->"MyBook.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 294, 7, 438, "Title", "ExpressionUUID" -> \
"7c3dbef3-8a63-485f-b543-fc7190da5a74"],
Cell[880, 31, 4053, 55, 1890, "Text", "ExpressionUUID" -> \
"4506d9e4-679f-4218-99c7-2df9db597aec"],
Cell[4936, 88, 232, 5, 110, "Input", "ExpressionUUID" -> \
"1a4bcd99-2b7d-4fac-8f7b-acf730cb1afc"],
Cell[CellGroupData[{
Cell[5193, 97, 180, 3, 151, "Chapter", "ExpressionUUID" -> \
"8ed0e206-5ba5-4164-94fd-fc0ec228641f"],
Cell[5376, 102, 395, 7, 123, "Text", "ExpressionUUID" -> \
"9fbe5778-9c47-4d08-b51b-a055b519420a"],
Cell[5774, 111, 473, 6, 206, "Text", "ExpressionUUID" -> \
"731d7d05-7e15-4058-972c-223b762fe5a1"],
Cell[CellGroupData[{
Cell[6272, 121, 310, 6, 125, "Input", "ExpressionUUID" -> \
"29339c12-ad70-4687-9e7a-61e1e2952d15"],
Cell[6585, 129, 200, 4, 37, "Output", "ExpressionUUID" -> \
"3cfe89c1-f677-4e2e-a489-c5f5407eb561"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6822, 138, 187, 4, 37, "Input", "ExpressionUUID" -> \
"306400a2-e4f1-4051-bf2e-714f7d9732b2"],
Cell[7012, 144, 179, 3, 37, "Output", "ExpressionUUID" -> \
"c57093f3-73d0-40ff-b69a-49561eb7c098"]
}, Open  ]],
Cell[7206, 150, 991, 19, 206, "Text", "ExpressionUUID" -> \
"ef1310ad-5395-41e8-b769-34f3dea22989"],
Cell[CellGroupData[{
Cell[8222, 173, 343, 8, 62, "Input", "ExpressionUUID" -> \
"51125039-0900-4662-8dd8-bb570df78afd"],
Cell[8568, 183, 201, 4, 37, "Output", "ExpressionUUID" -> \
"07045c7c-2598-4138-9c49-b5c76fa669f4"]
}, Open  ]],
Cell[8784, 190, 1103, 21, 344, "Text", "ExpressionUUID" -> \
"e734e4d4-a468-4d8a-a130-5275c9e869c7"],
Cell[CellGroupData[{
Cell[9912, 215, 211, 5, 37, "Input", "ExpressionUUID" -> \
"91f55f99-7dbb-4892-8b44-ce3547186b36"],
Cell[10126, 222, 207, 4, 37, "Output", "ExpressionUUID" -> \
"83ebfdab-4855-436b-833c-6a969c08d1e6"]
}, Open  ]],
Cell[10348, 229, 883, 13, 316, "Text", "ExpressionUUID" -> \
"39ead1e5-8a56-4c1e-bf87-6c2b1d250ace"],
Cell[CellGroupData[{
Cell[11256, 246, 181, 4, 37, "Input", "ExpressionUUID" -> \
"690b62d7-0d8c-41e3-9cea-079461634274"],
Cell[11440, 252, 179, 3, 37, "Output", "ExpressionUUID" -> \
"a318e3bf-13ed-4ae7-bdc9-7fb6e3023921"]
}, Open  ]],
Cell[11634, 258, 1615, 29, 510, "Text", "ExpressionUUID" -> \
"33ff5dd5-c95a-426c-ad16-565e49672a02"],
Cell[CellGroupData[{
Cell[13274, 291, 246, 6, 37, "Input", "ExpressionUUID" -> \
"df7eda82-d099-4a7a-8315-5134bc34395e"],
Cell[13523, 299, 223, 5, 37, "Output", "ExpressionUUID" -> \
"b556740b-06ff-4f82-8321-bfb945aebf30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13783, 309, 131, 3, 37, "Input", "ExpressionUUID" -> \
"b09c1766-acdc-4994-9f2a-a5c9fb7e4f86"],
Cell[13917, 314, 221, 5, 37, "Output", "ExpressionUUID" -> \
"9ea45792-b5c7-4feb-aefd-f6e8efd27a37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14175, 324, 174, 4, 37, "Input", "ExpressionUUID" -> \
"0a60e1ca-646b-42ab-b56b-e65a9184fda5"],
Cell[14352, 330, 178, 3, 37, "Output", "ExpressionUUID" -> \
"a2df7c3c-0403-4093-99b9-b64d188dc0b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14567, 338, 160, 3, 37, "Input", "ExpressionUUID" -> \
"430c929f-10e6-4ab0-8a5b-a830863291a5"],
Cell[14730, 343, 179, 3, 37, "Output", "ExpressionUUID" -> \
"1c0d536b-3d9f-4c7a-81be-71cac703e294"]
}, Open  ]],
Cell[14924, 349, 574, 9, 178, "Text", "ExpressionUUID" -> \
"a9bb0149-1a65-42d6-910d-66c4119e4296"],
Cell[CellGroupData[{
Cell[15523, 362, 210, 5, 37, "Input", "ExpressionUUID" -> \
"2df8e679-b078-495c-ab34-e209cc85e1de"],
Cell[15736, 369, 195, 3, 37, "Output", "ExpressionUUID" -> \
"cfca39f6-6a3f-4f3b-8b65-071c1f304b1b"]
}, Open  ]],
Cell[15946, 375, 431, 7, 96, "Text", "ExpressionUUID" -> \
"873471da-2bb2-49e0-802d-f00b313aa9cf"],
Cell[CellGroupData[{
Cell[16402, 386, 547, 14, 86, "Input", "ExpressionUUID" -> \
"f2eac72f-c378-443d-a919-834e7c4a4c45"],
Cell[16952, 402, 339, 7, 47, "Output", "ExpressionUUID" -> \
"e8d83d09-43b5-47af-ab18-7323331e7ee7"]
}, Open  ]],
Cell[17306, 412, 1303, 19, 455, "Text", "ExpressionUUID" -> \
"b634790b-45ff-49eb-88cb-b129b384db8e"],
Cell[CellGroupData[{
Cell[18634, 435, 258, 5, 37, "Input", "ExpressionUUID" -> \
"f70fb48d-99db-43e7-a181-fa01ce2a416f"],
Cell[18895, 442, 210, 4, 37, "Output", "ExpressionUUID" -> \
"166bcb9f-c063-4bc4-921b-bddb4281048e"]
}, Open  ]],
Cell[19120, 449, 618, 10, 96, "Text", "ExpressionUUID" -> \
"bcacf8d0-79bd-48a1-ac31-c7270e6163a4"],
Cell[CellGroupData[{
Cell[19763, 463, 210, 4, 37, "Input", "ExpressionUUID" -> \
"65a3924c-638e-4dfe-af51-b94603288588"],
Cell[19976, 469, 193, 3, 37, "Output", "ExpressionUUID" -> \
"a942b789-b56e-4e69-b53d-dda8e3051472"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20206, 477, 244, 5, 37, "Input", "ExpressionUUID" -> \
"cbacefb0-18c1-469c-b479-928a85cb1821"],
Cell[20453, 484, 193, 3, 37, "Output", "ExpressionUUID" -> \
"c259331b-5afd-42df-ba21-903766970a14"]
}, Open  ]],
Cell[20661, 490, 370, 8, 96, "Text", "ExpressionUUID" -> \
"f214137c-4c84-4341-ae22-5fad06f3b237"],
Cell[CellGroupData[{
Cell[21056, 502, 278, 7, 37, "Input", "ExpressionUUID" -> \
"29026ca6-b1ac-4655-95b2-fc454dbb9611"],
Cell[21337, 511, 197, 3, 37, "Output", "ExpressionUUID" -> \
"f36c7d10-7959-402f-84bc-c0219d8e3a5b"]
}, Open  ]],
Cell[21549, 517, 680, 13, 261, "Text", "ExpressionUUID" -> \
"abfdbf88-2c66-4838-ba03-f80d3219e221"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22278, 536, 239, 4, 122, "Title", "ExpressionUUID" -> \
"cb6f74ad-97a8-44c3-985f-4ad9dcfb4ed0"],
Cell[22520, 542, 173, 3, 40, "Text", "ExpressionUUID" -> \
"4d6802d4-bd3a-4433-bd1d-f3f21b93e176"],
Cell[CellGroupData[{
Cell[22718, 549, 355, 9, 37, "Input", "ExpressionUUID" -> \
"ac989517-71d9-4ba7-b9f8-308011dfc5f0"],
Cell[23076, 560, 309, 7, 37, "Output", "ExpressionUUID" -> \
"c0c865fd-a211-4307-85a4-1bf9f7c5c464"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23422, 572, 441, 11, 37, "Input", "ExpressionUUID" -> \
"7bd35aaa-abff-42c6-ac0b-c44f454ae8ab"],
Cell[23866, 585, 177, 3, 37, "Output", "ExpressionUUID" -> \
"75022844-158d-45d0-b5c8-c7e441a8dede"]
}, Open  ]],
Cell[24058, 591, 699, 12, 261, "Text", "ExpressionUUID" -> \
"671921bf-5ce0-4adc-952c-fbfe94524441"],
Cell[CellGroupData[{
Cell[24782, 607, 223, 5, 37, "Input", "ExpressionUUID" -> \
"1a52395f-649d-46ae-82c8-5259fb36b6e4"],
Cell[25008, 614, 311, 7, 37, "Output", "ExpressionUUID" -> \
"59448a34-89d5-400f-8643-ad7ff12a0b0e"]
}, Open  ]],
Cell[25334, 624, 221, 5, 40, "Text", "ExpressionUUID" -> \
"997c440b-ba2a-483d-a6e5-e485a6724cf4"],
Cell[CellGroupData[{
Cell[25580, 633, 314, 8, 37, "Input", "ExpressionUUID" -> \
"d738fa35-8b63-4d0d-99c2-14f0feed0d2f"],
Cell[25897, 643, 316, 7, 37, "Output", "ExpressionUUID" -> \
"35508823-1c5c-4efc-8839-484e02b36e88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26250, 655, 350, 9, 37, "Input", "ExpressionUUID" -> \
"4305bdf0-993b-4d2e-b72f-88bbe1feb030"],
Cell[26603, 666, 316, 7, 37, "Output", "ExpressionUUID" -> \
"8b7b6d6a-0dcd-44c4-9504-c6fd9e555792"]
}, Open  ]],
Cell[26934, 676, 272, 6, 68, "Text", "ExpressionUUID" -> \
"0cf4125e-017c-4490-8056-7e9dbdd532a1"],
Cell[CellGroupData[{
Cell[27231, 686, 449, 10, 37, "Input", "ExpressionUUID" -> \
"568c97cf-df54-455d-bf3f-da45940eeccb"],
Cell[27683, 698, 325, 7, 37, "Output", "ExpressionUUID" -> \
"e81555a3-cc65-472c-bdad-4e1973c8a834"]
}, Open  ]],
Cell[28023, 708, 191, 3, 40, "Text", "ExpressionUUID" -> \
"58331823-8045-4f1a-9d7e-bb4156b1d26d"],
Cell[CellGroupData[{
Cell[28239, 715, 512, 12, 37, "Input", "ExpressionUUID" -> \
"0d2accf4-bb12-4e10-a4cb-8445d904ca47"],
Cell[28754, 729, 364, 8, 62, "Output", "ExpressionUUID" -> \
"910a6ab4-cf76-4401-803a-9e572a5bf196"]
}, Open  ]],
Cell[29133, 740, 167, 3, 40, "Text", "ExpressionUUID" -> \
"bf951bad-9afd-4e3d-8e65-24a457a7f2cd"],
Cell[CellGroupData[{
Cell[29325, 747, 435, 8, 37, "Input", "ExpressionUUID" -> \
"0a1dbde5-d1b2-4b76-a13f-c6bab2881bb4"],
Cell[29763, 757, 594, 11, 86, "Output", "ExpressionUUID" -> \
"a1f9b601-8ff1-4c91-99d6-ee2962a18cef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30394, 773, 459, 9, 37, "Input", "ExpressionUUID" -> \
"e12e4570-a604-478e-9ead-e17995cfb60f"],
Cell[30856, 784, 344, 7, 37, "Output", "ExpressionUUID" -> \
"7efa113d-e9b1-4ef5-a159-9fd2662869e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31237, 796, 674, 19, 62, "Input", "ExpressionUUID" -> \
"5f491059-0bea-403e-b18c-48a80d508ae9"],
Cell[31914, 817, 256, 5, 37, "Output", "ExpressionUUID" -> \
"8feeba27-0566-4ee3-ae47-313eb9010a74"]
}, Open  ]],
Cell[32185, 825, 1731, 25, 455, "Text", "ExpressionUUID" -> \
"9a52fa59-a1ff-4f2a-b1b5-9c65a0f566b7"],
Cell[CellGroupData[{
Cell[33941, 854, 477, 12, 62, "Input", "ExpressionUUID" -> \
"37abc7cc-3de0-4907-bba7-4c749d4eca85"],
Cell[34421, 868, 313, 7, 37, "Output", "ExpressionUUID" -> \
"a56471e0-fe11-4be3-957b-17555b5c11b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34771, 880, 284, 7, 37, "Input", "ExpressionUUID" -> \
"525785cb-c41f-4475-8ae3-4f72113c4876"],
Cell[35058, 889, 311, 7, 37, "Output", "ExpressionUUID" -> \
"b6c985bd-7500-401b-b472-7b1a89d2b11b"]
}, Open  ]],
Cell[35384, 899, 227, 5, 68, "Text", "ExpressionUUID" -> \
"f5c08311-674a-4834-9cb0-88ad60fab9eb"],
Cell[CellGroupData[{
Cell[35636, 908, 450, 13, 62, "Input", "ExpressionUUID" -> \
"bcaa2a65-9761-4c80-9648-7b2353624ab4"],
Cell[36089, 923, 301, 7, 37, "Output", "ExpressionUUID" -> \
"4c4e8821-4bf1-4865-b935-19f025dae691"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36427, 935, 383, 10, 37, "Input", "ExpressionUUID" -> \
"8b93eb64-8ded-4088-8b6d-81be486721e1"],
Cell[36813, 947, 249, 4, 37, "Output", "ExpressionUUID" -> \
"88f31ac1-16fb-4288-9a41-e37b7c76b9ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37099, 956, 614, 17, 86, "Input", "ExpressionUUID" -> \
"03cb62f8-4c2c-4f60-849d-009d168b32b1"],
Cell[37716, 975, 287, 6, 37, "Output", "ExpressionUUID" -> \
"88791990-ec0d-4cfd-8e16-677f7674578e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38040, 986, 413, 11, 37, "Input", "ExpressionUUID" -> \
"f73fdb83-96cb-48e5-bfd9-a81ba5fde081"],
Cell[38456, 999, 315, 7, 37, "Output", "ExpressionUUID" -> \
"ad3adeed-8ec6-4b8b-ab06-2d513954e3b6"]
}, Open  ]],
Cell[38786, 1009, 206, 3, 40, "Text", "ExpressionUUID" -> \
"f5c0bb9c-9bb6-430e-a719-75c5ab5bb212"],
Cell[CellGroupData[{
Cell[39017, 1016, 292, 7, 37, "Input", "ExpressionUUID" -> \
"e2f98ef6-22c7-4feb-b73b-5f0d057134c0"],
Cell[39312, 1025, 272, 6, 37, "Output", "ExpressionUUID" -> \
"0cef8e60-9248-4eda-926e-6b880a103909"]
}, Open  ]],
Cell[39599, 1034, 251, 6, 48, "Text", "ExpressionUUID" -> \
"ade9a64f-a6b9-49b6-811b-7faacb71d36e"],
Cell[CellGroupData[{
Cell[39875, 1044, 221, 4, 88, "Chapter", "ExpressionUUID" -> \
"5f48f5a5-bea2-4cc1-be84-a2789741980a"],
Cell[CellGroupData[{
Cell[40121, 1052, 180, 3, 37, "Input", "ExpressionUUID" -> \
"743d4b1a-69a1-4e34-b177-7e2bb3c91d43"],
Cell[40304, 1057, 228, 4, 37, "Output", "ExpressionUUID" -> \
"4bfcd42d-b9d6-4abe-a3cb-17b3b78aee55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40569, 1066, 403, 10, 62, "Input", "ExpressionUUID" -> \
"2023a673-6b82-4290-9dee-d7d4a363244a"],
Cell[40975, 1078, 212, 4, 37, "Output", "ExpressionUUID" -> \
"51445605-9f61-4195-888f-4ef9e504ddc0"]
}, Open  ]],
Cell[41202, 1085, 240, 4, 40, "Text", "ExpressionUUID" -> \
"37644616-68f6-4c66-bd5b-31e2c47e4286"],
Cell[CellGroupData[{
Cell[41467, 1093, 232, 5, 37, "Input", "ExpressionUUID" -> \
"0eaa7c15-53eb-4f5d-9dc4-7ca2f93c7039"],
Cell[41702, 1100, 179, 3, 37, "Output", "ExpressionUUID" -> \
"12de2b51-d26d-4187-b375-f35b4a592446"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41918, 1108, 231, 5, 37, "Input", "ExpressionUUID" -> \
"e31e7a91-2264-455c-b6f4-2cf029fd7def"],
Cell[42152, 1115, 210, 3, 37, "Output", "ExpressionUUID" -> \
"563ea988-18f8-4958-a33d-ff58a3cfdbdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42399, 1123, 352, 9, 37, "Input", "ExpressionUUID" -> \
"aab03e6c-16b2-4569-9abe-2ac4bc0bdc61"],
Cell[42754, 1134, 215, 4, 37, "Output", "ExpressionUUID" -> \
"59e3b012-8b44-4926-9539-fc21946f1423"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43006, 1143, 466, 11, 62, "Input", "ExpressionUUID" -> \
"11d36e85-fcb6-4ddd-8410-8000e84eed63"],
Cell[43475, 1156, 249, 6, 37, "Output", "ExpressionUUID" -> \
"fc1dbd46-a234-43cd-9f23-0d0eafce6c99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43761, 1167, 466, 11, 62, "Input", "ExpressionUUID" -> \
"332f50ea-92ee-44fd-a06c-2c5cd696e74b"],
Cell[44230, 1180, 249, 6, 37, "Output", "ExpressionUUID" -> \
"4aa03fa7-5743-4064-90a2-c56d80298ca1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44516, 1191, 460, 12, 86, "Input", "ExpressionUUID" -> \
"28c1ee3f-169e-470d-9f2b-3dbba4b777a9"],
Cell[44979, 1205, 212, 4, 37, "Output", "ExpressionUUID" -> \
"c6627c21-bf2c-4047-a029-3f87738d6cb5"]
}, Open  ]],
Cell[45206, 1212, 200, 3, 40, "Text", "ExpressionUUID" -> \
"c6dd73c7-76a0-471e-8d5c-982d0e3855c6"],
Cell[CellGroupData[{
Cell[45431, 1219, 269, 7, 37, "Input", "ExpressionUUID" -> \
"9985b93d-6d34-40ed-a61a-cebaa8a39457"],
Cell[45703, 1228, 330, 6, 37, "Output", "ExpressionUUID" -> \
"7a20f40f-e531-4f25-bf06-47f9c2f2354d"]
}, Open  ]],
Cell[46048, 1237, 186, 3, 40, "Text", "ExpressionUUID" -> \
"d0a0c5fc-78c3-4f00-b2d8-698fdb23ce1c"],
Cell[CellGroupData[{
Cell[46259, 1244, 344, 8, 37, "Input", "ExpressionUUID" -> \
"0bf1d187-8a2e-49b7-a186-25c2f8d7140c"],
Cell[46606, 1254, 188, 3, 37, "Output", "ExpressionUUID" -> \
"b657a4da-fdb1-497b-95b6-f3d4f952b9bf"]
}, Open  ]],
Cell[46809, 1260, 391, 8, 68, "Text", "ExpressionUUID" -> \
"5b2da926-4e51-45c9-86a9-c8d31f5c6aab"],
Cell[CellGroupData[{
Cell[47225, 1272, 205, 4, 37, "Input", "ExpressionUUID" -> \
"a061dcd8-1912-42f4-8236-7d4a98e51509"],
Cell[47433, 1278, 333, 6, 37, "Output", "ExpressionUUID" -> \
"65555511-8db8-46c1-a191-7c45415f209d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47803, 1289, 242, 5, 37, "Input", "ExpressionUUID" -> \
"886ab161-55af-4059-8126-291aaf0c60aa"],
Cell[48048, 1296, 192, 3, 37, "Output", "ExpressionUUID" -> \
"2ce46aec-5875-4fe0-93ea-f05872253461"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48277, 1304, 226, 5, 37, "Input", "ExpressionUUID" -> \
"2410d6e8-2b0f-4299-b776-d84a9273210b"],
Cell[48506, 1311, 715, 11, 62, "Output", "ExpressionUUID" -> \
"0426c63d-4a5c-422c-8d93-8199f56d728f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49258, 1327, 294, 7, 62, "Input", "ExpressionUUID" -> \
"a2b8f5bb-4a20-4428-b6d5-d0ec447ca447"],
Cell[49555, 1336, 250, 6, 37, "Output", "ExpressionUUID" -> \
"c71f2c14-d7ac-4aff-925f-5df2c1b3b6d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49842, 1347, 294, 7, 62, "Input", "ExpressionUUID" -> \
"39406239-b9c8-4cc2-ad02-6e87e1856858"],
Cell[50139, 1356, 304, 8, 37, "Output", "ExpressionUUID" -> \
"0c0de2f8-e1ef-412b-92df-fe0127bc8c7e"]
}, Open  ]],
Cell[50458, 1367, 359, 8, 68, "Text", "ExpressionUUID" -> \
"7128c5c2-63eb-407c-9a98-56d6fec78cbb"],
Cell[CellGroupData[{
Cell[50842, 1379, 359, 9, 62, "Input", "ExpressionUUID" -> \
"c4608d16-8a97-46fe-8896-cd1e41db4e71"],
Cell[51204, 1390, 352, 7, 37, "Output", "ExpressionUUID" -> \
"ca3ed9d3-4293-41a0-ab33-e06636801e43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51593, 1402, 402, 10, 62, "Input", "ExpressionUUID" -> \
"af199ccd-b1b3-4375-8d33-ca8b4da8b799"],
Cell[51998, 1414, 195, 3, 37, "Output", "ExpressionUUID" -> \
"361872ea-deb6-49f7-882f-92dabe1fe510"]
}, Open  ]],
Cell[52208, 1420, 235, 6, 40, "Text", "ExpressionUUID" -> \
"c6ca7304-bb78-4e8b-8508-b18e389bce98"],
Cell[CellGroupData[{
Cell[52468, 1430, 409, 9, 62, "Input", "ExpressionUUID" -> \
"fa3bef8a-bd21-4675-b04b-61aa68b3c1e1"],
Cell[52880, 1441, 352, 7, 37, "Output", "ExpressionUUID" -> \
"db1eb0eb-ae9f-49c5-a1e2-34deb30fd3c5"]
}, Open  ]],
Cell[53247, 1451, 360, 7, 40, "Text", "ExpressionUUID" -> \
"ee735575-275a-449c-9fd1-6da0d2db894d"],
Cell[CellGroupData[{
Cell[53632, 1462, 468, 11, 62, "Input", "ExpressionUUID" -> \
"03f21add-7fce-4efd-9d6f-b0cb40d77a40"],
Cell[54103, 1475, 218, 4, 37, "Output", "ExpressionUUID" -> \
"42497c83-7a7b-4300-bc0f-dd9c99de6afd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[54370, 1485, 161, 3, 105, "Chapter", "ExpressionUUID" -> \
"60f27124-f057-4f9c-a274-f72704f6e623"],
Cell[54534, 1490, 667, 12, 206, "Text", "ExpressionUUID" -> \
"95849297-24bf-46c2-82fb-977b421e636f"],
Cell[CellGroupData[{
Cell[55226, 1506, 263, 7, 37, "Input", "ExpressionUUID" -> \
"a0aedc42-469b-4a50-9084-1e62e2470c66"],
Cell[55492, 1515, 266, 6, 37, "Output", "ExpressionUUID" -> \
"87281f16-92d4-48a0-b269-3a4df157ea2a"]
}, Open  ]],
Cell[55773, 1524, 494, 9, 178, "Text", "ExpressionUUID" -> \
"23630771-50c9-4b53-ab11-b3fe8802cfcc"],
Cell[CellGroupData[{
Cell[56292, 1537, 353, 9, 37, "Input", "ExpressionUUID" -> \
"6c4e7757-118c-43b7-8e53-b409558e66fa"],
Cell[56648, 1548, 255, 5, 37, "Output", "ExpressionUUID" -> \
"5bcf8c9c-0151-481e-9a3b-23d011d309cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56940, 1558, 415, 11, 62, "Input", "ExpressionUUID" -> \
"40768d08-930a-4196-a0b7-d77ba0a4145f"],
Cell[57358, 1571, 270, 5, 37, "Output", "ExpressionUUID" -> \
"e266e01a-e9ff-4281-b759-f4112522e376"]
}, Open  ]],
Cell[57643, 1579, 383, 8, 96, "Text", "ExpressionUUID" -> \
"2a108525-4152-4793-a45a-39d5414267ef"],
Cell[CellGroupData[{
Cell[58051, 1591, 428, 11, 62, "Input", "ExpressionUUID" -> \
"05a75915-5d81-4b23-bb99-4cdd48eb79bf"],
Cell[58482, 1604, 306, 7, 37, "Output", "ExpressionUUID" -> \
"de2f44a9-6174-4b71-aa43-ec73487120aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58825, 1616, 605, 17, 86, "Input", "ExpressionUUID" -> \
"f973aba2-39a9-4275-a7a9-21de28168295"],
Cell[59433, 1635, 416, 11, 37, "Output", "ExpressionUUID" -> \
"812a735d-0169-4eac-b5fe-efa763373b5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59886, 1651, 621, 18, 62, "Input", "ExpressionUUID" -> \
"ea89a69e-adff-4d7e-b371-89e46de34a0a"],
Cell[60510, 1671, 232, 5, 37, "Output", "ExpressionUUID" -> \
"3a0411e5-f4fa-4fb9-9721-83596e40b9fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60779, 1681, 189, 4, 37, "Input", "ExpressionUUID" -> \
"f58b13c5-fc7c-421b-8ae4-18ec07e7c804"],
Cell[60971, 1687, 309, 7, 37, "Output", "ExpressionUUID" -> \
"d81f75d9-d9a0-4197-ae98-65e5246e4be2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61317, 1699, 345, 9, 37, "Input", "ExpressionUUID" -> \
"15042344-7b70-47cd-8635-041e7e0be0b8"],
Cell[61665, 1710, 207, 4, 37, "Output", "ExpressionUUID" -> \
"df2ffc33-2bdd-49fc-a9f4-fa9597ab461d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61909, 1719, 351, 9, 37, "Input", "ExpressionUUID" -> \
"156ba887-b3ef-4e32-a6ba-908c7b03a153"],
Cell[62263, 1730, 178, 3, 37, "Output", "ExpressionUUID" -> \
"422a6a06-d672-476f-a65c-8071c7b9e123"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62478, 1738, 432, 12, 62, "Input", "ExpressionUUID" -> \
"13166a2e-8db5-4228-9f60-4d40ef17dbc7"],
Cell[62913, 1752, 255, 5, 37, "Output", "ExpressionUUID" -> \
"1ed8f8e0-d4a1-4070-835b-b567000d3e33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63205, 1762, 348, 10, 37, "Input", "ExpressionUUID" -> \
"c528848e-a53c-4b1e-85f6-fce2e142a5f5"],
Cell[63556, 1774, 181, 3, 37, "Output", "ExpressionUUID" -> \
"df85e9ad-16b6-465c-af6f-d134a6c91b3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63774, 1782, 351, 9, 37, "Input", "ExpressionUUID" -> \
"5ec1636c-0cae-45e2-97ad-68221256ebe2"],
Cell[64128, 1793, 179, 3, 37, "Output", "ExpressionUUID" -> \
"2b8ffece-cfca-4dc7-960c-4f4d668b289c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64344, 1801, 219, 5, 37, "Input", "ExpressionUUID" -> \
"9e96abaa-0f78-4a6c-b7d8-0cf201d14972"],
Cell[64566, 1808, 180, 3, 37, "Output", "ExpressionUUID" -> \
"40f7ad8b-ab36-4927-950b-b86b94445844"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64783, 1816, 323, 8, 37, "Input", "ExpressionUUID" -> \
"66a7b646-cb12-4ba5-8ddf-4dec5999ec52"],
Cell[65109, 1826, 330, 8, 37, "Output", "ExpressionUUID" -> \
"f39b615f-308f-4afb-99c3-f35a1db9184e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65476, 1839, 322, 8, 37, "Input", "ExpressionUUID" -> \
"384238c9-5036-4288-895a-0d30f7c6c413"],
Cell[65801, 1849, 328, 8, 37, "Output", "ExpressionUUID" -> \
"a19b5901-1d90-4a6f-b8e9-a2c1d6b9ade0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66166, 1862, 448, 13, 37, "Input", "ExpressionUUID" -> \
"33910216-3e81-431a-a38e-e2890aef2bfb"],
Cell[66617, 1877, 232, 5, 37, "Output", "ExpressionUUID" -> \
"0ae93d62-f68e-47ea-a4c3-3f3cb4cb0c7c"]
}, Open  ]],
Cell[66864, 1885, 156, 3, 40, "Text", "ExpressionUUID" -> \
"2828a095-50f8-43c5-a0fb-be991a2326ba"],
Cell[CellGroupData[{
Cell[67045, 1892, 472, 14, 37, "Input", "ExpressionUUID" -> \
"cd9104ef-fe22-4d20-ad6a-2e9c9ea957e5"],
Cell[67520, 1908, 176, 3, 37, "Output", "ExpressionUUID" -> \
"430ef6d8-2017-471d-a9fc-eea06f56d184"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67733, 1916, 474, 14, 37, "Input", "ExpressionUUID" -> \
"a057bb35-a788-478f-9df6-6b013d403a2a"],
Cell[68210, 1932, 189, 3, 37, "Output", "ExpressionUUID" -> \
"7e039e4a-2ee9-4921-81b0-22154d98dada"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68436, 1940, 609, 18, 62, "Input", "ExpressionUUID" -> \
"d2e6367a-c315-43d2-a2ab-657f2fc138bb"],
Cell[69048, 1960, 201, 4, 37, "Output", "ExpressionUUID" -> \
"3b66791e-6e2a-4688-9ae4-5675ceb3d0ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69286, 1969, 685, 18, 62, "Input", "ExpressionUUID" -> \
"c46a22a3-2f45-4420-98e3-6c7abf016427"],
Cell[69974, 1989, 200, 4, 37, "Output", "ExpressionUUID" -> \
"9fadc749-33b0-4ad8-8524-f2708532be71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70211, 1998, 572, 15, 62, "Input", "ExpressionUUID" -> \
"f7eddaa0-4132-4d52-b97f-7585c5c86b18"],
Cell[70786, 2015, 218, 4, 37, "Output", "ExpressionUUID" -> \
"990f5c46-1f81-45bd-b6a8-1a001cbd4eb6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71041, 2024, 465, 14, 37, "Input", "ExpressionUUID" -> \
"61740371-f185-444a-bddf-bcf065da2923"],
Cell[71509, 2040, 235, 5, 37, "Output", "ExpressionUUID" -> \
"b5dc7e97-897a-4852-bb68-a85b83ca7d9d"]
}, Open  ]],
Cell[71759, 2048, 453, 13, 62, "Input", "ExpressionUUID" -> \
"7a10110f-42e5-4882-b2e3-0cdefd997817"],
Cell[CellGroupData[{
Cell[72237, 2065, 463, 12, 86, "Input", "ExpressionUUID" -> \
"f7399b56-72a5-40fe-bc4d-3cffbd93bdaf"],
Cell[72703, 2079, 312, 7, 37, "Output", "ExpressionUUID" -> \
"615d6c2a-19ba-4ae5-993e-a9e0fbdb1c5a"]
}, Open  ]],
Cell[73030, 2089, 319, 9, 37, "Input", "ExpressionUUID" -> \
"17b05099-e380-4d8d-bf66-1c40a112c1e4"],
Cell[CellGroupData[{
Cell[73374, 2102, 379, 10, 37, "Input", "ExpressionUUID" -> \
"4726cee0-967d-46fb-ab94-61b673c16a09"],
Cell[73756, 2114, 386, 8, 37, "Output", "ExpressionUUID" -> \
"e6d2f815-9120-4a99-8a92-95b97070929a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74179, 2127, 367, 10, 37, "Input", "ExpressionUUID" -> \
"121aec8d-e927-4c74-bc6b-62619d9aefd9"],
Cell[74549, 2139, 267, 6, 37, "Output", "ExpressionUUID" -> \
"16e06aa7-9344-4f9c-90aa-1ceab737c480"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74853, 2150, 341, 9, 37, "Input", "ExpressionUUID" -> \
"45497e0a-1bdf-47be-840c-05569ec3b68b"],
Cell[75197, 2161, 293, 7, 37, "Output", "ExpressionUUID" -> \
"fcf7ff49-12ec-4569-8456-971b606372b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75527, 2173, 468, 11, 62, "Input", "ExpressionUUID" -> \
"ddb37545-5ff0-49bc-89d1-7ee4716b4c8e"],
Cell[75998, 2186, 306, 6, 37, "Output", "ExpressionUUID" -> \
"6dfcbe3e-465e-41e7-8fb2-d02b7b9382b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76341, 2197, 281, 7, 37, "Input", "ExpressionUUID" -> \
"8b2e8d55-9e77-4d9d-a492-0de038d0fe27"],
Cell[76625, 2206, 253, 5, 37, "Output", "ExpressionUUID" -> \
"fd279945-ff5a-462d-b5a2-56ee4caa2e82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76915, 2216, 400, 10, 62, "Input", "ExpressionUUID" -> \
"c6cf689e-af24-478d-a655-9acd16016435"],
Cell[77318, 2228, 255, 5, 37, "Output", "ExpressionUUID" -> \
"cb474279-314b-485d-bca6-82e17442ecc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77610, 2238, 356, 10, 37, "Input", "ExpressionUUID" -> \
"98e1ad60-b5e6-4ed3-acd7-2fac38e676c1"],
Cell[77969, 2250, 241, 5, 37, "Output", "ExpressionUUID" -> \
"a246a589-570d-43d0-a9ba-8bbf0775ac18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78247, 2260, 224, 5, 37, "Input", "ExpressionUUID" -> \
"65190e17-9a96-4074-b51a-a06def6272bb"],
Cell[78474, 2267, 423, 8, 62, "Output", "ExpressionUUID" -> \
"47cf8fd2-21f9-4911-a066-9416bf5a6b2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78934, 2280, 504, 15, 62, "Input", "ExpressionUUID" -> \
"bcfbca03-3861-4d44-8956-bcf6a38a9a3e"],
Cell[79441, 2297, 393, 8, 37, "Output", "ExpressionUUID" -> \
"bdc9fd82-7ed6-412f-88d8-c65a8baf6817"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79871, 2310, 395, 10, 62, "Input", "ExpressionUUID" -> \
"f728d6d6-e54b-405c-8cfd-affa227a921d"],
Cell[80269, 2322, 232, 5, 37, "Output", "ExpressionUUID" -> \
"ac8c61c0-8df3-46eb-85ba-826c3c03b650"]
}, Open  ]],
Cell[80516, 2330, 169, 3, 40, "Text", "ExpressionUUID" -> \
"c1d59209-95be-4e98-9efb-63c8cc16a741"],
Cell[CellGroupData[{
Cell[80710, 2337, 368, 10, 62, "Input", "ExpressionUUID" -> \
"7220b72a-7d00-4396-a20f-af187c354c35"],
Cell[81081, 2349, 362, 8, 37, "Output", "ExpressionUUID" -> \
"debd843c-159d-4e8e-b753-83ae353f292d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81480, 2362, 267, 6, 37, "Input", "ExpressionUUID" -> \
"28ffa0a9-6276-4c7c-b34b-6ea77c7665a6"],
Cell[81750, 2370, 341, 8, 37, "Output", "ExpressionUUID" -> \
"a82b6922-c5ab-4009-afcb-88e71008931d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82128, 2383, 216, 5, 37, "Input", "ExpressionUUID" -> \
"d768ac44-436d-4ea4-ae4a-14aa993af858"],
Cell[82347, 2390, 1386, 38, 293, "Output", "ExpressionUUID" -> \
"039f3c83-42f3-48cb-886e-cba53ba4fc5c"]
}, Open  ]],
Cell[83748, 2431, 166, 3, 40, "Text", "ExpressionUUID" -> \
"451adfce-08e5-4f02-bf45-f723a8e3139c"],
Cell[CellGroupData[{
Cell[83939, 2438, 200, 4, 37, "Input", "ExpressionUUID" -> \
"f5472c69-bd49-477e-8b6f-96d7e79c7819"],
Cell[84142, 2444, 1380, 37, 293, "Output", "ExpressionUUID" -> \
"1f55947e-5d36-4d4e-adca-2a7175ca9db4"]
}, Open  ]],
Cell[85537, 2484, 165, 3, 40, "Text", "ExpressionUUID" -> \
"83eaf475-fc47-4212-b0cd-5c3fee18931a"],
Cell[CellGroupData[{
Cell[85727, 2491, 411, 12, 62, "Input", "ExpressionUUID" -> \
"9a44ba5a-2a6e-4d3d-bc5a-d9a76a297b8b"],
Cell[86141, 2505, 536, 15, 37, "Output", "ExpressionUUID" -> \
"ce70c4e2-d58d-422d-ba51-3b7d2d8326d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86714, 2525, 411, 12, 62, "Input", "ExpressionUUID" -> \
"9f209797-86d5-4031-b0ed-80a7a8bc516b"],
Cell[87128, 2539, 647, 18, 62, "Output", "ExpressionUUID" -> \
"d2adfa47-db16-46e6-8f36-cb36f87cb799"]
}, Open  ]],
Cell[87790, 2560, 197, 3, 40, "Text", "ExpressionUUID" -> \
"3998bbbe-994b-4aba-913d-b7306acd32a3"],
Cell[CellGroupData[{
Cell[88012, 2567, 283, 6, 37, "Input", "ExpressionUUID" -> \
"06a73449-67be-447c-a1f2-e57e68522a96"],
Cell[88298, 2575, 35156, 968, 2798, "Output", "ExpressionUUID" -> \
"5cdbe5fd-2a42-4d8f-80bc-15e69cdb2271"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123491, 3548, 537, 15, 86, "Input", "ExpressionUUID" -> \
"7ce66f05-c969-43de-bcf3-a3108dfdd53d"],
Cell[124031, 3565, 271, 7, 54, "Output", "ExpressionUUID" -> \
"47b23177-ab91-4a17-9263-ebf3fa6cebae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124339, 3577, 714, 17, 110, "Input", "ExpressionUUID" -> \
"8eec41c7-b5b0-49cc-aa71-66407767c29e"],
Cell[125056, 3596, 244, 5, 37, "Output", "ExpressionUUID" -> \
"6bc4ac85-6e91-48d0-a7fd-395bf16d0791"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125337, 3606, 473, 13, 62, "Input", "ExpressionUUID" -> \
"eff775ea-1f68-48cc-b9fd-33fe01f9b7e6"],
Cell[125813, 3621, 422, 9, 37, "Output", "ExpressionUUID" -> \
"2ce57fe7-ce63-40b6-a309-2511799e8787"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126272, 3635, 567, 15, 86, "Input", "ExpressionUUID" -> \
"be247507-8031-4408-8536-35972af24bd8"],
Cell[126842, 3652, 208, 4, 37, "Output", "ExpressionUUID" -> \
"a14875a3-72e4-4895-8591-42daeeca12c7"]
}, Open  ]],
Cell[127065, 3659, 177, 3, 40, "Text", "ExpressionUUID" -> \
"7d7a7b29-689c-4dc0-9db6-96c4a7ad2817"],
Cell[CellGroupData[{
Cell[127267, 3666, 221, 5, 37, "Input", "ExpressionUUID" -> \
"86898dd7-22e1-4800-8832-d5543bf90864"],
Cell[127491, 3673, 1341, 19, 182, "Output", "ExpressionUUID" -> \
"3cdfe33d-51cc-4145-b778-847fb6df0e6d"]
}, Open  ]],
Cell[128847, 3695, 261, 6, 68, "Text", "ExpressionUUID" -> \
"1c5eabf5-02f8-4440-be42-7c5729a476f5"],
Cell[CellGroupData[{
Cell[129133, 3705, 312, 7, 37, "Input", "ExpressionUUID" -> \
"768dbebc-1f5d-422e-8797-df66d07354a9"],
Cell[129448, 3714, 1844, 46, 288, "Output", "ExpressionUUID" -> \
"660390ce-182e-4c8c-8252-c86ef765f905"]
}, Open  ]],
Cell[131307, 3763, 215, 5, 40, "Text", "ExpressionUUID" -> \
"ab954d14-49c8-4cb3-856d-e436472bb05e"],
Cell[CellGroupData[{
Cell[131547, 3772, 357, 7, 37, "Input", "ExpressionUUID" -> \
"551751f6-13f5-4d9f-bd4b-1bed640ed359"],
Cell[131907, 3781, 4135, 116, 287, "Output", "ExpressionUUID" -> \
"1950f8ce-9656-4fa9-9c90-201cc7dffe9c"]
}, Open  ]],
Cell[136057, 3900, 182, 3, 40, "Text", "ExpressionUUID" -> \
"6642c1fc-4fc2-4fb6-99ea-2f11aa52a211"],
Cell[CellGroupData[{
Cell[136264, 3907, 267, 7, 37, "Input", "ExpressionUUID" -> \
"d860fea0-3597-44bb-a25f-21e1ddadbbb6"],
Cell[136534, 3916, 7972, 210, 145, "Output", "ExpressionUUID" -> \
"9d3abf68-7f5c-4ae2-aa69-bf6a234e7fb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144543, 4131, 545, 15, 62, "Input", "ExpressionUUID" -> \
"276d9446-2ce8-4efc-8a7f-05091805ff68"],
Cell[145091, 4148, 207, 4, 37, "Output", "ExpressionUUID" -> \
"3598621d-a354-4f8b-97b8-68624a551f8f"]
}, Open  ]],
Cell[145313, 4155, 182, 3, 40, "Text", "ExpressionUUID" -> \
"8c6ffb4d-1950-462b-b50f-68672f31c47a"],
Cell[CellGroupData[{
Cell[145520, 4162, 357, 9, 37, "Input", "ExpressionUUID" -> \
"a7b5bfa5-4e15-47f1-8028-c41b348ba64b"],
Cell[145880, 4173, 102633, 1688, 449, "Output", "ExpressionUUID" -> \
"4bbc567c-a935-46c3-91e7-8b673b1f39f1"]
}, Open  ]],
Cell[248528, 5864, 172, 3, 40, "Text", "ExpressionUUID" -> \
"1114e16e-3a04-491d-91c0-75b865f21ce0"],
Cell[CellGroupData[{
Cell[248725, 5871, 430, 11, 37, "Input", "ExpressionUUID" -> \
"4b369036-3306-4e83-bac8-48b4442d8eb2"],
Cell[249158, 5884, 102554, 1687, 138, "Output", "ExpressionUUID" -> \
"36d6377f-5207-45ee-b857-8135e55e42eb"]
}, Open  ]],
Cell[351727, 7574, 558, 10, 234, "Text", "ExpressionUUID" -> \
"a50b41f3-4770-4545-9ced-fd3ad134f6ea"],
Cell[CellGroupData[{
Cell[352310, 7588, 307, 8, 37, "Input", "ExpressionUUID" -> \
"04a31bb9-36c8-47a5-97b8-47c3dd3edaa8"],
Cell[352620, 7598, 307604, 5053, 437, "Output", "ExpressionUUID" -> \
"8d09324f-c4b8-4ff7-af4c-595c4a526da2"]
}, Open  ]],
Cell[660239, 12654, 171, 3, 40, "Text", "ExpressionUUID" -> \
"9b510a2b-89cf-4591-917a-6d60b11ae3c9"],
Cell[CellGroupData[{
Cell[660435, 12661, 443, 11, 62, "Input", "ExpressionUUID" -> \
"e55d664e-eb1b-4b4c-8f6a-00e0b9d2a423"],
Cell[660881, 12674, 435, 9, 62, "Output", "ExpressionUUID" -> \
"f22494af-9307-4600-aebc-8ac0ddea50be"]
}, Open  ]],
Cell[661331, 12686, 177, 3, 40, "Text", "ExpressionUUID" -> \
"aa5add7a-4ea1-4b41-8569-eeb8334ef8a3"],
Cell[CellGroupData[{
Cell[661533, 12693, 463, 13, 62, "Input", "ExpressionUUID" -> \
"4e71d43f-8799-4741-a9f7-b0d53a6e0133"],
Cell[661999, 12708, 57252, 948, 364, "Output", "ExpressionUUID" -> \
"a334220c-f088-4e20-84a4-50683153bd1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719288, 13661, 487, 13, 62, "Input", "ExpressionUUID" -> \
"9ea695e2-c6e8-44c7-856a-4009bcb58f14"],
Cell[719778, 13676, 8245, 136, 364, "Output", "ExpressionUUID" -> \
"24f983e7-ab50-49c8-aad2-6f3354637a02"]
}, Open  ]],
Cell[728038, 13815, 298, 6, 96, "Text", "ExpressionUUID" -> \
"493801ca-ea6f-4f13-839c-03aba0f8386d"],
Cell[CellGroupData[{
Cell[728361, 13825, 396, 10, 62, "Input", "ExpressionUUID" -> \
"b7383045-8085-4b7e-b4d3-6050dd016641"],
Cell[728760, 13837, 1359, 21, 182, "Output", "ExpressionUUID" -> \
"5fe8f9e6-799d-433d-9b5a-a183220e08ae"]
}, Open  ]],
Cell[730134, 13861, 489, 9, 178, "Text", "ExpressionUUID" -> \
"b20f8110-22ea-44be-80d4-35f498c7982a"],
Cell[CellGroupData[{
Cell[730648, 13874, 445, 12, 62, "Input", "ExpressionUUID" -> \
"15f5d775-0402-4ed0-9c84-f1347df136c7"],
Cell[731096, 13888, 191, 3, 37, "Output", "ExpressionUUID" -> \
"860bb9cc-97cd-4fa5-8f31-fdd25510487a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[731324, 13896, 445, 12, 62, "Input", "ExpressionUUID" -> \
"09fe8772-26db-48bb-812b-9f0bb6709962"],
Cell[731772, 13910, 193, 3, 37, "Output", "ExpressionUUID" -> \
"7b0f6219-a06f-4de4-be12-4590b46cab97"]
}, Open  ]],
Cell[731980, 13916, 337, 7, 68, "Text", "ExpressionUUID" -> \
"2e81139b-cf26-475e-8497-002f239a25aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[732354, 13928, 226, 4, 88, "Chapter", "ExpressionUUID" -> \
"734f4b63-ed57-4ee7-b544-515491017a60"],
Cell[732583, 13934, 665, 11, 234, "Text", "ExpressionUUID" -> \
"b1a37dc1-864f-4f68-9bf5-d233d8e476b3"],
Cell[CellGroupData[{
Cell[733273, 13949, 279, 6, 37, "Input", "ExpressionUUID" -> \
"998cafb9-aef9-4634-bf3e-2f3b40ed3710"],
Cell[733555, 13957, 207, 4, 37, "Output", "ExpressionUUID" -> \
"deff9dc9-e5f4-488a-8560-474b101234df"]
}, Open  ]],
Cell[733777, 13964, 402, 8, 123, "Text", "ExpressionUUID" -> \
"c2f453aa-5c50-4cc8-a122-41ad3aa63a15"],
Cell[734182, 13974, 276, 6, 37, "Input", "ExpressionUUID" -> \
"3b0767a3-3ef6-425d-abfe-631b5a2d639e"],
Cell[734461, 13982, 369, 7, 123, "Text", "ExpressionUUID" -> \
"3e82b080-495c-4543-83fe-af00d23ea35a"],
Cell[CellGroupData[{
Cell[734855, 13993, 131, 3, 37, "Input", "ExpressionUUID" -> \
"349e55b1-a1a5-4555-a965-baf2fe0b9f0b"],
Cell[734989, 13998, 180, 3, 37, "Output", "ExpressionUUID" -> \
"7132fa8e-e4d4-4e84-b342-eb7c940c0171"]
}, Open  ]],
Cell[CellGroupData[{
Cell[735206, 14006, 126, 2, 37, "Input", "ExpressionUUID" -> \
"9c20f7db-5f56-48a1-b275-024e652f07f2"],
Cell[735335, 14010, 180, 3, 37, "Output", "ExpressionUUID" -> \
"2bd1519d-c6a6-4313-984c-01384cabd118"]
}, Open  ]],
Cell[735530, 14016, 357, 7, 96, "Text", "ExpressionUUID" -> \
"dd4d693d-6a73-484c-b0f4-41e81a05e553"],
Cell[CellGroupData[{
Cell[735912, 14027, 129, 3, 37, "Input", "ExpressionUUID" -> \
"b15177ba-0737-444f-a772-30ba7a05e34d"],
Cell[736044, 14032, 178, 3, 37, "Output", "ExpressionUUID" -> \
"106db6b0-e1c7-41e9-97bb-3c4383d47820"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736259, 14040, 129, 3, 37, "Input", "ExpressionUUID" -> \
"1a195af1-f427-4545-ba0e-b70ee510e36c"],
Cell[736391, 14045, 178, 3, 37, "Output", "ExpressionUUID" -> \
"698186d0-11e1-426c-8332-b3e64e1214c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736606, 14053, 155, 3, 37, "Input", "ExpressionUUID" -> \
"b85676e1-e56c-437f-9c89-fdd97dd719c0"],
Cell[736764, 14058, 174, 3, 37, "Output", "ExpressionUUID" -> \
"82a61a1c-c641-414a-8963-07a6b01229dd"]
}, Open  ]],
Cell[736953, 14064, 498, 9, 178, "Text", "ExpressionUUID" -> \
"99535d2d-dd23-480c-a9b4-70da2323d0cd"],
Cell[737454, 14075, 430, 12, 37, "Input", "ExpressionUUID" -> \
"7b18fdde-5b61-432c-84da-82f46902f5d8"],
Cell[CellGroupData[{
Cell[737909, 14091, 187, 4, 37, "Input", "ExpressionUUID" -> \
"ff25dafa-3817-497a-ac75-90160e9f899c"],
Cell[738099, 14097, 183, 3, 37, "Output", "ExpressionUUID" -> \
"4be76122-0f01-443b-aeca-e15aee1e414b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[738319, 14105, 189, 4, 37, "Input", "ExpressionUUID" -> \
"f5ed6d15-31ae-4b00-921c-34519674bf41"],
Cell[738511, 14111, 182, 3, 37, "Output", "ExpressionUUID" -> \
"99afe649-b7a1-4664-bf33-fe5c53f60d96"]
}, Open  ]],
Cell[738708, 14117, 954, 15, 344, "Text", "ExpressionUUID" -> \
"4365fbe4-7d16-48bf-bcd5-d751a139bcb2"],
Cell[739665, 14134, 435, 12, 37, "Input", "ExpressionUUID" -> \
"41d4c7d3-42eb-4960-a650-d2b59d3eeded"],
Cell[CellGroupData[{
Cell[740125, 14150, 186, 4, 37, "Input", "ExpressionUUID" -> \
"21d77b46-58b9-4d81-80a4-4cf6a89bf8c5"],
Cell[740314, 14156, 184, 3, 37, "Output", "ExpressionUUID" -> \
"7ab94e57-3165-46f2-b2dd-27c7b547dc80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740535, 14164, 188, 4, 37, "Input", "ExpressionUUID" -> \
"a8024081-98f8-46ff-92a2-44f999840e0e"],
Cell[740726, 14170, 179, 3, 37, "Output", "ExpressionUUID" -> \
"28063e76-a399-4250-b090-421956e7372f"]
}, Open  ]],
Cell[740920, 14176, 402, 8, 123, "Text", "ExpressionUUID" -> \
"bcfac329-0930-42d4-8c0a-b84941db1daa"],
Cell[CellGroupData[{
Cell[741347, 14188, 186, 4, 37, "Input", "ExpressionUUID" -> \
"f1818e01-e044-4a2f-aede-e7a4b0d757cd"],
Cell[741536, 14194, 339, 9, 37, "Output", "ExpressionUUID" -> \
"5b2cd141-018d-4176-a891-a17b5c964744"]
}, Open  ]],
Cell[741890, 14206, 575, 10, 151, "Text", "ExpressionUUID" -> \
"3fcd43b3-0845-4ae6-892a-d1b4a6fda166"],
Cell[742468, 14218, 442, 12, 62, "Input", "ExpressionUUID" -> \
"a1f99efe-ebdb-4716-a014-fe8f92f07f66"],
Cell[742913, 14232, 202, 3, 40, "Text", "ExpressionUUID" -> \
"41062c3d-1f6d-497e-baab-00d524022ecb"],
Cell[743118, 14237, 443, 12, 62, "Input", "ExpressionUUID" -> \
"735f6d19-b9a1-4cf5-b822-5240d8e2ee59"],
Cell[743564, 14251, 231, 5, 68, "Text", "ExpressionUUID" -> \
"08f855f1-a947-4b50-ad5a-c59ca6e61e51"],
Cell[CellGroupData[{
Cell[743820, 14260, 191, 4, 37, "Input", "ExpressionUUID" -> \
"cbf452a3-62ca-4e3b-9fb8-2d965a13b0f0"],
Cell[744014, 14266, 177, 2, 37, "Output", "ExpressionUUID" -> \
"efe4df83-e2f5-4af1-a917-66f319c52e77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[744228, 14273, 374, 10, 62, "Input", "ExpressionUUID" -> \
"55b0f276-5f77-4e9c-85ec-0fbd5a9562aa"],
Cell[744605, 14285, 230, 5, 37, "Output", "ExpressionUUID" -> \
"2859d7a2-64b5-42e4-828d-4e25beddcc62"]
}, Open  ]],
Cell[744850, 14293, 244, 4, 40, "Text", "ExpressionUUID" -> \
"72f889b9-0ba7-40e9-a439-c2d348d85fe8"],
Cell[745097, 14299, 781, 20, 86, "Input", "ExpressionUUID" -> \
"aeefbbda-9e22-4f8b-b398-b46b1ed127a6"],
Cell[745881, 14321, 426, 8, 68, "Text", "ExpressionUUID" -> \
"49fe866a-21c8-457d-863a-df029dba0f98"],
Cell[CellGroupData[{
Cell[746332, 14333, 185, 4, 37, "Input", "ExpressionUUID" -> \
"7cf80978-4b22-4165-a6eb-6527f90ea754"],
Cell[746520, 14339, 248, 4, 37, "Output", "ExpressionUUID" -> \
"9bb342ce-4e58-4d6e-843e-d604aaf7882a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[746805, 14348, 193, 4, 37, "Input", "ExpressionUUID" -> \
"04374b9d-2a00-409e-81a2-ec0d79bded11"],
Cell[747001, 14354, 229, 4, 37, "Output", "ExpressionUUID" -> \
"0dfb3788-c6dc-4968-a12f-07fd3aa0fe04"]
}, Open  ]],
Cell[747245, 14361, 425, 8, 151, "Text", "ExpressionUUID" -> \
"275a08de-f7e6-4a86-8b57-d050af40eb13"],
Cell[CellGroupData[{
Cell[747695, 14373, 193, 4, 37, "Input", "ExpressionUUID" -> \
"ad13f4b2-7e99-431b-8ac3-ad1869d81287"],
Cell[747891, 14379, 176, 3, 37, "Output", "ExpressionUUID" -> \
"7d6506f1-a8f9-4649-aa3a-177d1dd64d4c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[748116, 14388, 155, 3, 88, "Chapter", "ExpressionUUID" -> \
"74584ab2-0b3a-4602-a241-9f089ab1e074"],
Cell[748274, 14393, 262, 6, 68, "Text", "ExpressionUUID" -> \
"1f54280f-60af-4782-a0e6-7ce41bd1d0af"],
Cell[CellGroupData[{
Cell[748561, 14403, 368, 9, 62, "Input", "ExpressionUUID" -> \
"57e00963-6324-49a4-82a5-b7912a91d244"],
Cell[748932, 14414, 184, 3, 37, "Output", "ExpressionUUID" -> \
"a090c919-b98a-4f8d-ba3a-a5adff2d12be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[749153, 14422, 419, 10, 62, "Input", "ExpressionUUID" -> \
"b28658ec-431d-43aa-9ade-ee36e9003431"],
Cell[749575, 14434, 183, 3, 37, "Output", "ExpressionUUID" -> \
"1210dbbd-aedf-4550-89e8-86e89dec3318"]
}, Open  ]],
Cell[CellGroupData[{
Cell[749795, 14442, 350, 10, 37, "Input", "ExpressionUUID" -> \
"d0e99d9e-5191-4879-bed9-85d7dac60315"],
Cell[750148, 14454, 181, 3, 37, "Output", "ExpressionUUID" -> \
"d0402adb-1f98-4778-be2b-09816c9b6b16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[750366, 14462, 198, 4, 37, "Input", "ExpressionUUID" -> \
"0cca396c-5ac2-4a30-902d-4e5816fe1229"],
Cell[750567, 14468, 176, 2, 37, "Output", "ExpressionUUID" -> \
"399c402c-059c-4784-b20c-75a3833b9fee"]
}, Open  ]],
Cell[750758, 14473, 268, 6, 68, "Text", "ExpressionUUID" -> \
"2d0e8492-7309-4345-b672-7050e7206d10"],
Cell[CellGroupData[{
Cell[751051, 14483, 246, 6, 37, "Input", "ExpressionUUID" -> \
"61ebe47a-e8d4-47c4-a0f0-f42511b2d871"],
Cell[751300, 14491, 368, 11, 54, "Output", "ExpressionUUID" -> \
"7cfbce69-56ac-4cbd-aa1d-16017b51fe96"]
}, Open  ]],
Cell[751683, 14505, 269, 6, 40, "Text", "ExpressionUUID" -> \
"df883bad-44e2-4cd5-b3ed-1880166af6cf"],
Cell[751955, 14513, 399, 10, 62, "Input", "ExpressionUUID" -> \
"5fe3fd59-85c0-42cf-95d6-0d7cb472771e"],
Cell[CellGroupData[{
Cell[752379, 14527, 190, 4, 37, "Input", "ExpressionUUID" -> \
"5ec805cc-efe2-4e24-946e-12263d569a2b"],
Cell[752572, 14533, 180, 3, 37, "Output", "ExpressionUUID" -> \
"67b324c5-bdec-463d-889a-07db127232f1"]
}, Open  ]],
Cell[752767, 14539, 270, 6, 68, "Text", "ExpressionUUID" -> \
"c6f1ee27-8df5-4603-a5b4-f03791c66c33"],
Cell[753040, 14547, 1350, 34, 230, "Input", "ExpressionUUID" -> \
"a9b02cdf-6315-47f9-a38d-8fd9671d3d52"],
Cell[CellGroupData[{
Cell[754415, 14585, 209, 5, 37, "Input", "ExpressionUUID" -> \
"4bf79cb0-077d-4e28-8bf9-5a569d0b4eba"],
Cell[754627, 14592, 176, 3, 37, "Output", "ExpressionUUID" -> \
"97c159e4-8014-445f-9863-61761257c046"]
}, Open  ]],
Cell[754818, 14598, 615, 10, 178, "Text", "ExpressionUUID" -> \
"506f568d-ea8a-45b3-baa7-b9133b1440cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[755470, 14613, 160, 3, 88, "Chapter", "ExpressionUUID" -> \
"53090ffc-4a41-4a7a-8dff-9c8bb5d3fc0d"],
Cell[CellGroupData[{
Cell[755655, 14620, 195, 5, 37, "Input", "ExpressionUUID" -> \
"85594803-3edd-4f15-8e32-d6cccecdc2f8"],
Cell[755853, 14627, 244, 6, 37, "Output", "ExpressionUUID" -> \
"f401da39-1e7d-4835-b296-94f592918164"]
}, Open  ]],
Cell[756112, 14636, 646, 11, 234, "Text", "ExpressionUUID" -> \
"4a333716-4fd5-468e-9302-2f6315f46164"],
Cell[CellGroupData[{
Cell[756783, 14651, 307, 8, 37, "Input", "ExpressionUUID" -> \
"3b17a43a-a231-4aff-8537-d46a94d787ff"],
Cell[757093, 14661, 320, 8, 53, "Output", "ExpressionUUID" -> \
"f68283d8-0c35-4145-864c-e39c5171bf0d"]
}, Open  ]],
Cell[757428, 14672, 306, 6, 96, "Text", "ExpressionUUID" -> \
"1a71b002-45a7-4134-a591-009b26660366"]
}, Open  ]],
Cell[CellGroupData[{
Cell[757771, 14683, 164, 3, 88, "Chapter", "ExpressionUUID" -> \
"3263a6bb-008a-4e28-b991-2061b0dab59f"],
Cell[CellGroupData[{
Cell[757960, 14690, 463, 12, 62, "Input", "ExpressionUUID" -> \
"485cfd84-1db1-4945-aec3-da01992615fd"],
Cell[758426, 14704, 177, 3, 37, "Output", "ExpressionUUID" -> \
"540793b3-01cf-4a53-9c66-db93bf5499be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[758640, 14712, 473, 13, 37, "Input", "ExpressionUUID" -> \
"bf80e959-3b34-47b5-bb0c-a79e4e80555f"],
Cell[759116, 14727, 196, 4, 53, "Output", "ExpressionUUID" -> \
"0fbc1526-415f-49b8-a8f1-3a324e3fb955"]
}, Open  ]],
Cell[CellGroupData[{
Cell[759349, 14736, 540, 15, 62, "Input", "ExpressionUUID" -> \
"01154ee3-a7d7-49f3-a216-b19df811e4f1"],
Cell[759892, 14753, 214, 4, 37, "Output", "ExpressionUUID" -> \
"afd66d99-602d-4d6a-94d6-3cc303e23c8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[760143, 14762, 404, 10, 62, "Input", "ExpressionUUID" -> \
"5afaf0e2-2fae-4724-a71c-c5527bdead29"],
Cell[760550, 14774, 195, 3, 37, "Output", "ExpressionUUID" -> \
"9ae9a3d5-8023-4c99-803c-88366ae378ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[760782, 14782, 185, 4, 37, "Input", "ExpressionUUID" -> \
"70b83350-6307-4838-b5f7-a400ee4ff75e"],
Cell[760970, 14788, 216, 5, 40, "Output", "ExpressionUUID" -> \
"a5ce720f-225f-4ef0-be18-f0e4ef4107b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[761223, 14798, 356, 9, 37, "Input", "ExpressionUUID" -> \
"289ae783-a788-4e1a-8c1d-c0826d70bb07"],
Cell[761582, 14809, 221, 4, 37, "Output", "ExpressionUUID" -> \
"c3f9dc67-6997-495c-8198-946253cb7f80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[761852, 14819, 156, 3, 88, "Chapter", "ExpressionUUID" -> \
"4d6de9db-b5e6-463d-823f-e0369d740068"],
Cell[762011, 14824, 514, 10, 178, "Text", "ExpressionUUID" -> \
"04370413-2122-4d12-ae24-378a2d30215e"],
Cell[762528, 14836, 174, 3, 40, "Text", "ExpressionUUID" -> \
"d1bab50e-f4e9-4171-bfd2-08dc62b57ee9"],
Cell[762705, 14841, 572, 17, 62, "Input", "ExpressionUUID" -> \
"e17a0d16-a7bc-4acc-9cb7-06f1571a3024"],
Cell[CellGroupData[{
Cell[763302, 14862, 316, 8, 37, "Input", "ExpressionUUID" -> \
"ba537d6e-899a-43e2-af09-24bc151edf82"],
Cell[763621, 14872, 175, 3, 37, "Output", "ExpressionUUID" -> \
"358b1080-4dac-4ad5-ad32-7695c1d941a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[763833, 14880, 319, 8, 37, "Input", "ExpressionUUID" -> \
"7c5376d2-1db7-4774-8b64-2c9bc0f77d1e"],
Cell[764155, 14890, 257, 6, 37, "Output", "ExpressionUUID" -> \
"d2ed4d9f-70e6-44ae-aa4c-0d52ba6c3583"]
}, Open  ]],
Cell[764427, 14899, 294, 6, 96, "Text", "ExpressionUUID" -> \
"ed4aee34-6519-436a-83fc-71fb05a6e534"],
Cell[CellGroupData[{
Cell[764746, 14909, 207, 5, 37, "Input", "ExpressionUUID" -> \
"d5aaaad5-5fce-49bd-8a83-c1357ad73c48"],
Cell[764956, 14916, 178, 3, 37, "Output", "ExpressionUUID" -> \
"9662e33e-43e8-4a6d-964b-090449dcc32d"]
}, Open  ]],
Cell[765149, 14922, 294, 7, 68, "Text", "ExpressionUUID" -> \
"266d3831-40fa-4e60-954d-2034d0477cda"],
Cell[765446, 14931, 942, 24, 158, "Input", "ExpressionUUID" -> \
"d3fd54be-eadc-4c6d-8396-08d95cccc660"],
Cell[CellGroupData[{
Cell[766413, 14959, 189, 4, 37, "Input", "ExpressionUUID" -> \
"27443589-c8d3-4f69-88da-f21a2c984236"],
Cell[766605, 14965, 213, 4, 37, "Output", "ExpressionUUID" -> \
"e636f38e-b972-47f7-bd88-77177cb26e7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[766855, 14974, 333, 9, 37, "Input", "ExpressionUUID" -> \
"726fdce1-d06e-48e9-8efb-09f051c1d3d4"],
Cell[767191, 14985, 182, 3, 37, "Output", "ExpressionUUID" -> \
"89af9a22-c439-42fa-9988-23d5340029aa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[767422, 14994, 161, 3, 88, "Chapter", "ExpressionUUID" -> \
"d7b0ce69-994e-4dff-a187-ed84879cbf05"],
Cell[767586, 14999, 290, 6, 68, "Text", "ExpressionUUID" -> \
"1cd37c6a-a593-4aca-8642-19194221affa"],
Cell[767879, 15007, 528, 15, 62, "Input", "ExpressionUUID" -> \
"055b099c-6f13-4448-a13d-2f5dee5f0307"],
Cell[768410, 15024, 497, 10, 123, "Text", "ExpressionUUID" -> \
"cf34feff-de8b-47b4-8d97-0a2d9afd60ad"],
Cell[CellGroupData[{
Cell[768932, 15038, 246, 6, 37, "Input", "ExpressionUUID" -> \
"7cb151f3-6709-4017-a55f-cf66538587e8"],
Cell[769181, 15046, 552, 14, 37, "Output", "ExpressionUUID" -> \
"7f737b67-1299-41ae-90c4-c52072123b0c"]
}, Open  ]],
Cell[769748, 15063, 225, 5, 68, "Text", "ExpressionUUID" -> \
"c7ea44f5-6ab6-4f66-a453-901eef5dd713"],
Cell[CellGroupData[{
Cell[769998, 15072, 484, 13, 62, "Input", "ExpressionUUID" -> \
"856aa528-e8cb-42b7-866a-343bc3bef0f5"],
Cell[770485, 15087, 243, 5, 37, "Output", "ExpressionUUID" -> \
"a108ba93-b094-4f79-9f45-7300b2423ac6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[770765, 15097, 504, 14, 62, "Input", "ExpressionUUID" -> \
"550263a0-4fd8-4357-9f54-c0188c8dce24"],
Cell[771272, 15113, 186, 3, 37, "Output", "ExpressionUUID" -> \
"7725db20-df73-4b62-9eb4-b1d88c2ceaef"]
}, Open  ]],
Cell[771473, 15119, 251, 6, 68, "Text", "ExpressionUUID" -> \
"adb6266e-bd93-4ff8-9729-4b2dad22a524"],
Cell[CellGroupData[{
Cell[771749, 15129, 467, 10, 62, "Input", "ExpressionUUID" -> \
"6084c523-ddbf-4fcf-bded-615f276de2ff"],
Cell[772219, 15141, 483, 10, 37, "Output", "ExpressionUUID" -> \
"ce88e174-3224-4c6f-befe-d43d23f91013"]
}, Open  ]],
Cell[772717, 15154, 510, 9, 151, "Text", "ExpressionUUID" -> \
"f1343662-7f04-4674-bbef-a20a5c6db8f5"],
Cell[CellGroupData[{
Cell[773252, 15167, 328, 8, 37, "Input", "ExpressionUUID" -> \
"ea89f89d-ccbd-4cd0-be12-002c7d9500ee"],
Cell[773583, 15177, 187, 3, 37, "Output", "ExpressionUUID" -> \
"380142da-5b54-4d86-ba76-a55c8469104a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[773807, 15185, 441, 10, 62, "Input", "ExpressionUUID" -> \
"323ea79e-9e1d-4b97-8a4f-8737cf098d3a"],
Cell[774251, 15197, 286, 5, 37, "Output", "ExpressionUUID" -> \
"8ea661d5-72dc-4b53-a4ed-b0894b1b472f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[774574, 15207, 356, 9, 37, "Input", "ExpressionUUID" -> \
"863f9c49-60ff-4d42-923a-1280caa069f7"],
Cell[774933, 15218, 186, 3, 37, "Output", "ExpressionUUID" -> \
"8a2c3efc-cc31-4154-96ad-61d567ad69c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[775156, 15226, 159, 3, 37, "Input", "ExpressionUUID" -> \
"dd3e728d-e420-472a-a560-4ffcbb24ccb8"],
Cell[775318, 15231, 543, 11, 37, "Output", "ExpressionUUID" -> \
"baa2bc4e-894d-4cf2-8301-0bacad473f0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[775898, 15247, 330, 8, 37, "Input", "ExpressionUUID" -> \
"ba5a2b84-06c0-4966-bd6c-0dad6159a985"],
Cell[776231, 15257, 476, 10, 37, "Output", "ExpressionUUID" -> \
"8048a74f-32d8-4b32-8eae-5bf8730a3ad8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[776744, 15272, 289, 7, 37, "Input", "ExpressionUUID" -> \
"6252db37-a50a-43a8-bd04-c2d8213d7289"],
Cell[777036, 15281, 314, 6, 37, "Output", "ExpressionUUID" -> \
"f4eb5922-c334-4e5f-b46c-1c9c2fd3f734"]
}, Open  ]],
Cell[CellGroupData[{
Cell[777387, 15292, 295, 7, 37, "Input", "ExpressionUUID" -> \
"3446041e-99f4-478b-bd92-e54af59a9dfd"],
Cell[777685, 15301, 298, 6, 37, "Output", "ExpressionUUID" -> \
"6b26f1bd-ddb6-4a56-9847-b623cf095e7a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[778032, 15313, 164, 3, 88, "Chapter", "ExpressionUUID" -> \
"109a9c98-fe69-4e87-ae5a-d1f8a2e7f336"],
Cell[778199, 15318, 1054, 16, 399, "Text", "ExpressionUUID" -> \
"a28ebfd2-d05d-4266-ad5c-36e0ad348353"],
Cell[CellGroupData[{
Cell[779278, 15338, 187, 4, 37, "Input", "ExpressionUUID" -> \
"70f5a2b0-7e86-40be-bf4e-6c44b9a80fa6"],
Cell[779468, 15344, 425, 8, 62, "Output", "ExpressionUUID" -> \
"a05369c2-846d-464b-8d84-0af096ef6c1f"]
}, Open  ]],
Cell[779908, 15355, 189, 3, 40, "Text", "ExpressionUUID" -> \
"6581a016-b8ff-43c4-bb19-bf05b02eafb4"],
Cell[CellGroupData[{
Cell[780122, 15362, 586, 15, 86, "Input", "ExpressionUUID" -> \
"0510f576-c994-4dc7-a7a4-73f4fa65c12e"],
Cell[780711, 15379, 314, 7, 37, "Output", "ExpressionUUID" -> \
"0520ca6f-d1b6-44f3-8b1c-10d6adfcf1a7"]
}, Open  ]],
Cell[781040, 15389, 213, 5, 40, "Text", "ExpressionUUID" -> \
"e11c832a-3e48-4706-a21c-1b9138d32793"],
Cell[CellGroupData[{
Cell[781278, 15398, 831, 19, 110, "Input", "ExpressionUUID" -> \
"b50dbaa7-e6bf-4510-bf15-6e487898daee"],
Cell[782112, 15419, 311, 6, 37, "Output", "ExpressionUUID" -> \
"c657141a-f516-4ba0-90c3-7c327e6bed90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[782460, 15430, 263, 6, 37, "Input", "ExpressionUUID" -> \
"64538edf-fe36-4b64-8af2-2cbd5874080a"],
Cell[782726, 15438, 311, 7, 37, "Output", "ExpressionUUID" -> \
"7dc95a5e-ad51-422c-ba52-2dff118b1b81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[783074, 15450, 394, 11, 62, "Input", "ExpressionUUID" -> \
"0f2f8bea-ab20-4544-afac-4a4eeb992320"],
Cell[783471, 15463, 254, 5, 37, "Output", "ExpressionUUID" -> \
"ecf03c19-fd56-41cc-95e1-a50e2fcde8ed"]
}, Open  ]],
Cell[783740, 15471, 200, 3, 40, "Text", "ExpressionUUID" -> \
"7be3e930-054a-436d-a16c-1e53492b3aae"],
Cell[CellGroupData[{
Cell[783965, 15478, 249, 6, 37, "Input", "ExpressionUUID" -> \
"f608295a-4896-490b-81c3-b35e1ec0ad21"],
Cell[784217, 15486, 251, 5, 37, "Output", "ExpressionUUID" -> \
"5e955d75-4f16-45f4-8455-ad2da1564ca7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[784505, 15496, 487, 14, 37, "Input", "ExpressionUUID" -> \
"dca34c9a-cf3d-43b1-8974-ebbab99c5d1d"],
Cell[784995, 15512, 898, 26, 62, "Output", "ExpressionUUID" -> \
"873e5b1d-5480-40cc-8d60-5ba1725e593b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[785930, 15543, 919, 25, 110, "Input", "ExpressionUUID" -> \
"fc9d087a-d84c-4ea8-b0be-bfc08605b3e1"],
Cell[786852, 15570, 534, 16, 37, "Output", "ExpressionUUID" -> \
"4b899891-149e-47ca-9fb8-7d8d8689b439"]
}, Open  ]],
Cell[787401, 15589, 819, 13, 316, "Text", "ExpressionUUID" -> \
"03fc675a-3fe6-42cb-861c-2fb4bd21b0e7"],
Cell[788223, 15604, 167, 3, 40, "Text", "ExpressionUUID" -> \
"5f4987f3-678e-42f6-b3bd-7fc79903f388"],
Cell[CellGroupData[{
Cell[788415, 15611, 939, 26, 86, "Input", "ExpressionUUID" -> \
"70065843-7bcb-41d0-80ca-0b39ccda8fcf"],
Cell[789357, 15639, 272, 6, 37, "Output", "ExpressionUUID" -> \
"d4452f5b-bd08-4103-a5af-a8e58ca9e8b0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[789678, 15651, 206, 4, 88, "Chapter", "ExpressionUUID" -> \
"5b265e4d-8891-4298-84bb-4f7fc26d457d"],
Cell[789887, 15657, 351, 7, 68, "Text", "ExpressionUUID" -> \
"dec093e4-342a-4740-a610-0610abd0830d"],
Cell[CellGroupData[{
Cell[790263, 15668, 510, 12, 86, "Input", "ExpressionUUID" -> \
"a8f6ea7a-9dd2-4a98-9daf-1b026951929d"],
Cell[790776, 15682, 314, 7, 37, "Output", "ExpressionUUID" -> \
"7d172f4c-b39b-493e-bbf9-09ffb95d94cc"]
}, Open  ]],
Cell[791105, 15692, 604, 11, 178, "Text", "ExpressionUUID" -> \
"b44e6676-a34f-4f40-9d33-51ba70716665"],
Cell[CellGroupData[{
Cell[791734, 15707, 544, 14, 41, "Input", "ExpressionUUID" -> \
"82b6015c-fcd9-43d7-b01c-2d5dc27a7a69"],
Cell[792281, 15723, 369, 9, 41, "Output", "ExpressionUUID" -> \
"bdcf7307-fc66-413e-8bf9-d8a24eddad8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[792687, 15737, 1039, 26, 91, "Input", "ExpressionUUID" -> \
"c2f98157-a31e-4149-8a94-ad2625055617"],
Cell[793729, 15765, 294, 6, 41, "Output", "ExpressionUUID" -> \
"9403d21a-fba6-41d6-bce2-73f959cc01e3"]
}, Open  ]],
Cell[794038, 15774, 307, 7, 68, "Text", "ExpressionUUID" -> \
"f39284ae-65be-4071-9b6c-51499b1b3b6b"],
Cell[CellGroupData[{
Cell[794370, 15785, 325, 8, 37, "Input", "ExpressionUUID" -> \
"a993f750-ffae-4eb7-b293-ec253cf65d21"],
Cell[794698, 15795, 390, 8, 37, "Output", "ExpressionUUID" -> \
"3470aae8-f292-4d51-842d-309e9f4ec50b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[795125, 15808, 419, 11, 86, "Input", "ExpressionUUID" -> \
"c24d5cd2-0b96-4515-b620-9724bcdcc541"],
Cell[795547, 15821, 414, 8, 37, "Output", "ExpressionUUID" -> \
"95804fb1-086d-482e-8b7d-fe5f0ff51e18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[795998, 15834, 331, 8, 62, "Input", "ExpressionUUID" -> \
"52afa83e-0c7d-4222-9ae9-8bce3d3e883f"],
Cell[796332, 15844, 253, 5, 37, "Output", "ExpressionUUID" -> \
"b18ff227-169b-48ea-8f54-abac69201867"]
}, Open  ]],
Cell[CellGroupData[{
Cell[796622, 15854, 450, 12, 62, "Input", "ExpressionUUID" -> \
"1d23af36-9e76-4035-999c-c5e619c86e5d"],
Cell[797075, 15868, 354, 7, 37, "Output", "ExpressionUUID" -> \
"b257f7ee-d1a1-42a1-a4f3-9530b49205f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797466, 15880, 552, 15, 86, "Input", "ExpressionUUID" -> \
"eddcadc6-a512-4428-8946-f71d30a577f0"],
Cell[798021, 15897, 619, 18, 37, "Output", "ExpressionUUID" -> \
"b15511a5-11d7-4806-ad4f-07ecd4e722ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798677, 15920, 374, 10, 37, "Input", "ExpressionUUID" -> \
"9bf08129-c1d3-49d5-92ce-3b83ba15403a"],
Cell[799054, 15932, 380, 11, 37, "Output", "ExpressionUUID" -> \
"38f1b6d4-ad33-40c3-84f6-317886bc2bb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[799471, 15948, 380, 9, 62, "Input", "ExpressionUUID" -> \
"467f7256-18d5-4fc8-83a1-64e23cc2c530"],
Cell[799854, 15959, 410, 11, 37, "Output", "ExpressionUUID" -> \
"c21bfbc0-42fc-484e-9316-7b174c3af252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[800301, 15975, 471, 11, 62, "Input", "ExpressionUUID" -> \
"e574d242-ddf3-419b-bda2-2b1c63db33f8"],
Cell[800775, 15988, 235, 5, 37, "Output", "ExpressionUUID" -> \
"a5a77a2f-166f-4ac1-8b75-2f1ceb6b7707"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[801059, 15999, 162, 3, 88, "Chapter", "ExpressionUUID" -> \
"8bd1dcf3-a337-4f02-b744-909a2cdbd069"],
Cell[801224, 16004, 637, 11, 206, "Text", "ExpressionUUID" -> \
"408c55c0-124b-4199-81c0-b01a26076607"],
Cell[CellGroupData[{
Cell[801886, 16019, 168, 3, 37, "Input", "ExpressionUUID" -> \
"1aefe7d6-4b6f-453d-b3e2-8e0493f2d62b"],
Cell[802057, 16024, 311, 7, 37, "Output", "ExpressionUUID" -> \
"61c0db44-4113-44f5-8d8a-a7264dbc95f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[802405, 16036, 303, 7, 37, "Input", "ExpressionUUID" -> \
"c5af9d1a-34dd-44ad-8efa-cfeb032819ab"],
Cell[802711, 16045, 309, 7, 37, "Output", "ExpressionUUID" -> \
"deb10cf9-520a-4951-b552-9e8a009b7ad5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[803057, 16057, 636, 15, 110, "Input", "ExpressionUUID" -> \
"696eb959-2cef-41be-854d-9f8d9948dc8b"],
Cell[803696, 16074, 313, 7, 37, "Output", "ExpressionUUID" -> \
"ecf86192-749a-4694-91ce-8f0475c7d49c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[804046, 16086, 466, 12, 62, "Input", "ExpressionUUID" -> \
"99f76dbd-7990-4e52-aba5-54dabaad31c0"],
Cell[804515, 16100, 521, 10, 62, "Output", "ExpressionUUID" -> \
"16a82037-1714-4ee8-b3bd-94e71fe51ae3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805073, 16115, 434, 10, 62, "Input", "ExpressionUUID" -> \
"30c3a623-bfc7-4f6d-b649-4dad22a21a1f"],
Cell[805510, 16127, 494, 9, 62, "Output", "ExpressionUUID" -> \
"bffd44fd-01a3-4b88-b25c-d42b12d9f57b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806041, 16141, 428, 12, 62, "Input", "ExpressionUUID" -> \
"9491dd8a-8f8c-4057-aa82-38331c860dc9"],
Cell[806472, 16155, 396, 9, 37, "Output", "ExpressionUUID" -> \
"07438640-de78-4dfe-bb13-cd7bff95795e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806905, 16169, 622, 15, 86, "Input", "ExpressionUUID" -> \
"8086e217-fc7d-4d23-b793-11d9f8d739c9"],
Cell[807530, 16186, 367, 8, 37, "Output", "ExpressionUUID" -> \
"ac2c57f5-3468-4cbd-b2f7-22e644233637"]
}, Open  ]],
Cell[CellGroupData[{
Cell[807934, 16199, 486, 13, 62, "Input", "ExpressionUUID" -> \
"6106bb61-68a4-4213-8746-3c86f382f767"],
Cell[808423, 16214, 463, 8, 62, "Output", "ExpressionUUID" -> \
"331f9334-09a9-403d-b6c6-883c7a15dca8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[808923, 16227, 429, 12, 37, "Input", "ExpressionUUID" -> \
"5dd90000-dd82-40d9-bd57-a952e46a72ab"],
Cell[809355, 16241, 1270, 42, 86, "Output", "ExpressionUUID" -> \
"123fddd1-67d3-4709-a613-8073bb1d50d1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[810674, 16289, 153, 3, 88, "Chapter", "ExpressionUUID" -> \
"1a4e8ba4-ce56-47aa-b09d-bcdb9c6e61a7"],
Cell[810830, 16294, 247, 6, 68, "Text", "ExpressionUUID" -> \
"3494af42-4a2e-4e18-8ede-7eace2937b1f"],
Cell[811080, 16302, 336, 7, 68, "Text", "ExpressionUUID" -> \
"b4a7be38-9de7-4623-8155-872563fa0555"],
Cell[CellGroupData[{
Cell[811441, 16313, 496, 12, 37, "Input", "ExpressionUUID" -> \
"2b74d0bb-e9bb-4096-b81d-e18a27bbf8b3"],
Cell[811940, 16327, 2396, 46, 144, "Output", "ExpressionUUID" -> \
"14912cd0-6652-4a16-a17e-2840d00430db"]
}, Open  ]],
Cell[814351, 16376, 159, 3, 40, "Text", "ExpressionUUID" -> \
"1cdf802d-0b5b-4632-ad72-edef1a891267"],
Cell[CellGroupData[{
Cell[814535, 16383, 620, 15, 62, "Input", "ExpressionUUID" -> \
"31afa417-e090-4ad8-8e38-37d1215d9c4f"],
Cell[815158, 16400, 2519, 48, 144, "Output", "ExpressionUUID" -> \
"e2487f2e-7e7f-460d-a2df-ed2499484901"]
}, Open  ]],
Cell[CellGroupData[{
Cell[817714, 16453, 862, 21, 86, "Input", "ExpressionUUID" -> \
"fdeea770-0393-4b3b-b4a6-c800d21e657e"],
Cell[818579, 16476, 3251, 70, 153, "Output", "ExpressionUUID" -> \
"4150392a-1aa7-45ab-94ee-52a2f64b5956"]
}, Open  ]],
Cell[821845, 16549, 310, 8, 37, "Input", "ExpressionUUID" -> \
"05c5122e-d2a0-4165-99e7-20935a0079a0"],
Cell[CellGroupData[{
Cell[822180, 16561, 788, 21, 86, "Input", "ExpressionUUID" -> \
"7f1f4bbd-995a-4a4d-97cf-25fe1192e794"],
Cell[822971, 16584, 2720, 58, 404, "Output", "ExpressionUUID" -> \
"b818f423-4c3b-44a7-9f20-e46d524e3f13"]
}, Open  ]],
Cell[825706, 16645, 345, 7, 96, "Text", "ExpressionUUID" -> \
"d3481413-6f94-48d1-a466-95d4b365aa97"],
Cell[CellGroupData[{
Cell[826076, 16656, 686, 15, 86, "Input", "ExpressionUUID" -> \
"6652ab1b-75a8-4668-9f6b-7137ae3af635"],
Cell[826765, 16673, 2922, 62, 169, "Output", "ExpressionUUID" -> \
"fc00d902-548f-4fcc-9987-2c0ce7b1a2db"]
}, Open  ]],
Cell[829702, 16738, 872, 15, 352, "Text", "ExpressionUUID" -> \
"c1f776f9-f17f-47af-842c-ad5bcd18ffec"],
Cell[830577, 16755, 498, 10, 206, "Text", "ExpressionUUID" -> \
"54b2009f-7e8a-4aeb-aac8-1cc7f3e18330"],
Cell[831078, 16767, 1075, 23, 134, "Input", "ExpressionUUID" -> \
"8086408f-f6ec-4af5-be6d-bcfcfe27fc66"],
Cell[CellGroupData[{
Cell[832178, 16794, 277, 6, 37, "Input", "ExpressionUUID" -> \
"63e66c3b-f18a-49b3-a2b7-6ba928936f8d"],
Cell[832458, 16802, 4196, 89, 127, "Output", "ExpressionUUID" -> \
"87b32fd9-9760-4dd5-9161-9ef0027c766f"]
}, Open  ]],
Cell[836669, 16894, 227, 5, 68, "Text", "ExpressionUUID" -> \
"45825643-c387-418c-b00b-b6f09001abbc"],
Cell[CellGroupData[{
Cell[836921, 16903, 332, 8, 62, "Input", "ExpressionUUID" -> \
"dda5b267-fbbf-4154-97b8-ccb59af0ecc8"],
Cell[837256, 16913, 334, 6, 37, "Output", "ExpressionUUID" -> \
"3d62ae83-fe30-4ad5-9f15-6bd385fcde09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[837627, 16924, 482, 11, 86, "Input", "ExpressionUUID" -> \
"aaf28768-6564-4759-809d-eb0d636368ee"],
Cell[838112, 16937, 4354, 89, 127, "Output", "ExpressionUUID" -> \
"ddde12c6-012d-4013-97fb-175edbcc52d1"]
}, Open  ]],
Cell[842481, 17029, 675, 12, 206, "Text", "ExpressionUUID" -> \
"c450af82-ca74-4196-bb17-a7396fda1b8a"]
}, Open  ]]
}, Open  ]]
}
]
*)

