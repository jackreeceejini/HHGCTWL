(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    891184,      18365]
NotebookOptionsPosition[    831466,      16924]
NotebookOutlinePosition[    831837,      16940]
CellTagsIndexPosition[    831794,      16937]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
HitchHikers Guide to Computational Thinking With the Wolfram Language 
By, Jackreece Ejini\
\>", "Title",
 CellChangeTimes->{{3.7109966899173326`*^9, 3.7109967120799217`*^9}, {
  3.711003018086796*^9, 
  3.711003043201936*^9}},ExpressionUUID->"7c3dbef3-8a63-485f-b543-\
fc7190da5a74"],

Cell[TextData[StyleBox["\n\n\n\nThis is just another introduction to \
programming and computational thinking with the Wolfram Language. The Wolfram \
Language is the most sophisticated programming Language out there for doing \
all kinds of things programming. Despite its sophistication it is also one of \
the easiest programming language you can learn, my journey to becoming a \
computer programmer was a horrendous one because I did not know of the \
Wolfram Language. I know of many people that have abandoned thier dreams of \
becoming computer programmers because after foraying into the jungle of low \
level languages like C or \[OpenCurlyDoubleQuote]Object Oriented\
\[CloseCurlyDoubleQuote] languages like C++ and JAVA, they still did not know \
what programming was all about, they could follow through with the syntax of \
these langauges, that just requires having a good memory, but when it came to \
applying what they have learnt, expressing the solutions to real life \
problems computationally, they found it very had to make that abstract leap \
that is most essential to thinking about things computationally. The book AN \
ELEMENTARY INTRODUCTION TO THE WOLFRAM LANGUAGE, by STEPHEN WOLFRAM, is the \
best introduction to the WOLFRAM LANGUAGE and computational thinking I have \
ever come accross, and best of all the online version of this book is free! \
you can also get a hard copy for a fair price. This work is merely to \
supplement that but I strongly recommend that you read that to strengthen \
your foundations. This book is also necessary as a refresher that will \
strengthen the concepts you learnt in that book further. \n\nThe WOLFRAM \
LANGUAGE is unique because you can do things that will be ridiculously \
difficult to do in order languages in a very short period of time, being a \
knowledge based language, most of the kinds of data you would have to obtain \
from other sources, most times at a great price, are already available for \
instant computation within the language itself, this is perfect for most \
beginers because obtaining high quality curated data is not usually an easy \
endeavour.\n\nAlthough you can literally build piece of software completely \
with the WOLFRAM language alone, in the real world you might have to work at \
other software projects, sometimes because of the job you might happen to be \
involved in, I STRONGLY RECOMMEND THAT IF YOU HAVE NOT PROGRAMMMED A COMPUTER \
BEFORE YOU SHOULD PLEASE START YOUR JOURNEY WITH THE WOLFRAM LANGUAGE. I \
cannot over emphasize this point, it will save you many horrors, your \
learning rate is going to be near exponential. \n\nThe WOLFRAM LANGUAGE \
provides what we call a NOTEBOOK, personally I call it an interactive \
exploration ground, you input code and you get results instantly, although \
some form on interactive programming is available in python, the WOLFRAM \
NOTEBOOK  environment is the most sophisticate programming education \
environment I have come across, from fancy visualization to the ability to \
tame the errors of beginning programmers. Another advantage to using the \
Wolfram Language is that because it is so high level, we focus more on the \
problem we want to solve and less on the specific details of the language. I \
usually call the Wolfram Language a disciplined kind of English Language \
because it is so clear and direct. The goal of any Wolfram Language \
programmer, like you are about to become is to reach a stage after a fair \
period of practice where you can start thinking directly in the Wolfram \
Language, this is what I call Wolfram Language Enlightenment! \n\nWithout \
further ado, let us dive in to Computational thinking with the Wolfram \
Language.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7109967297973957`*^9, 3.7109977306034737`*^9}, {
  3.7109979860482674`*^9, 3.7109980354913425`*^9}, {3.710999084037817*^9, 
  3.7109992660102377`*^9}, {3.711002992210678*^9, 
  3.7110030109935627`*^9}},ExpressionUUID->"4506d9e4-679f-4218-99c7-\
2df9db597aec"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.710998071821119*^9, 
  3.710998072266555*^9}},ExpressionUUID->"1a4bcd99-2b7d-4fac-8f7b-\
acf730cb1afc"],

Cell[CellGroupData[{

Cell["WHAT DOES A COMPUTER REALLY DO?", "Chapter",
 CellChangeTimes->{{3.7109980997532167`*^9, 
  3.7109981162078075`*^9}},ExpressionUUID->"8ed0e206-5ba5-4164-94fd-\
fc0ec228641f"],

Cell[TextData[StyleBox["Basically:\n1. Performs billions to trillions of \
Calculations per second!\n2. Remembers the results of the calculations and \
sometimes display it!",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.71099812572711*^9, 3.7109982768728657`*^9}, {
  3.7109993044260273`*^9, 
  3.7109993104828463`*^9}},ExpressionUUID->"9fbe5778-9c47-4d08-b51b-\
a055b519420a"],

Cell[TextData[StyleBox["What kinds of calculations can the computer perform\n\
1. There are built-in calculations you can do directly with the Wolfram \
Language \n2. You can also define your own calculations.\n\nComputers cannot \
do anything on their own! Only what you or someone else had tells them to do.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.710998351857495*^9, 
  3.7109984644484*^9}},ExpressionUUID->"731d7d05-7e15-4058-972c-223b762fe5a1"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  StyleBox[
   RowBox[{"A", " ", "basic", " ", "computation"}], "Section"]}]], "Input",
 CellChangeTimes->{{3.7109988218959723`*^9, 
  3.7109988723976493`*^9}},ExpressionUUID->"29339c12-ad70-4687-9e7a-\
61e1e2952d15"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"7", " ", "+", " ", "4"}]], "Input",
 CellChangeTimes->{{3.7109988783150625`*^9, 
  3.710998886544486*^9}},ExpressionUUID->"306400a2-e4f1-4051-bf2e-\
714f7d9732b2"],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{
  3.710998887828206*^9},ExpressionUUID->"20293d44-0db2-44fc-872b-\
c0e7eec5bbed"]
}, Open  ]],

Cell[TextData[{
 StyleBox["To compute anything and view your results in the Wolfram Language, \
you simply open a Notebook and type your computation at the beginning of the \
prompt in what we call a CELL, press SHIFT+ENTER and viola, your results \
appears instantly on the following line, this is basically what we do when we \
are computing in the wolfram language. Go ahead and do this with your Wolfram \
System, a free one is always available online at: ",
  FontFamily->"Comic Sans MS"],
 StyleBox[ButtonBox["WOLFRAM CLOUD",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframcloud.com"], None},
  ButtonNote->"http://www.wolframcloud.com"],
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.710998906728135*^9, 3.710999068287175*^9}, {
  3.7109993307235785`*^9, 3.7109993406579514`*^9}, {3.7109994108968363`*^9, 
  3.7109995395868073`*^9}, {3.7109995762239156`*^9, 
  3.7109995762239156`*^9}},ExpressionUUID->"ef1310ad-5395-41e8-b769-\
34f3dea22989"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius", " ", "=", " ", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"areaOfCircle", " ", "=", " ", 
  RowBox[{"Pi", " ", "*", " ", 
   RowBox[{"radius", "^", "2"}]}]}]}], "Input",
 CellChangeTimes->{{3.71099987678498*^9, 
  3.710999980413125*^9}},ExpressionUUID->"51125039-0900-4662-8dd8-\
bb570df78afd"],

Cell[BoxData[
 RowBox[{"25", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{
  3.710999992478343*^9},ExpressionUUID->"38313433-192c-4d39-a60a-\
199df63c054e"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Suppose we want to calculate the AREA of a circle with radius 5, \
we can remember from school that the formula for the Area of a circle is ",
  FontFamily->"Comic Sans MS"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Pi]r", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontFamily->"Comic Sans MS",ExpressionUUID->
  "104e6ba5-81d8-4e36-9ce2-b99c39ff0600"],
 StyleBox[", in the Wolfram language we assign 5 to the value of radius and \
enter the formula like we do on the second line. Note that I put a semi-colon \
after 5 above. This is to tell the Wolfram language that we do not want to \
see the result of the computation immediately. In the second line we now use \
radius in the computation and assign the output to another variable name \
areaOfCircle. \n\nWhat are variables, they are like names. We could have done \
the above computation like this using the formula directly:",
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.711000014707697*^9, 
  3.711000353157116*^9}},ExpressionUUID->"e734e4d4-a468-4d8a-a130-\
5275c9e869c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Pi", " ", "*", " ", 
  RowBox[{"5", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.711000357057412*^9, 
  3.7110003657192106`*^9}},ExpressionUUID->"91f55f99-7dbb-4892-8b44-\
ce3547186b36"],

Cell[BoxData[
 RowBox[{"25", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{
  3.7110003669536057`*^9},ExpressionUUID->"dabe8734-da8f-4ebb-9506-\
1da00f07080a"]
}, Open  ]],

Cell[TextData[StyleBox["But assigned the value 5 to the variable name radius \
and then the result of our computation to the variable areaOfCircle. Most \
times when computing with the wolfram language we do not bother about naming \
everything just like some of you must have experienced in other programming \
languages. We could just go ahead and enter our computations and get the \
results.\nThe = sign is what we use to set radius to 5 and areaOfCircle to \
the result of the calculation. This is called and assignment. Another new \
thing is the * this is the multiplication sign in the Wolfram language. \
Another way to do multiplication would be to leave a space between two things \
we want to multiply",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110003728230267`*^9, 
  3.711000586100088*^9}},ExpressionUUID->"39ead1e5-8a56-4c1e-bf87-\
6c2b1d250ace"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"34", " ", "56"}]], "Input",
 CellChangeTimes->{{3.7110005898054237`*^9, 
  3.7110005921326523`*^9}},ExpressionUUID->"690b62d7-0d8c-41e3-9cea-\
079461634274"],

Cell[BoxData["1904"], "Output",
 CellChangeTimes->{
  3.7110005934991655`*^9},ExpressionUUID->"311fe9fb-b0b5-4377-91c1-\
8039b3432efb"]
}, Open  ]],

Cell[TextData[{
 StyleBox["The Wolfram language automatically displays the x multiplication \
sign when we input to things separated by a space. Another new thing we \
encounter is the upper caret sign ^ this is how we square things in the \
wolfram language. Above you can see that we are squaring the value of radius. \
There is a beautiful way to input the square of something, we type the thing \
like say radius followed by pressing CTRL + 6, then we get something like \
this ",
  FontFamily->"Comic Sans MS"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["radius", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontFamily->"Comic Sans MS",ExpressionUUID->
  "e4f01613-2911-42c2-a8e7-326f7201a203"],
 StyleBox[", remember to press CTRL + SPACEBAR to return the cursor to its \
default location. You must we wandering were we got the Pi from. It is a \
built in symbol in the Wolfram Language. Unlike having to do something like \
pi = 3.14 like you would do in other languages, we simply type Pi because the \
Wolfram Language already knows what Pi is and we can use it directly in our \
computation. \nUnfortunately the result we get from our computation 25 \[Pi] \
is not what we expected from a calculation of the area of a circle, this is \
because Pi is what we call a symbol in the Wolfram Langauge and the language \
can operate directly on symbolic variables. In the Wolfram language we can do \
things like this:",
  FontFamily->"Comic Sans MS"]
}], "Text",
 CellChangeTimes->{{3.7110005973234463`*^9, 
  3.7110011815823736`*^9}},ExpressionUUID->"33ff5dd5-c95a-426c-ad16-\
565e49672a02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", " ", "=", " ", 
  RowBox[{
   RowBox[{"m", " ", "x"}], " ", "+", " ", "c"}]}]], "Input",
 CellChangeTimes->{{3.7110011832756095`*^9, 
  3.7110011934382567`*^9}},ExpressionUUID->"df7eda82-d099-4a7a-8315-\
5134bc34395e"],

Cell[BoxData[
 RowBox[{"c", "+", 
  RowBox[{"m", " ", "x"}]}]], "Output",
 CellChangeTimes->{
  3.7110011988332443`*^9},ExpressionUUID->"9886bcce-0ea0-4a2a-b6f0-\
346ccbc032c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.7110012050621595`*^9},ExpressionUUID->"b09c1766-acdc-4994-9f2a-\
a5c9fb7e4f86"],

Cell[BoxData[
 RowBox[{"c", "+", 
  RowBox[{"m", " ", "x"}]}]], "Output",
 CellChangeTimes->{
  3.7110012058433924`*^9},ExpressionUUID->"053bd49b-ea53-4346-91ba-\
0db9d1ecc98d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"boy", " "}]], "Input",
 CellChangeTimes->{{3.711001208346587*^9, 
  3.7110012166520634`*^9}},ExpressionUUID->"0a60e1ca-646b-42ab-b56b-\
e65a9184fda5"],

Cell[BoxData["boy"], "Output",
 CellChangeTimes->{
  3.7110012175511475`*^9},ExpressionUUID->"53c8d018-27d4-4752-ae4f-\
1d394edbb7f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["girl"], "Input",
 CellChangeTimes->{{3.7110012184886928`*^9, 
  3.7110012189030833`*^9}},ExpressionUUID->"430c929f-10e6-4ab0-8a5b-\
a830863291a5"],

Cell[BoxData["girl"], "Output",
 CellChangeTimes->{
  3.7110012198328147`*^9},ExpressionUUID->"c017e96d-8809-46ba-b587-\
e1db0b39e805"]
}, Open  ]],

Cell[TextData[StyleBox["These are referred to as symbols in the Wolfram \
Language, you can\[CloseCurlyQuote]t do this in many other languages because \
the language expect that you are trying to define a variable without a value \
and assumes that as an error. This is not a problem in the Wolfram Language. \
Now what do we do with our symbolic result 25 \[Pi] ? In this case we can ask \
for a value",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110012264235764`*^9, 
  3.7110013563555803`*^9}},ExpressionUUID->"a9bb0149-1a65-42d6-910d-\
66c4119e4296"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"25", " ", "\[Pi]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711001359321768*^9, 
  3.7110013741279144`*^9}},ExpressionUUID->"2df8e679-b078-495c-ab34-\
e209cc85e1de"],

Cell[BoxData["78.53981633974483`"], "Output",
 CellChangeTimes->{
  3.7110013749774866`*^9},ExpressionUUID->"20fb45a0-1814-4719-99c0-\
816501a9bdca"]
}, Open  ]],

Cell[TextData[StyleBox["Now this looks like something we can relate to. That\
\[CloseCurlyQuote]s the area of the circle of radius 5, but 5 what? Lets say \
we want to compute for 5 centimeters, we simply say",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.7110014203032427`*^9, 3.7110014544438977`*^9}, {
  3.711001613605915*^9, 
  3.7110016568020515`*^9}},ExpressionUUID->"873471da-2bb2-49e0-802d-\
f00b313aa9cf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius1", " ", "=", " ", 
   RowBox[{"Quantity", "[", 
    RowBox[{"5", ",", "\"\<Centimeters\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"areaOfCircle1", " ", "=", " ", 
   RowBox[{"Pi", "*", 
    SuperscriptBox["radius1", "2"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"answer", " ", "=", " ", 
  RowBox[{"N", "[", "areaOfCircle1", "]"}]}]}], "Input",
 CellChangeTimes->{{3.7110016585754604`*^9, 
  3.711001742830119*^9}},ExpressionUUID->"f2eac72f-c378-443d-a919-\
834e7c4a4c45"],

Cell[BoxData[
 TemplateBox[{"78.53981633974483`",RowBox[{
     SuperscriptBox["\"cm\"", "2"]}],"centimeters squared",SuperscriptBox[
   "\"Centimeters\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.7110017443734937`*^9},ExpressionUUID->"77a194be-c56f-4ffa-9b2e-\
7358e94f22f5"]
}, Open  ]],

Cell[TextData[StyleBox["So what is N[ ], Quantity[ ]? These are built in \
functions in the Wolfram Language. A function is like a machine that does \
things for us, we just have to feed it some input, Later on we will learn how \
to build our kinds of functions that do stuff for us that we want to do but \
are not available in the Wolfram Language. When \
\[OpenCurlyDoubleQuote]calling\[CloseCurlyDoubleQuote] a function we start \
with its name, N or Quantity like in this example, put the beginning [ \
followed by the function \[OpenCurlyDoubleQuote]arguments\
\[CloseCurlyDoubleQuote] followed by a closing ] then our usual SHIFT + \
ENTER. The function then returns its results on the line following the input \
except we put a semi-colon ; after the call. N produces the Numerical \
equivalent of a its argument if one is available and Quantity converts some \
values into certain units. In this case we convert the value 5 to \
Centimeters. \n\nAlthough we can store represent something like the name of a \
person as a Symbol, it is usually better to store it as a STRING.",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.711001777777339*^9, 3.711002128093913*^9}, {
  3.7110030611651154`*^9, 
  3.711003193621363*^9}},ExpressionUUID->"b634790b-45ff-49eb-88cb-\
b129b384db8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstName", " ", "=", " ", "\"\<Neo\>\""}]], "Input",
 CellChangeTimes->{{3.711003198801634*^9, 3.7110032175001445`*^9}, {
  3.7110038582548256`*^9, 
  3.7110038627834005`*^9}},ExpressionUUID->"f70fb48d-99db-43e7-a181-\
fa01ce2a416f"],

Cell[BoxData["\<\"Neo\"\>"], "Output",
 CellChangeTimes->{3.7110032225932565`*^9, 
  3.711003866103057*^9},ExpressionUUID->"286f6d4f-9456-4d41-859c-\
cebe0681a754"]
}, Open  ]],

Cell[TextData[StyleBox["To create a string we start with an opening quote \
\[OpenCurlyDoubleQuote] enter the string and follow it with a closing quote \
\[OpenCurlyDoubleQuote] in this example, we assign the string Neo to the \
variable firstName. ",
 FontFamily->"Comic Sans MS"]], "Text",
 CellChangeTimes->{{3.711003226346699*^9, 3.711003228932578*^9}, {
  3.711003289953065*^9, 3.7110032958591022`*^9}, {3.7110034155504723`*^9, 
  3.7110034242869387`*^9}, {3.7110037761798663`*^9, 3.7110038383012*^9}, {
  3.7110038732330704`*^9, 
  3.711003879708109*^9}},ExpressionUUID->"bcacf8d0-79bd-48a1-ac31-\
c7270e6163a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"surName", " ", "=", " ", "\"\<Anderson\>\""}]], "Input",
 CellChangeTimes->{{3.7110039627061768`*^9, 
  3.7110039752988424`*^9}},ExpressionUUID->"65a3924c-638e-4dfe-af51-\
b94603288588"],

Cell[BoxData["\<\"Anderson\"\>"], "Output",
 CellChangeTimes->{
  3.7110039801790457`*^9},ExpressionUUID->"95f80195-2711-4ac5-ad5b-\
2df1300427a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullName", " ", "=", " ", 
  RowBox[{"firstName", " ", "<>", " ", "surName"}]}]], "Input",
 CellChangeTimes->{{3.7110039838727293`*^9, 
  3.7110039962703176`*^9}},ExpressionUUID->"cbacefb0-18c1-469c-b479-\
928a85cb1821"],

Cell[BoxData["\<\"NeoAnderson\"\>"], "Output",
 CellChangeTimes->{
  3.71100399841164*^9},ExpressionUUID->"e1570b41-daa0-4b55-bf89-d6f490d3fba9"]
}, Open  ]],

Cell["\<\
The less than greater than <> symbol is used to concatenate both the first \
and surnames together, we get a the fullName without spaces in the result. To \
add a space\
\>", "Text",
 CellChangeTimes->{{3.7110040047029753`*^9, 3.71100408740664*^9}, {
  3.711004135665434*^9, 
  3.7110041625053005`*^9}},ExpressionUUID->"f214137c-4c84-4341-ae22-\
5fad06f3b237"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullName", " ", "=", " ", 
  RowBox[{
  "firstName", " ", "<>", " ", "\"\< \>\"", " ", "<>", " ", 
   "surName"}]}]], "Input",
 CellChangeTimes->{{3.711004168056137*^9, 
  3.7110041852133293`*^9}},ExpressionUUID->"29026ca6-b1ac-4655-95b2-\
fc454dbb9611"],

Cell[BoxData["\<\"Neo Anderson\"\>"], "Output",
 CellChangeTimes->{
  3.7110041873601832`*^9},ExpressionUUID->"38695d4e-3cb4-4b80-8461-\
ac38bde307bf"]
}, Open  ]],

Cell["\<\
You guessed right! we concatenate a whitespace character, gotten by merely \
starting the \[OpenCurlyDoubleQuote] pressing space on your keyboard and \
followed with pressing \[OpenCurlyDoubleQuote]. 

Since this is a Hitch Hikers Guide, lets go through some of the kinds of \
functions that you will be using very regularly in the Wolfram Language, \
remember that a Function is merely a machine and with the right arguments, \
stuff it works with, it will produce some output.\
\>", "Text",
 CellChangeTimes->{{3.71100419653611*^9, 3.7110042674068193`*^9}, {
  3.7110045236416407`*^9, 
  3.711004629449978*^9}},ExpressionUUID->"abfdbf88-2c66-4838-ba03-\
f80d3219e221"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quick diving  ...", "Title",
 CellChangeTimes->{{3.711170379420045*^9, 3.7111704708463435`*^9}, {
   3.7111821440058093`*^9, 3.7111821448113303`*^9}, 
   3.711187348448101*^9},ExpressionUUID->"cb6f74ad-97a8-44c3-985f-\
4ad9dcfb4ed0"],

Cell["SUM OF THE FIRST 10 NUMBERS", "Text",
 CellChangeTimes->{{3.7110046446654587`*^9, 
  3.7110046693891325`*^9}},ExpressionUUID->"4d6802d4-bd3a-4433-bd1d-\
f3f21b93e176"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "first", " ", "10", " ", "numbers"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711004673941412*^9, 3.711004695553592*^9}, {
  3.711004749069225*^9, 
  3.7110047510158587`*^9}},ExpressionUUID->"ac989517-71d9-4ba7-b9f8-\
308011dfc5f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7110046980961847`*^9},ExpressionUUID->"b5854f6d-bd25-4aaa-93d1-\
9770f84dc545"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Sum", " ", "of", " ", "the", " ", "first", " ", "10", " ", "numbers"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711004701413596*^9, 3.7110047572095714`*^9}, {
   3.7110048278569727`*^9, 3.711004828989627*^9}, 
   3.711004936282994*^9},ExpressionUUID->"7bd35aaa-abff-42c6-ac0b-\
c44f454ae8ab"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{
  3.711004760593931*^9},ExpressionUUID->"dc0a941a-ef1c-4115-a061-\
5fec79188a17"]
}, Open  ]],

Cell["\<\
The stuff after the computation (* Sum of the first 10 numbers *) is referred \
to as a comment in the Wolfram Language. It does not compute to anything but \
merely serve as a signpost for the reader of your code to get an explanation \
of what your code is doing. As you can see in this example we are Nesting one \
function within another. The inner function is called and the results are \
passed to the outermost function, we did not capture the output in a \
variable, this is how most sophisticated WL (Wolfram Language) code is \
written. \
\>", "Text",
 CellChangeTimes->{{3.7110047928425503`*^9, 
  3.711005025042342*^9}},ExpressionUUID->"671921bf-5ce0-4adc-952c-\
fbfe94524441"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7110050349908695`*^9, 
  3.7110050574013624`*^9}},ExpressionUUID->"1a52395f-649d-46ae-82c8-\
5259fb36b6e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711005062311679*^9},ExpressionUUID->"47e023f6-d984-4e5f-8a86-\
65d609a1938d"]
}, Open  ]],

Cell["\<\
The name of the function simply tells us what the function is doing. \
\>", "Text",
 CellChangeTimes->{{3.7110050700807185`*^9, 
  3.711005086196797*^9}},ExpressionUUID->"997c440b-ba2a-483d-a6e5-\
e485a6724cf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Even", " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111677939732065`*^9, 
  3.7111678175105853`*^9}},ExpressionUUID->"d738fa35-8b63-4d0d-99c2-\
14f0feed0d2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111678187137628`*^9},ExpressionUUID->"3b8df1a3-9c29-4775-8747-\
06fc41520452"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], "*", "2", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Multiply", " ", "them", " ", "by", " ", "2"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 
  3.7111678536449485`*^9}},ExpressionUUID->"4305bdf0-993b-4d2e-b72f-\
88bbe1feb030"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", 
   "32", ",", "36", ",", "40"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711167856520339*^9},ExpressionUUID->"0f0f8aa2-c100-49c8-8764-\
ae262e24f3b7"]
}, Open  ]],

Cell["\<\
The 2 is used to multiply each even number in the list we got. We could \
perform other operations on a list of values\
\>", "Text",
 CellChangeTimes->{{3.7111678782670107`*^9, 
  3.7111679282684813`*^9}},ExpressionUUID->"0cf4125e-017c-4490-8056-\
7e9dbdd532a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{"2", ",", "20", ",", "2"}], "]"}], "^", "2", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Square", " ", "each", " ", "by", " ", "2"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}},ExpressionUUID->"568c97cf-df54-455d-bf3f-\
da45940eeccb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "16", ",", "36", ",", "64", ",", "100", ",", "144", ",", "196", 
   ",", "256", ",", "324", ",", "400"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111679467297463`*^9},ExpressionUUID->"5a74bbb9-64dc-48c3-9930-\
15887a9e1737"]
}, Open  ]],

Cell["Or use the nicely formatted version of powering", "Text",
 CellChangeTimes->{{3.7111681215754957`*^9, 
  3.711168132590995*^9}},ExpressionUUID->"58331823-8045-4f1a-9d7e-\
bb4156b1d26d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "20", ",", "2"}], "]"}], "6"], 
  RowBox[{"(*", " ", 
   RowBox[{"To", " ", "the", " ", "sixth", " ", "power"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 
  3.7111681868528852`*^9}},ExpressionUUID->"0d2accf4-bb12-4e10-a4cb-\
8445d904ca47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "64", ",", "4096", ",", "46656", ",", "262144", ",", "1000000", ",", 
   "2985984", ",", "7529536", ",", "16777216", ",", "34012224", ",", 
   "64000000"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711168190570557*^9},ExpressionUUID->"4b062ee1-32c5-496c-94e6-\
3b2de4ce8417"]
}, Open  ]],

Cell["We can use any interval", "Text",
 CellChangeTimes->{{3.7111682241440034`*^9, 
  3.711168229519267*^9}},ExpressionUUID->"bf951bad-9afd-4e3d-8e65-\
24a457a7f2cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"1", ",", " ", "100", ",", " ", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 3.7111681868528852`*^9}, {
  3.711168234011175*^9, 
  3.7111682482626915`*^9}},ExpressionUUID->"0a1dbde5-d1b2-4b76-a13f-\
c6bab2881bb4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19", ",", 
   "22", ",", "25", ",", "28", ",", "31", ",", "34", ",", "37", ",", "40", 
   ",", "43", ",", "46", ",", "49", ",", "52", ",", "55", ",", "58", ",", 
   "61", ",", "64", ",", "67", ",", "70", ",", "73", ",", "76", ",", "79", 
   ",", "82", ",", "85", ",", "88", ",", "91", ",", "94", ",", "97", ",", 
   "100"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711168249012698*^9},ExpressionUUID->"398d9a31-26cd-464c-827f-\
50d63b5f339b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"1", ",", " ", "100", ",", " ", 
   RowBox[{"3", "^", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7111678262724967`*^9, 3.7111678536449485`*^9}, {
  3.7111679345210223`*^9, 3.7111679431623063`*^9}, {3.7111680253015733`*^9, 
  3.711168033808019*^9}, {3.71116813533921*^9, 3.7111681868528852`*^9}, {
  3.711168234011175*^9, 
  3.7111682604989843`*^9}},ExpressionUUID->"e12e4570-a604-478e-9ead-\
e17995cfb60f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "10", ",", "19", ",", "28", ",", "37", ",", "46", ",", "55", ",", 
   "64", ",", "73", ",", "82", ",", "91", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111682617791724`*^9},ExpressionUUID->"8a48c643-9e01-4787-a07c-\
27150743b45e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"n", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "n", ",", 
      "Nothing"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "method", " ", "of", " ", "generating", " ", "even", " ", 
    "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111683004248514`*^9, 3.711168323018507*^9}, {
  3.7111683910734563`*^9, 
  3.7111684515760317`*^9}},ExpressionUUID->"5f491059-0bea-403e-b18c-\
48a80d508ae9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111684166937246`*^9},ExpressionUUID->"8997fcd7-13f6-4941-8b7b-\
26fe85565181"]
}, Open  ]],

Cell["\<\
More Complicated than our Range method above. We use an If function to make \
decisions. Its form is If[condition, true, false]. If condition evaluates to \
true the first result for true is \[OpenCurlyDoubleQuote]Evaluated\
\[CloseCurlyDoubleQuote] and returned out of the function, if its false the \
last statement is evaluated, a symbolic Nothing in this case. The Mod \
function performs the modulus of its arguments. When we divide one number by \
another we get the quotient and a remainder, if a number divides perfectly \
without a remainder the modulus is 0. This is not a perfectly accurately \
description and there is a whole field of discrete mathematics that deals \
with this stuff, but for our purposes in the above program, we do a Mod of a \
number n with 2, that result will be equal to 0 if that number divides \
perfectly with 2, which is a basic test for Even numbers. 
Table is a very powerful iteration function, we use it more often that For \
statement in WL. Lets drill through it to understand a little better.\
\>", "Text",
 CellChangeTimes->{{3.7111688757407365`*^9, 3.7111689125452633`*^9}, {
   3.7111692160639505`*^9, 3.7111692425756874`*^9}, {3.7111692822149687`*^9, 
   3.7111693069827805`*^9}, {3.711169346627542*^9, 3.7111693694960513`*^9}, {
   3.7111694849045877`*^9, 3.7111696290752015`*^9}, {3.7111696918000526`*^9, 
   3.7111697309349346`*^9}, {3.711169824937577*^9, 3.7111699771760597`*^9}, 
   3.711170151362887*^9, {3.7111702460648155`*^9, 3.7111702659428234`*^9}, {
   3.711170490389036*^9, 3.71117049484443*^9}, {3.711170529594416*^9, 
   3.7111705636834517`*^9}, {3.711170614154109*^9, 
   3.7111706258626313`*^9}},ExpressionUUID->"9a52fa59-a1ff-4f2a-b1b5-\
9c65a0f566b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "simple", " ", "table", " ", "that", " ", "returns", " ", "numbers", " ", 
    "from", " ", "1", " ", "to", " ", "10"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711170658307042*^9, 
  3.7111707485297065`*^9}},ExpressionUUID->"37abc7cc-3de0-4907-bba7-\
4c749d4eca85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111706694471006`*^9},ExpressionUUID->"b7ce08fc-7a66-4aa9-af77-\
af9900336bdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Range", " ", "equivalent"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111711149420347`*^9, 
  3.7111711272700815`*^9}},ExpressionUUID->"525785cb-c41f-4475-8ae3-\
4f72113c4876"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111711283767567`*^9},ExpressionUUID->"04154715-eb84-4e8a-94de-\
9bb2592b4e4e"]
}, Open  ]],

Cell["\<\
n is called the iterator variable. We start from 1 to 10 in steps of one.\
\>", "Text",
 CellChangeTimes->{{3.7111711358714333`*^9, 
  3.7111711768903627`*^9}},ExpressionUUID->"f5c08311-674a-4834-9cb0-\
88ad60fab9eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "2", ",", " ", "10", ",", "1"}], "}"}]}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "can", " ", "start", " ", "some", " ", "other", " ", "place"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111711809572372`*^9, 
  3.7111712063604603`*^9}},ExpressionUUID->"bcaa2a65-9761-4c80-9648-\
7b2353624ab4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111712083187656`*^9},ExpressionUUID->"a62ac86e-c3e6-4874-9c07-\
8a197ab5a06c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"n", ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "2", ",", "10", ",", "2"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Our", " ", "Even", " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171213575799*^9, 
  3.711171267695319*^9}},ExpressionUUID->"8b93eb64-8ded-4088-8b6d-\
81be486721e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711171270049896*^9},ExpressionUUID->"c75ab501-6c9d-48b7-a893-\
34b9156d3804"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "n", "]"}], ",", "n", ",", "Nothing"}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "use", " ", "EvenQ", " ", "function", " ", "in", " ", "this", 
    " ", "case", " ", "to", " ", "check", " ", "for", " ", "evenness"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171288041135*^9, 
  3.711171341182113*^9}},ExpressionUUID->"03cb62f8-4c2c-4f60-849d-\
009d168b32b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111713136787395`*^9, 
  3.7111713428216534`*^9}},ExpressionUUID->"76712a76-6d53-4019-8b41-\
c26cf7bb878e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"n", "^", "2"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "10", ",", "1"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"First", " ", "10", " ", "Squares"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711171417080324*^9, 
  3.711171442831262*^9}},ExpressionUUID->"f73fdb83-96cb-48e5-bfd9-\
a81ba5fde081"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{
  3.71117144385378*^9},ExpressionUUID->"8ec30046-d31c-4c7a-a6f3-c4b2aeba3272"]
}, Open  ]],

Cell["n is not special we can name the iteration variable anything", "Text",
 CellChangeTimes->{{3.7111714556554203`*^9, 
  3.7111714807934237`*^9}},ExpressionUUID->"f5c0bb9c-9bb6-430e-a719-\
75c5ab5bb212"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"value", ",", " ", 
   RowBox[{"{", 
    RowBox[{"value", ",", "5", ",", "20", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711171486694991*^9, 
  3.7111715252206616`*^9}},ExpressionUUID->"e2f98ef6-22c7-4feb-b73b-\
5f0d057134c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "8", ",", "11", ",", "14", ",", "17", ",", "20"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7111715258812895`*^9},ExpressionUUID->"65c4fd12-391b-4350-b48b-\
9d5328f1e271"]
}, Open  ]],

Cell["\<\
It\[CloseCurlyQuote]s always a good idea to name your iteration variables \
according to its purpose.\
\>", "Text",
 CellChangeTimes->{{3.711171534385461*^9, 
  3.711171602232631*^9}},ExpressionUUID->"ade9a64f-a6b9-49b6-811b-\
7faacb71d36e"],

Cell[CellGroupData[{

Cell["Dancing with Strings...", "Chapter",
 CellChangeTimes->{{3.7111722078615403`*^9, 3.711172211800006*^9}, {
  3.7111723142572937`*^9, 
  3.711172321693471*^9}},ExpressionUUID->"5f48f5a5-bea2-4cc1-be84-\
a2789741980a"],

Cell[CellGroupData[{

Cell[BoxData["\"\<A simple statement\>\""], "Input",
 CellChangeTimes->{{3.711172352489569*^9, 
  3.7111724068641367`*^9}},ExpressionUUID->"743d4b1a-69a1-4e34-b177-\
7e2bb3c91d43"],

Cell[BoxData["\<\"A simple statement\"\>"], "Output",
 CellChangeTimes->{3.711172408548476*^9, 
  3.7111724813757763`*^9},ExpressionUUID->"00a0d492-bd82-4bc2-86a5-\
1880f009de94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringLength", "[", "%", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "modulus", " ", "operator", " ", "is", " ", "used", " ", "to", 
    " ", "remember", " ", "the", " ", "last", " ", "output"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711172413599818*^9, 
  3.711172467240617*^9}},ExpressionUUID->"2023a673-6b82-4290-9dee-\
d7d4a363244a"],

Cell[BoxData["18"], "Output",
 CellChangeTimes->{{3.7111724465823507`*^9, 
  3.7111724870329075`*^9}},ExpressionUUID->"36caec89-86fb-44f5-a532-\
6944947a7bc5"]
}, Open  ]],

Cell["StringLength just gets the length of a string", "Text",
 CellChangeTimes->{{3.7111725026697087`*^9, 3.7111725057940054`*^9}, {
  3.711172539369175*^9, 
  3.711172550166073*^9}},ExpressionUUID->"37644616-68f6-4c66-bd5b-\
31e2c47e4286"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringLength", "[", "\"\<I love the Wolfram Language\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7111725563419414`*^9, 
  3.7111725729837914`*^9}},ExpressionUUID->"0eaa7c15-53eb-4f5d-9dc4-\
7ca2f93c7039"],

Cell[BoxData["27"], "Output",
 CellChangeTimes->{
  3.7111725744896755`*^9},ExpressionUUID->"378d5e00-dcaf-403d-ac5d-\
6fe939ea78f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"statement", " ", "=", " ", 
  "\"\<I love the Wolfram Language\>\""}]], "Input",
 CellChangeTimes->{{3.71117324377046*^9, 
  3.7111732578596573`*^9}},ExpressionUUID->"e31e7a91-2264-455c-b6f4-\
2cf029fd7def"],

Cell[BoxData["\<\"I love the Wolfram Language\"\>"], "Output",
 CellChangeTimes->{
  3.711173259919544*^9},ExpressionUUID->"7a42d756-066b-4a4a-91bf-\
c68e4f6ada8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", " ", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Lets", " ", "get", " ", "l", " ", "in", " ", "love"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111732758170614`*^9, 
  3.71117331913286*^9}},ExpressionUUID->"aab03e6c-16b2-4569-9abe-\
2ac4bc0bdc61"],

Cell[BoxData["\<\"l\"\>"], "Output",
 CellChangeTimes->{{3.7111732996261454`*^9, 
  3.711173322024646*^9}},ExpressionUUID->"03430633-70ce-46b1-a631-\
6e728edc0b4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPosition", "[", 
   RowBox[{"statement", ",", "\"\<W\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "index", " ", "position", " ", "of", " ", "\"\<W\>\"", " ", 
    "in", " ", "the", " ", "string"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111733242110786`*^9, 3.71117337778778*^9}, {
  3.7111735296999836`*^9, 
  3.711173554247072*^9}},ExpressionUUID->"11d36e85-fcb6-4ddd-8410-\
8000e84eed63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"12", ",", "12"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711173538016243*^9},ExpressionUUID->"14de0bdc-51d8-4d7c-a371-\
35104a75221d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPosition", "[", 
   RowBox[{"statement", ",", "\"\<m\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "index", " ", "position", " ", "of", " ", "\"\<m\>\"", " ", 
    "in", " ", "the", " ", "string"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111733242110786`*^9, 3.71117337778778*^9}, {
  3.7111735296999836`*^9, 
  3.711173577170444*^9}},ExpressionUUID->"332f50ea-92ee-44fd-a06c-\
2c5cd696e74b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"18", ",", "18"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111735782017174`*^9},ExpressionUUID->"84188255-74f9-44b5-8cb6-\
4ba353d18af5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringTake", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "use", " ", "the", " ", "indices", " ", "to", " ", "extract", 
    " ", "Wolfram", " ", "from", " ", "the", " ", "string"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111736173951273`*^9, 
  3.711173672482644*^9}},ExpressionUUID->"28c1ee3f-169e-470d-9f2b-\
3dbba4b777a9"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{3.711173634343891*^9, 
  3.711173674355476*^9},ExpressionUUID->"4b71d9c7-194f-4265-8f85-\
10aad3a8c7fb"]
}, Open  ]],

Cell["Another way, WL has many ways to solve the same problem.", "Text",
 CellChangeTimes->{{3.7111737040940466`*^9, 
  3.711173737717975*^9}},ExpressionUUID->"c6dd73c7-76a0-471e-8d5c-\
982d0e3855c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7111737463581877`*^9, 
  3.711173774687357*^9}},ExpressionUUID->"9985b93d-6d34-40ed-a61a-\
cebaa8a39457"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111737586446657`*^9},ExpressionUUID->"304e9329-d12e-403b-9c79-\
6679fc42cea7"]
}, Open  ]],

Cell["Use CTRL + L to get the previous computation", "Text",
 CellChangeTimes->{{3.711173786279272*^9, 
  3.711173812371838*^9}},ExpressionUUID->"d0a0c5fc-78c3-4f00-b2d8-\
698fdb23ce1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"StringPart", "[", 
   RowBox[{"statement", ",", 
    RowBox[{"12", ";;", "18"}]}], "]"}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.7111737463581877`*^9, 3.711173774687357*^9}, {
  3.7111738150179415`*^9, 
  3.711173825490105*^9}},ExpressionUUID->"0bf1d187-8a2e-49b7-a186-\
25c2f8d7140c"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{
  3.711173829246974*^9},ExpressionUUID->"2309e849-e64e-49c3-adb1-\
22b412b6caab"]
}, Open  ]],

Cell["\<\
When you know enough of WL you will find other ways to do this... Lets \
explore one more\
\>", "Text",
 CellChangeTimes->{{3.711173840231968*^9, 3.7111738429234653`*^9}, {
  3.711173901442975*^9, 3.7111739113381104`*^9}, {3.7111739961389627`*^9, 
  3.7111740000526266`*^9}, {3.711174125579609*^9, 
  3.711174143536589*^9}},ExpressionUUID->"5b2da926-4e51-45c9-86a9-\
c8d31f5c6aab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7111741516188803`*^9, 
  3.711174157895974*^9}},ExpressionUUID->"a061dcd8-1912-42f4-8236-\
7d4a98e51509"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111741586303625`*^9},ExpressionUUID->"1fb5cedd-04a8-4fc4-a7ae-\
bb0890da1473"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111741516188803`*^9, 
  3.711174181889724*^9}},ExpressionUUID->"886ab161-55af-4059-8126-\
291aaf0c60aa"],

Cell[BoxData["\<\"Wolfram\"\>"], "Output",
 CellChangeTimes->{
  3.7111741856455946`*^9},ExpressionUUID->"e9e8e494-a1c4-462e-87ce-\
928da7d7f378"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174216983055*^9}},ExpressionUUID->"2410d6e8-2b0f-4299-b776-\
d84a9273210b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"W\"\>", ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>", ",", "\<\" \"\>", 
   ",", "\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>", 
   ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
   ",", "\<\"a\"\>", ",", "\<\"w\"\>", ",", "\<\"e\"\>", ",", "\<\"s\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"m\"\>", ",", "\<\"e\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111742203613234`*^9},ExpressionUUID->"fcb2d16d-e510-43df-9491-\
8d4075b3d6c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", "\"\<L\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174278936864*^9}},ExpressionUUID->"a2b8f5bb-4a20-4428-b6d5-\
d0ec447ca447"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "9", "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.711174240670849*^9, 
  3.711174280672192*^9}},ExpressionUUID->"7c5edf76-dcd2-403f-b057-\
da8eba20a0d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", "\"\<e\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 
  3.711174300652963*^9}},ExpressionUUID->"39406239-b9c8-4cc2-ad02-\
6e87e1856858"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "16", "}"}], ",", 
   RowBox[{"{", "23", "}"}], ",", 
   RowBox[{"{", "27", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.711174302184084*^9},ExpressionUUID->"82f485e9-a873-4c69-af8b-\
b64fd5105bfc"]
}, Open  ]],

Cell["\<\
From eyeballing the text and the indices we can see that the first time we \
see \[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote] is at the end of \
language.\
\>", "Text",
 CellChangeTimes->{{3.711174320095257*^9, 3.711174353960271*^9}, {
  3.7111745446029215`*^9, 
  3.711174592277196*^9}},ExpressionUUID->"7128c5c2-63eb-407c-9a98-\
56d6fec78cbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", 
   RowBox[{"9", ";;", "16"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 
  3.711174655109233*^9}},ExpressionUUID->"c4608d16-8a97-46fe-8896-\
cd1e41db4e71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7111746561381807`*^9},ExpressionUUID->"a6979bc5-4179-4827-950f-\
f3bfb102d534"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
    ",", 
    RowBox[{"9", ";;", "16"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 
  3.7111746686022854`*^9}},ExpressionUUID->"af199ccd-b1b3-4375-8d33-\
ca8b4da8b799"],

Cell[BoxData["\<\"Language\"\>"], "Output",
 CellChangeTimes->{
  3.7111747056249886`*^9},ExpressionUUID->"686fdd5b-d1cf-45e1-a71c-\
da51326c106c"]
}, Open  ]],

Cell["\<\
What is 9 ;; 16 ? or index ;; index? It\[CloseCurlyQuote]s called taking a \
part. \
\>", "Text",
 CellChangeTimes->{{3.711174721910185*^9, 
  3.7111747846867495`*^9}},ExpressionUUID->"c6ca7304-bb78-4e8b-8508-\
b18e389bce98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<Wolfram Language is awesome\>\"", "]"}], 
   ",", 
   RowBox[{"9", ";;", "16"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711174195212584*^9, 3.711174300652963*^9}, {
  3.7111745988353558`*^9, 3.7111746686022854`*^9}, {3.7111748262344728`*^9, 
  3.711174841080944*^9}},ExpressionUUID->"fa3bef8a-bd21-4675-b04b-\
61aa68b3c1e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"L\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"a\"\>", ",", "\<\"g\"\>", ",", "\<\"e\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.711174844815936*^9},ExpressionUUID->"8e09d8c6-d3a8-4a67-835f-\
4648bd433600"]
}, Open  ]],

Cell["\<\
The Part function uses indices to extract parts of an expression.\
\>", "Text",
 CellChangeTimes->{{3.711174850096401*^9, 3.711174885600506*^9}, {
  3.711174928675142*^9, 3.71117493496929*^9}, {3.711174966684683*^9, 
  3.711174975940693*^9}, {3.7111750307339845`*^9, 
  3.711175043446558*^9}},ExpressionUUID->"ee735575-275a-449c-9fd1-\
6da0d2db894d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringTake", "[", 
   RowBox[{"\"\<Wolfram Language is awesome\>\"", ",", " ", 
    RowBox[{"9", ";;", "16"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "nice", " ", "way", " ", "to", " ", "extract", " ", 
    "parts", " ", "of", " ", "a", " ", "String"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711175058241156*^9, 
  3.711175124566103*^9}},ExpressionUUID->"03f21add-7fce-4efd-9d6f-\
b0cb40d77a40"],

Cell[BoxData["\<\"Language\"\>"], "Output",
 CellChangeTimes->{3.7111750884749355`*^9, 
  3.711175125950988*^9},ExpressionUUID->"31b8bd79-78b4-4c61-9658-\
c90c7c2c6881"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Word of Advice", "Chapter",
 CellChangeTimes->{{3.711175448721901*^9, 
  3.7111754548666544`*^9}},ExpressionUUID->"60f27124-f057-4f9c-a274-\
f72704f6e623"],

Cell["\<\
When learning programming, you start by learning the syntax. After learning \
the syntax you next step is digging through the documentation. Like I always \
say KEEP YOUR DOCUMENTATION UNDER YOUR PILLOW. When you go through the WL \
documentation you will see all these functions in great detail, plus it\
\[CloseCurlyQuote]s well written.
\
\>", "Text",
 CellChangeTimes->{{3.7111754665193343`*^9, 3.7111754924230585`*^9}, {
   3.711175554138683*^9, 3.711175575362425*^9}, {3.711175707536096*^9, 
   3.7111757950322943`*^9}, {3.711175839807831*^9, 3.7111758566192565`*^9}, 
   3.711179660066082*^9},ExpressionUUID->"95849297-24bf-46c2-82fb-\
977b421e636f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "5", ",", " ", "6", " ", ",", "7", ",", " ", "1", ",", " ", "3"}],
   "}"}]], "Input",
 CellChangeTimes->{{3.71117966925261*^9, 
  3.711179686025934*^9}},ExpressionUUID->"a0aedc42-469b-4a50-9084-\
1e62e2470c66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "1", ",", "3"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.711179686989194*^9},ExpressionUUID->"cf27e69f-b9ce-4e82-9776-\
f2d467021c66"]
}, Open  ]],

Cell["\<\
We have been using something with and opening curly brace { some numbers \
separated by commas followed by a closing curly brace }. This structure is \
known as a List in WL. It is the most fundamental kind of structure you will \
be dealing with most of times. Most functions return Lists as their result \
and Many operate directly on List. \
\>", "Text",
 CellChangeTimes->{{3.71117969451897*^9, 
  3.7111798663927827`*^9}},ExpressionUUID->"23630771-50c9-4b53-ab11-\
b3fe8802cfcc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"We", " ", "can", " ", "put", " ", "characters"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711179868744711*^9, 
  3.711179899321853*^9}},ExpressionUUID->"6c4e7757-118c-43b7-8e53-\
b409558e66fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111799014676456`*^9},ExpressionUUID->"f39787bf-b061-4435-951b-\
36314e5162eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<eggs\>\"", ",", " ", "\"\<bananas\>\"", ",", "\"\<oranges\>\""}], 
   "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"And", " ", "some", " ", "strings"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711179903035804*^9, 3.711179914640375*^9}, {
  3.7111801032283354`*^9, 
  3.711180149299493*^9}},ExpressionUUID->"40768d08-930a-4196-a0b7-\
d77ba0a4145f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"eggs\"\>", ",", "\<\"bananas\"\>", ",", "\<\"oranges\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7111802029990606`*^9},ExpressionUUID->"aef829e9-318a-4f8f-9751-\
8c5e24ee576f"]
}, Open  ]],

Cell["\<\
The List is a container we use it to hold stuff, it\[CloseCurlyQuote]s \
implemented very efficiently in WL Most of the time in your computations you \
will be dealing with Lists. \
\>", "Text",
 CellChangeTimes->{{3.7111802182838016`*^9, 3.711180322652125*^9}, {
  3.7118020749667797`*^9, 
  3.711802132477376*^9}},ExpressionUUID->"2a108525-4152-4793-a45a-\
39d5414267ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "2", ",", "\"\<houses\>\"", ",", " ", "4", ",", " ", "\"\<cars\>\"", ",", 
    " ", "5", ",", "\"\<boats\>\""}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"You", " ", "can", " ", "mix", " ", "stuff", " ", "up"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111803264650917`*^9, 
  3.711180381851251*^9}},ExpressionUUID->"05a75915-5d81-4b23-bb99-\
4cdd48eb79bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "\<\"houses\"\>", ",", "4", ",", "\<\"cars\"\>", ",", "5", 
   ",", "\<\"boats\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711180496321887*^9},ExpressionUUID->"98d5ef7e-23a1-4d4d-b744-\
ef2a31257452"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Or", " ", "use", " ", "a", " ", "Nested", " ", "List", " ", "to", " ", 
    "create", " ", "some", " ", "data", " ", "Structure"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118038800764*^9, 
  3.7111804857431808`*^9}},ExpressionUUID->"f973aba2-39a9-4275-a7a9-\
21de28168295"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "\<\"houses\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "\<\"boats\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111804993127623`*^9},ExpressionUUID->"eaf533db-e3ec-4cac-acd8-\
8f6294839d03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Get", " ", "the", " ", "second", " ", "item", " ", "using", " ", "an", 
    " ", "index"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118038800764*^9, 
  3.7111805437772493`*^9}},ExpressionUUID->"ea89a69e-adff-4d7e-b371-\
89e46de34a0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711180545444748*^9},ExpressionUUID->"d52ffbcb-1ec4-4255-89c1-\
697b236b0533"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7111805744248285`*^9, 
  3.7111805884398427`*^9}},ExpressionUUID->"f58b13c5-fc7c-421b-8ae4-\
18ec07e7c804"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711180589408593*^9},ExpressionUUID->"3617d5c0-6c0d-47a3-a9ee-\
d28709e7bf02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", "3", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "3", "rd", " ", "item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111805744248285`*^9, 
  3.7111806243064795`*^9}},ExpressionUUID->"15042344-7b70-47cd-8635-\
041e7e0be0b8"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.7111805980198593`*^9, 
  3.711180625485719*^9}},ExpressionUUID->"23c56922-818c-4fa2-a5e2-\
cdf370e6a551"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"With", " ", "Part", " ", "function"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806482133284`*^9, 
  3.7111806761447344`*^9}},ExpressionUUID->"156ba887-b3ef-4e32-a6ba-\
908c7b03a153"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{
  3.7111806833636894`*^9},ExpressionUUID->"6249ea8d-23c9-4b2d-b478-\
92cb20010f79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"2", ";;", "6"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Gets", " ", "the", " ", "2", "nd", " ", "to", " ", "the", " ", "6", "th", 
    " ", "item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806905024624`*^9, 
  3.7111807421548204`*^9}},ExpressionUUID->"13166a2e-8db5-4228-9f60-\
4d40ef17dbc7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111807432695684`*^9},ExpressionUUID->"f35bbbce-78c1-4d3f-8130-\
deadf22536f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Last", " ", "Item"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111806905024624`*^9, 
  3.711180774076498*^9}},ExpressionUUID->"c528848e-a53c-4b1e-85f6-\
fce2e142a5f5"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.7111807758989286`*^9},ExpressionUUID->"c2f71aca-c873-4135-8966-\
3e0eb644c0b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Last", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Last", " ", "function", " ", "for", " ", "last", " ", "item"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711180786461494*^9, 
  3.711180809691552*^9}},ExpressionUUID->"5ec1636c-0cae-45e2-97ad-\
68221256ebe2"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.7111808179689913`*^9},ExpressionUUID->"293f616e-3db1-4c05-853c-\
4aba8d57c519"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711180822241584*^9, 
  3.7111808458858666`*^9}},ExpressionUUID->"9e96abaa-0f78-4a6c-b7d8-\
0cf201d14972"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.7111808564844465`*^9},ExpressionUUID->"412a9e55-3bb2-498b-81ac-\
5fdca767992c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Rest", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Without", " ", "the", " ", "first"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111808590372305`*^9, 
  3.711180890187527*^9}},ExpressionUUID->"66a7b646-cb12-4ba5-8ddf-\
4dec5999ec52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111808798502665`*^9, 
  3.7111808918124795`*^9}},ExpressionUUID->"0bb82926-a2ba-4536-a437-\
fc9db222190f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Most", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Without", " ", "the", " ", "Last"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711180896573042*^9, 
  3.7111809202762547`*^9}},ExpressionUUID->"384238c9-5036-4288-895a-\
0d30f7c6c413"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111809060036554`*^9, 
  3.711180921327394*^9}},ExpressionUUID->"46122b57-271d-446f-aabf-\
8eabd7bead9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711180965311426*^9}},ExpressionUUID->"33910216-3e81-431a-a38e-\
e2890aef2bfb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "\<\"cars\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711180966709738*^9},ExpressionUUID->"05ce95b4-2656-44e7-ae84-\
9f671d4b0acf"]
}, Open  ]],

Cell["Lets go deeper", "Text",
 CellChangeTimes->{{3.711180972776203*^9, 
  3.711180976267953*^9}},ExpressionUUID->"2828a095-50f8-43c5-a0fb-\
be991a2326ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711180990562297*^9}},ExpressionUUID->"cd9104ef-fe22-4d20-ad6a-\
2e9c9ea957e5"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{
  3.7111809938075867`*^9},ExpressionUUID->"893ef6b0-e32c-4cc8-8694-\
e0a034a3e4b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.7111810039942102`*^9}},ExpressionUUID->"a057bb35-a788-478f-9df6-\
6b013d403a2a"],

Cell[BoxData["\<\"cars\"\>"], "Output",
 CellChangeTimes->{
  3.7111810054529643`*^9},ExpressionUUID->"5599f130-df35-4201-bacc-\
613283e88c95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Another", " ", "way"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 
  3.711181022903761*^9}},ExpressionUUID->"d2e6367a-c315-43d2-a2ab-\
657f2fc138bb"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7111810239874835`*^9, 
  3.711802374585159*^9},ExpressionUUID->"a0702395-0648-4226-a146-\
63c35283b8ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "2", ",", 
    "1"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Neater", " ", "using", " ", "Part"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 3.711181022903761*^9}, {
  3.7118023784211397`*^9, 3.711802398359932*^9}, {3.7118024604441557`*^9, 
  3.71180248031387*^9}},ExpressionUUID->"c46a22a3-2f45-4420-98e3-\
6c7abf016427"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7118024017121477`*^9, 
  3.71180247026565*^9},ExpressionUUID->"41b7926d-a881-4c57-b900-b78a172b2f48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "2", ",", 
   "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.71118096226467*^9, 3.711181022903761*^9}, {
  3.7118023784211397`*^9, 3.711802398359932*^9}, {3.7118024604441557`*^9, 
  3.711802505279539*^9}},ExpressionUUID->"f7eddaa0-4132-4d52-b97f-\
7585c5c86b18"],

Cell[BoxData["\<\"cars\"\>"], "Output",
 CellChangeTimes->{{3.711802494215691*^9, 
  3.7118025067868357`*^9}},ExpressionUUID->"866f2cd4-dba8-4dcf-9b4d-\
57f4dba59a11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<houses\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\"\<cars\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "\"\<boats\>\""}], "}"}]}], "}"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7118025138579597`*^9, 
  3.711802526072085*^9}},ExpressionUUID->"61740371-f185-444a-bddf-\
bcf065da2923"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "\<\"boats\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7118025273913927`*^9},ExpressionUUID->"37bba63e-3d23-4d33-82dc-\
3e011067c58b"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"l1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"l2", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"56", ",", "3", ",", "4", ",", "67", ",", "7"}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7118021654828076`*^9, 
  3.711802197991621*^9}},ExpressionUUID->"7a10110f-42e5-4882-b2e3-\
0cdefd997817"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{"l1", ",", "l2"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"The", " ", "built"}], "-", 
    RowBox[{
    "in", " ", "function", " ", "Join", " ", "is", " ", "used", " ", "to", 
     " ", "joint", " ", "lists", " ", "together"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118022023095217`*^9, 
  3.7118022577201433`*^9}},ExpressionUUID->"f7399b56-72a5-40fe-bc4d-\
3cffbd93bdaf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "56", ",", "3", ",", "4", 
   ",", "67", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711802210719093*^9},ExpressionUUID->"1956f496-dbbe-4b6e-bea4-\
fe593465f651"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"l3", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7118022621039004`*^9, 
  3.7118022886305346`*^9}},ExpressionUUID->"17b05099-e380-4d8d-bf66-\
1c40a112c1e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{"l1", ",", "l2", ",", "l3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "can", " ", "Join", " ", "a", " ", "number", " ", "of", " ", 
    "lists"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118022909520297`*^9, 
  3.711802327870083*^9}},ExpressionUUID->"4726cee0-967d-46fb-ab94-\
61b673c16a09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "56", ",", "3", ",", "4", 
   ",", "67", ",", "7", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"d\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711802304431653*^9},ExpressionUUID->"cb8a1e5d-5b17-4157-abe5-\
a88d6ab7fb8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Prepend", "[", 
   RowBox[{"l1", ",", "90"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Add", " ", "90", " ", "to", " ", "the", " ", "front", " ", "of", " ", 
    "l1"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118025731087255`*^9, 
  3.711802634032381*^9}},ExpressionUUID->"121aec8d-e927-4c74-bc6b-\
62619d9aefd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"90", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7118025847638283`*^9},ExpressionUUID->"5fdf8d00-707b-4924-8843-\
7ccaa4533816"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Append", "[", 
   RowBox[{"l1", ",", "123"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "123", " ", "to", " ", "the", " ", "end"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118026026527042`*^9, 
  3.7118026498756475`*^9}},ExpressionUUID->"45497e0a-1bdf-47be-840c-\
05569ec3b68b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "123"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7118026127645082`*^9, 
  3.7118027752272773`*^9},ExpressionUUID->"93cede66-df5a-4f45-bbec-\
59ff4061fc06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"l1", ",", "1000", ",", "4"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Replace", " ", "the", " ", "4", "th", " ", "part", " ", "of", " ", "the", 
    " ", "list", " ", "with", " ", "1000"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711802706283656*^9, 3.711802736083034*^9}, {
  3.71180282870222*^9, 
  3.7118028498174286`*^9}},ExpressionUUID->"ddb37545-5ff0-49bc-89d1-\
7ee4716b4c8e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "1000", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{{3.711802721676694*^9, 3.71180273729074*^9}, 
   3.711802778822193*^9},ExpressionUUID->"f4d4d0a0-9eba-4311-ae2b-\
75232275c8a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l1", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "original", " ", "list", " ", "remains"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118028547335744`*^9, 
  3.7118028728639326`*^9}},ExpressionUUID->"8b2e8d55-9e77-4d9d-a492-\
0de038d0fe27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7118028605301495`*^9},ExpressionUUID->"4f7e112c-825a-4498-823a-\
8caef316e8e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplacePart", "[", 
   RowBox[{"l2", ",", "zzz", ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Replace", " ", "the", " ", "3", " ", "part", " ", "of", " ", "l2", " ", 
    "with", " ", "zzz"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118028810500154`*^9, 
  3.7118029153547173`*^9}},ExpressionUUID->"c6cf689e-af24-478d-a655-\
9acd16016435"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"56", ",", "3", ",", "zzz", ",", "67", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7118028928609467`*^9},ExpressionUUID->"fdd70869-5a2e-4338-8c82-\
3272206ad844"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Delete", "[", 
   RowBox[{"l1", ",", "3"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Remove", " ", "the", " ", "item", " ", "at", " ", "part", " ", "3"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.711803453415284*^9, 
  3.7118034838672953`*^9}},ExpressionUUID->"98e1ad60-b5e6-4ed3-acd7-\
2fac38e676c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7118034855729704`*^9},ExpressionUUID->"9ce79be8-0f35-4788-bc7c-\
f30c892af009"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"longlist", " ", "=", " ", 
  RowBox[{"Range", "[", "20", "]"}]}]], "Input",
 CellChangeTimes->{{3.711803493466671*^9, 
  3.71180350269114*^9}},ExpressionUUID->"65190e17-9a96-4074-b51a-\
a06def6272bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7118035036726203`*^9},ExpressionUUID->"2d6c3ffc-40ac-4fbb-afee-\
4ab795b07a6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Delete", "[", 
   RowBox[{"longlist", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "5", "}"}], ",", 
      RowBox[{"{", "10", "}"}], ",", 
      RowBox[{"{", "15", "}"}]}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Remove", " ", "items", " ", "at", " ", "various", " ", "locations"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.711803507091137*^9, 
  3.711803543131174*^9}},ExpressionUUID->"bcfbca03-3861-4d44-8956-\
bcf6a38a9a3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "11", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", 
   "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711803544372176*^9},ExpressionUUID->"583f7fbf-991c-4067-a40b-\
d498952ad0f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Random", " ", "Integer", " ", "between", " ", "1", " ", "and", " ", 
    "10"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181190796035*^9, 3.7111811968722677`*^9}, {
  3.711181320078122*^9, 
  3.711181337059101*^9}},ExpressionUUID->"f728d6d6-e54b-405c-8cfd-\
affa227a921d"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.7111811978096156`*^9, {3.7111813383047037`*^9, 
   3.711181343557985*^9}},ExpressionUUID->"6b4425db-67f5-4bc0-a674-\
1ad195285fbd"]
}, Open  ]],

Cell["A bunch of them in a List", "Text",
 CellChangeTimes->{{3.7111812077397823`*^9, 
  3.711181215249175*^9}},ExpressionUUID->"c1d59209-95be-4e98-9efb-\
63c8cc16a741"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "10", " ", "numbers", " ", "between", " ", "1", " ", "and", " ", "10"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111812185925865`*^9, 
  3.7111812454258604`*^9}},ExpressionUUID->"7220b72a-7d00-4396-a20f-\
af187c354c35"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "0", ",", "7", ",", "8", ",", "8", ",", "8", ",", "0", ",", "2", 
   ",", "3", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111812288755903`*^9, 3.711181246664826*^9}, 
   3.711181374660991*^9},ExpressionUUID->"97405f5d-16e7-44e2-9001-\
f448e7f43a45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randInts", " ", "=", " ", "%", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"save", " ", "it"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111813581157947`*^9, 
  3.711181390200697*^9}},ExpressionUUID->"28ffa0a9-6276-4c7c-b34b-\
6ea77c7665a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "0", ",", "7", ",", "8", ",", "8", ",", "8", ",", "0", ",", "2", 
   ",", "3", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.7111813677614474`*^9, 
  3.7111813771341534`*^9}},ExpressionUUID->"7eb243dd-a955-47b2-a1b4-\
79edd55740f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot", "[", "randInts", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7111814342530003`*^9, 
  3.7111814567812643`*^9}},ExpressionUUID->"d768ac44-436d-4ea4-ae4a-\
14aa993af858"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 10.}, {2., 0.}, {3., 7.}, {4., 8.}, {5., 8.}, {6., 8.}, {
      7., 0.}, {8., 2.}, {9., 3.}, {10., 
      0.}}]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {0, 10.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.711181448733715*^9},ExpressionUUID->"8f4eaca6-6914-4671-adc3-\
ef81424dbaf5"]
}, Open  ]],

Cell["I prefer seeing a line", "Text",
 CellChangeTimes->{{3.711181468184251*^9, 
  3.7111814718695955`*^9}},ExpressionUUID->"451adfce-08e5-4f02-bf45-\
f723a8e3139c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "randInts", "]"}]], "Input",
 CellChangeTimes->{{3.7111814740161977`*^9, 
  3.711181480730474*^9}},ExpressionUUID->"f5472c69-bd49-477e-8b6f-\
96d7e79c7819"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{1., 10.}, {2., 0.}, {3., 7.}, {4., 8.}, {5., 8.}, {6., 8.}, {
      7., 0.}, {8., 2.}, {9., 3.}, {10., 0.}}]}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {0, 10.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7111814817204905`*^9},ExpressionUUID->"67bcebcd-835e-46fc-8b46-\
77fa078e2fc3"]
}, Open  ]],

Cell["Some deeper structure", "Text",
 CellChangeTimes->{{3.7111815238064423`*^9, 
  3.711181540722252*^9}},ExpressionUUID->"83eaf475-fc47-4212-b0cd-\
5c3fee18931a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "6"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "3", " ", "Lists", " ", "of", " ", "6", " ", "items", " ", "each"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118154263924*^9, 
  3.7111815857675996`*^9}},ExpressionUUID->"9a44ba5a-2a6e-4d3d-bc5a-\
d9a76a297b8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "4", ",", "4", ",", "0", ",", "1", ",", "4"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "8", ",", "9", ",", "3", ",", "7", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "10", ",", "10", ",", "1", ",", "8", ",", "7"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7111815616772213`*^9, 
  3.711181591679433*^9},ExpressionUUID->"25bf31be-8c74-47bf-a260-\
ce0d1b330883"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "3"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "6", " ", "Lists", " ", "of", " ", "3", " ", "items", " ", "each"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71118154263924*^9, 
  3.7111816197662916`*^9}},ExpressionUUID->"9f209797-86d5-4031-b0ed-\
80a7a8bc516b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "7", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.711181612144677*^9, 
  3.7111816302674985`*^9}},ExpressionUUID->"f7ffaed8-fbbf-4104-a966-\
c8c09db7bee5"]
}, Open  ]],

Cell["Even deeper, depth is measured by Levels of Nesting", "Text",
 CellChangeTimes->{{3.7111816633834467`*^9, 
  3.7111817052305536`*^9}},ExpressionUUID->"3998bbbe-994b-4aba-913d-\
b7306acd32a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"100", ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.7111817451085*^9}},ExpressionUUID->"06a73449-67be-447c-a1f2-e57e68522a96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"64", ",", "70", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "31", ",", "65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "85", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"33", ",", "75", ",", "22"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "44", ",", "81"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "3", ",", "93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "17", ",", "33"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "17", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "67", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "10", ",", "48"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"99", ",", "91", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "60", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "74", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "39", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "72", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"13", ",", "47", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "72", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "37", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"54", ",", "91", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"26", ",", "42", ",", "85"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"14", ",", "28", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "41", ",", "76"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "91", ",", "88"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"22", ",", "21", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "9", ",", "29"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"18", ",", "12", ",", "87"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "34", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "55", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "60", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "0", ",", "79"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"99", ",", "19", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "49", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "60", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"22", ",", "21", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "89", ",", "77"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"9", ",", "73", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "52", ",", "41"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "42", ",", "65"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "74", ",", "75"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "2", ",", "12"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"98", ",", "56", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "92", ",", "67"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50", ",", "36", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50", ",", "83", ",", "47"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "7", ",", "19"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"96", ",", "20", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"79", ",", "45", ",", "49"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "56", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "3", ",", "75"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "66", ",", "63"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"99", ",", "20", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "5", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "40", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"55", ",", "85", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "44", ",", "93"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"64", ",", "82", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "6", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", "25", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"37", ",", "89", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "72", ",", "58"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"50", ",", "86", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6", ",", "98", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "56", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "23", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "22", ",", "83"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"98", ",", "59", ",", "36"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "100", ",", "25"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "21", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "67", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "76", ",", "28"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"88", ",", "0", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "97", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"28", ",", "85", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "54", ",", "93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "18", ",", "88"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"83", ",", "21", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "24", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "94", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "46", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "76", ",", "23"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"39", ",", "88", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "89", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "32", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "46", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "89", ",", "86"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"41", ",", "30", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "85", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "50", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "3", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"38", ",", "31", ",", "89"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"73", ",", "9", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"29", ",", "12", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"21", ",", "3", ",", "85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "54", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "6", ",", "71"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"31", ",", "26", ",", "79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"35", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "28", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "24", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "25", ",", "91"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"92", ",", "97", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "98", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "55", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "25", ",", "49"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "48", ",", "40"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"66", ",", "45", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "86", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", "87", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"91", ",", "57", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "88", ",", "62"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"89", ",", "46", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "4", ",", "53"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"41", ",", "37", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"41", ",", "77", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "97", ",", "48"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"35", ",", "31", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", "20", ",", "52"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"82", ",", "33", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"38", ",", "75", ",", "84"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "53", ",", "68"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"43", ",", "77", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "51", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "44", ",", "88"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"35", ",", "97", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"45", ",", "53", ",", "72"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "81", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "89", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "24", ",", "87"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "26", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "63", ",", "24"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"39", ",", "28", ",", "89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "50", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "78", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"69", ",", "100", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "82", ",", "28"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"18", ",", "4", ",", "85"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "94", ",", "89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "98", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "74", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "88", ",", "51"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"89", ",", "15", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "95", ",", "68"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", "75", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "22", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"99", ",", "84", ",", "46"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "14", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "88", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "45", ",", "64"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "94", ",", "89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "86", ",", "44"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"37", ",", "46", ",", "93"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "27", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "45", ",", "88"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "62", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"33", ",", "3", ",", "53"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"13", ",", "27", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "7", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "19", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "37", ",", "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "23", ",", "38"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"62", ",", "57", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "55", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "8", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "85", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "71", ",", "26"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "68", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"69", ",", "84", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "4", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "28", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"32", ",", "45", ",", "15"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"90", ",", "67", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "86", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "15", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "2", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"89", ",", "16", ",", "28"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"23", ",", "88", ",", "67"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "74", ",", "89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "22", ",", "40"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"94", ",", "78", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "6", ",", "54"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"82", ",", "73", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "11", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "34", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "14", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "3", ",", "57"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"17", ",", "75", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"65", ",", "79", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "55", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "53", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"66", ",", "66", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"21", ",", "55", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "47", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"51", ",", "42", ",", "25"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "87", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"85", ",", "89", ",", "65"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"81", ",", "47", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "21", ",", "37"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "11", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "73", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "94", ",", "20"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"93", ",", "79", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "29", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "100", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "29", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "64", ",", "48"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"11", ",", "86", ",", "78"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"81", ",", "85", ",", "77"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "30", ",", "61"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "29", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "20", ",", "86"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"23", ",", "92", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "7", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "57", ",", "35"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "86", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", "41", ",", "18"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"36", ",", "73", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "65", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "93", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"75", ",", "33", ",", "20"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "2", ",", "95"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"15", ",", "41", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "93", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", "52", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "21", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"19", ",", "29", ",", "53"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"58", ",", "16", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "9", ",", "57"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"47", ",", "94", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "71", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"56", ",", "20", ",", "49"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "22", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "64", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"17", ",", "94", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "92", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"58", ",", "7", ",", "69"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"68", ",", "31", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"42", ",", "38", ",", "75"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"73", ",", "49", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "47", ",", "22"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "96", ",", "1"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"25", ",", "60", ",", "79"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"55", ",", "37", ",", "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"18", ",", "82", ",", "66"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"27", ",", "39", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "85", ",", "56"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"15", ",", "27", ",", "95"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"92", ",", "88", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"59", ",", "62", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"52", ",", "44", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"26", ",", "60", ",", "75"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"69", ",", "98", ",", "86"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "65", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "64", ",", "77"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"78", ",", "37", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "83", ",", "58"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"46", ",", "96", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "7", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"35", ",", "27", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "76", ",", "77"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"44", ",", "23", ",", "73"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"69", ",", "35", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "16", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "60", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"47", ",", "41", ",", "49"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"85", ",", "2", ",", "97"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "51", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "66", ",", "89"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "4", ",", "63"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"42", ",", "43", ",", "30"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "48", ",", "76"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "49", ",", "54"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "61", ",", "14"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "99", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "0", ",", "50"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"94", ",", "50", ",", "4"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"42", ",", "59", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"31", ",", "57", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"46", ",", "73", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"88", ",", "35", ",", "64"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"98", ",", "28", ",", "89"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"75", ",", "75", ",", "39"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"13", ",", "72", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"33", ",", "86", ",", "40"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "74", ",", "25"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "86", ",", "83"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"39", ",", "37", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "29", ",", "98"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"60", ",", "32", ",", "59"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", "63", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "25", ",", "53"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"90", ",", "3", ",", "69"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "29", ",", "73"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"73", ",", "13", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "18", ",", "36"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8", ",", "93", ",", "40"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "53", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"74", ",", "12", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"71", ",", "88", ",", "81"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "79", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"35", ",", "10", ",", "50"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"25", ",", "85", ",", "48"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"98", ",", "95", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "69", ",", "12"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"26", ",", "0", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"48", ",", "94", ",", "20"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "25", ",", "24"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"42", ",", "60", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"72", ",", "69", ",", "21"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"86", ",", "55", ",", "74"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"97", ",", "70", ",", "74"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"91", ",", "54", ",", "51"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "33", ",", "60"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "38", ",", "72"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"23", ",", "5", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "76", ",", "30"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"40", ",", "9", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "46", ",", "32"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "8", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"87", ",", "14", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "53", ",", "32"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"44", ",", "89", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "84", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"61", ",", "86", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"11", ",", "81", ",", "56"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20", ",", "36", ",", "21"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"77", ",", "46", ",", "11"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "57", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"29", ",", "30", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"47", ",", "32", ",", "22"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"69", ",", "52", ",", "78"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"28", ",", "36", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"93", ",", "35", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25", ",", "100", ",", "26"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "14", ",", "27"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "74", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"58", ",", "61", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"69", ",", "20", ",", "23"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "30", ",", "31"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"72", ",", "70", ",", "37"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"24", ",", "80", ",", "82"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"71", ",", "19", ",", "100"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"62", ",", "61", ",", "46"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"53", ",", "82", ",", "80"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"34", ",", "89", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "30", ",", "79"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"86", ",", "88", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "87", ",", "91"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "63", ",", "13"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "54", ",", "62"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "35", ",", "43"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"66", ",", "35", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"39", ",", "100", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "23", ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "87", ",", "44"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "17", ",", "27"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"62", ",", "57", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"43", ",", "46", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"83", ",", "2", ",", "54"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"22", ",", "21", ",", "43"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"64", ",", "88", ",", "41"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"8", ",", "19", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "49", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", "96", ",", "33"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40", ",", "22", ",", "82"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "56", ",", "42"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"48", ",", "7", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"77", ",", "19", ",", "28"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "85", ",", "92"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"63", ",", "1", ",", "96"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"96", ",", "41", ",", "85"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"72", ",", "57", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"54", ",", "59", ",", "29"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"12", ",", "54", ",", "70"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "58", ",", "16"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"68", ",", "19", ",", "21"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"91", ",", "15", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"67", ",", "90", ",", "48"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"74", ",", "100", ",", "55"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "99", ",", "71"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15", ",", "43", ",", "77"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"29", ",", "93", ",", "34"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"94", ",", "16", ",", "19"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"16", ",", "7", ",", "94"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"84", ",", "47", ",", "22"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"57", ",", "74", ",", "88"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"70", ",", "64", ",", "38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"80", ",", "7", ",", "97"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"79", ",", "44", ",", "17"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"36", ",", "81", ",", "83"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"95", ",", "100", ",", "28"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.711181746930977*^9},ExpressionUUID->"13d0515a-b309-430f-866c-\
4cdc64dd23ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Short", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Short", " ", "to", " ", "show", " ", "a", " ", "surmarised", " ", 
    "version", " ", "of", " ", "some", " ", "Long", " ", "list"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.711181791374464*^9}},ExpressionUUID->"7ce66f05-c969-43de-bcf3-\
a3108dfdd53d"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"72", ",", "38", ",", "17"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"97", ",", "30", ",", "77"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"24", ",", "96", ",", "50"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"64", ",", "29", ",", "96"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"37", ",", "20", ",", "44"}], "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"30", ",", "99", ",", "80"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"70", ",", "7", ",", "90"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"45", ",", "62", ",", "11"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"29", ",", "61", ",", "28"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "93", ",", "36"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{
  3.7111817684064894`*^9},ExpressionUUID->"36c84260-ae79-4a9a-b2ac-\
7c6d613e96c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Dimensions", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{
   "Dimensions", " ", "gives", " ", "us", " ", "the", " ", "Dimensionality", 
    " ", "of", " ", "some", " ", "Structure", " ", "so", " ", "we", " ", 
    "can", " ", "know", " ", "how", " ", "many", " ", "levels", " ", "of", 
    " ", "nesting", " ", 
    RowBox[{"we", "'"}], "re", " ", "dealing", " ", "with"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 
  3.7111818861152735`*^9}},ExpressionUUID->"8eec41c7-b5b0-49cc-aa71-\
66407767c29e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7111818885022163`*^9},ExpressionUUID->"0661bc6a-f980-4ecb-b963-\
9cd3f1918f1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "40"}], "}"}], ",", "14"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Random", " ", "numbers", " ", "between", " ", "20", " ", "and", " ", 
    "40"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711181716073968*^9, 3.7111818861152735`*^9}, {
  3.711181921950455*^9, 
  3.711182007660013*^9}},ExpressionUUID->"eff775ea-1f68-48cc-b9fd-\
33fe01f9b7e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24", ",", "21", ",", "39", ",", "26", ",", "40", ",", "35", ",", "21", ",",
    "36", ",", "36", ",", "37", ",", "28", ",", "37", ",", "30", ",", "31"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7111819572593317`*^9, 3.7111819697462263`*^9}, 
   3.7111820087273045`*^9},ExpressionUUID->"c95a4c40-8b23-4df3-b2a0-\
0abb8a91c2c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "6", ",", "5", ",", "3"}], "}"}]}], "]"}], "]"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Gives", " ", "you", " ", "the", " ", "length", " ", "of", " ", "the", " ",
     "outermost", " ", "layer", " ", "of", " ", "the", " ", "nested", " ", 
    "list"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711182071124748*^9, 
  3.7111821137455325`*^9}},ExpressionUUID->"be247507-8031-4408-8536-\
35972af24bd8"],

Cell[BoxData["13"], "Output",
 CellChangeTimes->{{3.711182066580553*^9, 
  3.7111821159432793`*^9}},ExpressionUUID->"d7bba04d-3a6f-4420-89cd-\
bb43ffb74ec5"]
}, Open  ]],

Cell["If we have a one dimensional list", "Text",
 CellChangeTimes->{{3.711187403844759*^9, 
  3.7111874150445504`*^9}},ExpressionUUID->"7d7a7b29-689c-4dc0-9db6-\
96c4a7ad2817"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"100", ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 
  3.711187433155571*^9}},ExpressionUUID->"86898dd7-22e1-4800-8832-\
d5543bf90864"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28", ",", "62", ",", "76", ",", "34", ",", "6", ",", "29", ",", "31", ",", 
   "95", ",", "15", ",", "21", ",", "4", ",", "23", ",", "31", ",", "14", ",",
    "29", ",", "28", ",", "79", ",", "32", ",", "19", ",", "27", ",", "48", 
   ",", "6", ",", "63", ",", "4", ",", "24", ",", "0", ",", "92", ",", "100", 
   ",", "71", ",", "56", ",", "84", ",", "6", ",", "80", ",", "66", ",", "60",
    ",", "91", ",", "35", ",", "51", ",", "24", ",", "75", ",", "11", ",", 
   "33", ",", "96", ",", "45", ",", "87", ",", "72", ",", "37", ",", "89", 
   ",", "68", ",", "93", ",", "78", ",", "46", ",", "90", ",", "100", ",", 
   "9", ",", "33", ",", "44", ",", "93", ",", "69", ",", "54", ",", "80", ",",
    "95", ",", "36", ",", "70", ",", "89", ",", "5", ",", "26", ",", "73", 
   ",", "30", ",", "69", ",", "82", ",", "53", ",", "70", ",", "36", ",", 
   "84", ",", "65", ",", "28", ",", "3", ",", "33", ",", "26", ",", "72", ",",
    "88", ",", "15", ",", "59", ",", "42", ",", "59", ",", "30", ",", "9", 
   ",", "55", ",", "8", ",", "8", ",", "68", ",", "9", ",", "11", ",", "90", 
   ",", "30", ",", "77", ",", "62", ",", "63", ",", "74"}], "}"}]], "Output",
 CellChangeTimes->{
  3.711187434433689*^9},ExpressionUUID->"ad9e60d6-71d8-4e16-8a74-\
4fa7b670104c"]
}, Open  ]],

Cell["\<\
The best way to gain some idea about these numbers is to plot them, \
personally I prefer using a line plot\
\>", "Text",
 CellChangeTimes->{{3.7111874368322463`*^9, 
  3.7111875144925814`*^9}},ExpressionUUID->"1c5eabf5-02f8-4440-be42-\
7c5729a476f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"100", ",", "100"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 3.711187433155571*^9}, {
  3.711187518936808*^9, 
  3.7111875310049877`*^9}},ExpressionUUID->"768dbebc-1f5d-422e-8797-\
df66d07354a9"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJx1lMsuREEURStGhgYGBj1AREREvGmaLu9ne3S3xlQY+4X6tPtJPgHptSqp
Skhk96576zz22efOvX/1PydCCB+//384/vvu8iOWOAInwXVwaozpGj4N3oEz
Y4yP8Ba4DM6CQ3Ce91/hC8Q33iL8FL4EbpVxm2f4SvV8lfu38LUK7cs+N0D6
DJug9RlXfbbJb787oDrulnWGPbADtkF12ifeE/yA+tW7U+U7rPo54v1jeBfe
g0c4eqZY5fPeWRknOa8TED3TSXXfObWqPFVcfZLM88L5OXjJOTyp/wUcfyR4
1pl7+jHJrf+K83vwqqw3oLN+zLrjy3AD2hc8DjjXZ8ZXJ/Pr637Zh3sQelV+
56ZPiasP7CPq/wdQH8jdU32DLu5pngPceWafWafn9BPh+iDpg3YZJ6kPfWed
1YE+k8/Z2wae99s4fmcG/+TBT42cPdIH+j4Oy/edU47rc31AHQ3zqXVPcnWU
69NR2VeE6+M0KrGR6/+6TveG70reI3WT+/0xDvPWZ+qUKt/bZ/bBW473A/ol
l30=
      "]]}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 100.}, {0, 99.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7111875346688075`*^9},ExpressionUUID->"418289ae-57ca-4bfd-9ab7-\
6cad8e28b15d"]
}, Open  ]],

Cell["\<\
A better choice of graphing in this case could be a Histogram\
\>", "Text",
 CellChangeTimes->{{3.7111875648616657`*^9, 
  3.7111875964228373`*^9}},ExpressionUUID->"ab954d14-49c8-4cb3-856d-\
e436472bb05e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"100", ",", "100"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111874202487946`*^9, 3.711187433155571*^9}, {
  3.711187518936808*^9, 3.7111875310049877`*^9}, {3.711187606827535*^9, 
  3.7111876256282587`*^9}},ExpressionUUID->"551751f6-13f5-4d9f-bd4b-\
1bed640ed359"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.644], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.644], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {20., 21.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{13.979731158088228`, 
          54.27889705882353}, {-60.33735822969726, 71.02097656250001}}],
        StatusArea[#, 21]& ,
        TagBoxNote->"21"],
       StyleBox["21", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[21, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{20., 0}, {40., 23.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{53.91889705882352, 
          94.21806295955881}, {-72.81339011466844, 71.02097656250001}}],
        StatusArea[#, 23]& ,
        TagBoxNote->"23"],
       StyleBox["23", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[23, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{40., 0}, {60., 16.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{93.85806295955881, 
          134.15722886029408`}, {-29.147278517269342`, 71.02097656250001}}],
        StatusArea[#, 16]& ,
        TagBoxNote->"16"],
       StyleBox["16", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[16, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{60., 0}, {80., 20.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{133.7972288602941, 
          174.0963947610294}, {-54.09934228721167, 71.02097656250001}}],
        StatusArea[#, 20]& ,
        TagBoxNote->"20"],
       StyleBox["20", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[20, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{80., 0}, {100., 19.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{173.73639476102937`, 
          214.0355606617647}, {-47.86132634472608, 71.02097656250001}}],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{100., 0}, {120., 1.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{213.67556066176468`, 253.9747265625}, {
          64.42296062001442, 71.02097656250001}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-2.4, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 120.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.71118762722318*^9, {3.711187667367027*^9, 
   3.711187670916011*^9}},ExpressionUUID->"0912fba8-f967-43dd-b752-\
1de52efc1ed8"]
}, Open  ]],

Cell["Sometimes we have two dimensional data", "Text",
 CellChangeTimes->{{3.711187694005636*^9, 
  3.7111877057888536`*^9}},ExpressionUUID->"6642c1fc-4fc2-4fb6-99ea-\
2f11aa52a211"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"100", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 
  3.7111877311091423`*^9}},ExpressionUUID->"d860fea0-3597-44bb-a25f-\
21e1ddadbbb6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "0.8453788368840678`", ",", "0.37507606445582664`", ",", 
             "0.6653379148724785`", ",", "0.5293615528555509`", ",", 
             "0.7800996545229903`", ",", "0.8434713129770264`", ",", 
             "0.08900855506342986`", ",", "0.2759284581539341`", ",", 
             "0.6281655174508931`", ",", "0.9483086170403086`", ",", 
             "0.3793374974719994`", ",", "0.7254234163112008`", ",", 
             "0.892077216463053`", ",", "0.5620118622211383`", ",", 
             "0.1448533833226766`", ",", "0.16680759107870013`", ",", 
             "0.22834547701399122`", ",", "0.3622718621135168`", ",", 
             "0.18300489692520738`", ",", "0.37577508691178085`", ",", 
             "0.204730844160798`", ",", "0.48675569130397434`", ",", 
             "0.37907641560856686`", ",", "0.942819353657127`", ",", 
             "0.5352793273147043`", ",", 
             TemplateBox[{"51"},
              "OutputSizeLimit`Skeleton"], ",", "0.6357419281084697`", ",", 
             "0.5696257377587615`", ",", "0.6909802632344639`", ",", 
             "0.15066233098086634`", ",", "0.07930296934733838`", ",", 
             "0.7157859988986526`", ",", "0.8353746378035714`", ",", 
             "0.32727081019522486`", ",", "0.7625755576565547`", ",", 
             "0.10696687249320269`", ",", "0.8745089696787205`", ",", 
             "0.17128511752918674`", ",", "0.8111365844118548`", ",", 
             "0.7418237369439469`", ",", "0.18541442005276632`", ",", 
             "0.2137643849714106`", ",", "0.6040461173918255`", ",", 
             "0.8115192120640962`", ",", "0.17608438384582148`", ",", 
             "0.39892719027729995`", ",", "0.8564038497722346`", ",", 
             "0.10175448199717874`", ",", "0.024191297673705536`", ",", 
             "0.5615950579729858`"}], "}"}], ",", 
           TemplateBox[{"98"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"{", 
            TemplateBox[{"1"},
             "OutputSizeLimit`Skeleton"], "}"}]}], "}"}],
         Short[#, 10]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{47.2412109375, {2., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{38.2861328125, {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{59., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 302, 24093756495421168749, 10/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{44.86328125, {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 302, 24093756495421168749, 10 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{33.1142578125, {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{51., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 302, 24093756495421168749, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{57.33984375, {0., 6.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{90., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[24093756495421168749 === $SessionID, 
   Out[302], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{
  3.711187734378443*^9},ExpressionUUID->"350f9893-95b8-458d-a56d-\
7a5c9ec951e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{"Dimensions", "[", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Getting", " ", "the", " ", "Dimensionality", " ", "of", " ", "data"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187872538808*^9}},ExpressionUUID->"276d9446-2ce8-4efc-8a7f-\
05091805ff68"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.711187828265956*^9, 
  3.7111878446652756`*^9}},ExpressionUUID->"7efbb2af-f84e-44bc-a580-\
db246efc6b43"]
}, Open  ]],

Cell["To view such data we use some tools like", "Text",
 CellChangeTimes->{{3.711187876809779*^9, 
  3.711187897212763*^9}},ExpressionUUID->"8c6ffb4d-1950-462b-b50f-\
68672f31c47a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187958721474*^9}},ExpressionUUID->"a7b5bfa5-4e15-47f1-8028-\
c41b348ba64b"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
8s+0o2wWSJU9L8grcnFmpWZadj/RJ5L3SoeJHFSKt+xUvDoA+0+nxFIz22DK
fZJ2LqMFGedZOkMBn4hZvKZh/0E+xDgUkqYWD76/9cvedbFgIWM8ce8pDb06
776zCM6P/PdU9TdRv92nyAu/xDFReeHOh0tR3ZDRunfbm0xBZNY1s189bPhs
01Rq4XTBxePW0mPKLNiunbp4z4c4P5m0p0cvn4JpZ52lZDmR//nGYkOxrdio
dIEceIaGJMq3EeH0MijsK3+WpJaB8L15qwzrSiBb8DDkT343vPxD7i9Kb4Wf
Xv/gyooUlJ5d5Xq8OxYTmofnRxl1Iz5K7IC86gh6U4X2X5Yfgb0qzzY0ngef
W4vCE+x5oJr97H0xPgqLmpvBCvFtiO3MnccTpSMuSyAXMdiFxaPXOv6mM3H+
3b09YRsIT2lX8RfaR3ADwz/icHwGuCYZqyIOt4Ks4/p3UmcA1yTUPvGFmSBJ
z/9xi1uKWGWWxuUkwqO8M0X3fHoNp6S8s/NXsMC2mbLq/0LwwtMhz7iwdlhd
PXJGy2wUpNKPTVmG2+BVu4E/I9cH0s62AHHhh1A4aKapcIQGvyGl/T1qbHgN
+z1I8O1CwvwFsgYinaiUnaoSNutD+hiXLSJgQSHXTv7jPjaa3++7PTAjwNIx
eXE1yiiaNxwf9Hv9Gdb50Y0VST3QlcjZYN9Xj+jaGztebGtDiH+72qqTTIhG
L5R+xP8Kr4Ulj/lEXwd/OV37mPBOm7mK0uZL6ZD8LcNZpFaAu679k64pbMS6
rd18YoyP6Kdasao7iH7O3j3xQKkW1s4dU1PlRJ2v0ukf882Dhu+P89ShZijk
KdMdc7OgXBH0qKaChYzogIzohFb0P5idNeAwgpxZ3J/GBb2Y/3bdckFVC9iX
ubXNs+ohW6Jl0buKAouX/eRZzwaxQlpi8aUPhK/bziwz9H8Jxq2PrQ9X0yCn
q+h2/PgozlgGyr+brMbFk7xV0beGMG4wT94ti4mE+iDvdYfLQWJcoFgccwSJ
PXz4RrczNKy8JttK6jFh9mGrh3AvUv13PQuid0D9sAyW/Pf31InqgsOLizHW
krB5UUMp3KedQu7IVMM2+aWI/ZFGWJ988/td1BDenTJYn6vJII7LTOmxKYdG
5OoebhIPYvNzbGRreBifu8RlJmYQWTJ3HykcHsVhhxPxIe+GIFwh/yoEFETH
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
o1unGSgn7TCTmKSjIXRd59coDtxeq42cX8EkcqNnBdeODZkdV0wcnvXDveuo
W01KPuL2Xulyth5E0qiKeenjGhTWpLodSxmEzLpVJjtXfIX2sq6GgzoMmJZ9
vPyX3QraTtEu26hk+FkVPN3+iU/4WsC3hEVvkXGdN5LxNgvxjT0nYo8Q9fv4
h9CgEB+291uK/rTXIuqt3bjzPRqu7cjkFX0jPG2iXaUpqwzKjk3MzYUjBAfW
+/gGsKByUC/wp2cbSueJfC4oy4VJu19SRC4D3NhqE7WmHng2pb6bO0rDioo3
DpvzaDD99dc+uncEJIvjm/pmv4DwvIKiEaKfgrdaFQcbNIBs4XJvVnUTSP//
mnZxaxhRa4b7wpZNev2FSOC0PBrcXQ+flSJaW3IHUJ2kqRHI50Nh+dv5Jzuo
UNDZNDj99QucH100lJ3NRlT0jYGJOjbsgkvHzi4ehpxy/4eD24cw2sTyP13M
Q/haerd8JQ2UyDfjXlMjeL2t8uadC3z4bbq5pnoqA14Ui57dPq1QD2w6WY9R
RL94Ej9KHMfsnu6SK0Ys2BoGnff3rkHk1Yd32wgPy7ALYMdVdkNPyHVuUiAP
eVsbnjXW8RF+7sNeHddP6N0Y4JerRXB9LXQljbgITPt2ueoDF+c7G15pZrOR
kXYsfWdeNpxmV5XT40fgZMTZo6CeC7J97LEjmQ1IWq8n9o3DQUPvhKbe+04Y
XTia6+OZD6fpRwkHQvpgOvlgVYYLHRrTpnu7jzUjVCPwh/lZNqo/XlhynDKI
M5Oxj/ctoiK2YiBhwQUOKtVbvv317oGYDS1tr9UQzhc7bElxb4eoYM/YTs8O
vFbaeS/y5xAsXRrtzlowMb5/+S37G3yYbFYJ2OE5Ag2fXM7JFDpCQgVz7x4Y
RkhvRCpc+ZBud1iQqN0F90N+whX1fXDKZ849Y12L5C3eeyy7BZiYeXbjPlFX
SspDbzd3EXXhPkuh+gkDu4+LvFSqYoA2HfWMpNcBi1if42oldDh5KVkFO6bA
54SY3AN/ASzmqI90E1wSPCt14cYHDPgFruutuvQJjoV/2avWceEu2MPwv9GE
4O/7dovZdcNup2rY2YcsNNrg4iHVIWhS5qiuTxkCc7v+jkEbHkad5uSn9dKh
MFti/VvLdLSZ2gpxllFBdnhxa7dRO5g31gqdWsqE16Vok73phJf3mizIEX8J
+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
JnyuH7hy+gvh/UoT7zXSgsAXKfJG6l8ipB+mLwwZpIDmZ130T4ILl4L1YSZn
vyHisv9sWTQV2obGwu3eTEwufPnVid2LGq/UR++d+lEuGuw4o8yBzqfMZ/eN
OKCptaRK5rXA8oS8QunXUZS+zvyw+lw8SumDfr47voB8p9JKVIfggT/HBEnp
beC6WIaTlFjYtV7M8mg4FfWbJLWrUkaRq/ub7PacBpkllPATa96Ab6Iov9LI
EzqXRxMlLzCgy9xbKd49hGTuo3bbybeIltqdGRZLQ0BJ5D5KCxWk6qMRdwqL
YRLwLe72YwqsF2Te/v52FNkusd1Tm5jwclv0z2M/Fz5bF9Dz7lGh4ENfcv4g
cb7K18c36OfC836Tdgi7BNGydnxx7VQiV589FO+ggqwhTAumdiI4uybz0M5h
XFeZnw6PHEKtuYnBi8902B9Qb6nSG8K6jYEbjhD70YqXstB0ex9ivzgXaHK6
oWGbPl/BHIDLya69bPVaWPXey/HuI8P2jhzNdWceJkLFF61rpWMywLOvT4zI
1ZS44Q0zbHxcGV5rv6MPTD3Hoz9Uaci4XLH3d1E7RL+KZ/052AZnJZNlk89G
0fI8d5FrwygUX6zqrYglo8LaNGzIaQz7jpj+ztrPxng/Q91PaACCt+P0UkZq
kLzUzFMupwWFRq8Mj5v3w9fOi875WwV5/f3Op3f2wOSSc6rxISZO0KsauBpU
FHpq38k8TUFy4BRrzVgB9I/Z3xM9RkVqpYrXMSseRL+f6dYK7YF8c8XJh6/a
oDkp/2RvKh2uP9Knl/bxkGvaG3C+jokcYesLV19VQvtx40u3868gz3Vd8OJq
C74c3746m+Dl0kDhr1GLYpFzrzNwyf1PsODlCSRpEnnhI8Pbd6YZsVvv5q29
1ICXrxUHaLZUWLgHlTdfqoF2xZOF4QZfwatTNLqfQOzH0ny/tpsdEIggl7+w
aYb3Ra3ePFEaYnjPjXaGd6Lj5QONix4jcG2t54sg8vh65De16CrCy12Vx+TU
KIg54aJbEkWDo6vrL4E/fUg2r9x13SUPAxNnRh6zqZDIEm5jVtcgfP7AQ+HP
A2AuWvOf5P5umMnSRzQFBzDc9fHWgwEWLDjLdFjZQ+DrULD5w3SAoqyqO9mb
ijxr5eKr7mwoCIz4J/Oo6LLzzhP63AjS5662DMlyiAzUKqxbz4Nzm7TUzlYq
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
SwZlKj8qUr8VUT4Lv/073of/AYHWviw=
   "], {{0, 0}, {100, 100}}, {0, 0.9999938411929399}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.7111879400567756`*^9, 
  3.711187960369717*^9}},ExpressionUUID->"850191c4-b8c8-4687-9541-\
7fab52814b01"]
}, Open  ]],

Cell["The result is a random image", "Text",
 CellChangeTimes->{{3.7111879690357256`*^9, 
  3.711187975342957*^9}},ExpressionUUID->"1114e16e-3a04-491d-91c0-\
75b865f21ce0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "100"}], "}"}]}], "]"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.711187711127181*^9, 3.7111877311091423`*^9}, {
  3.7111878087772107`*^9, 
  3.711187986159984*^9}},ExpressionUUID->"4b369036-3306-4e83-bac8-\
48b4442d8eb2"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
CsmcfSE9Cgy0PXtur/yDBf5Cyza3f3xY7LbWdonsAynD7J5YUQdEwrKNGDOE
5/qvs5Yb5kFUT8H/56EWSD3+8ifemwOJHVvnbDJho05xwyznQ70wsH0tmcF4
A2oozyzPtQCkJcN7buQJkMT/sDUieRiOyrK37P8bAkPF9LuCdCtyInKMpfto
+GScstLoARPB0Q0/j3tT4cDjrFi+nYL0XUN/yg8M4LKP7093wkuXLi7XZM3i
IleMphi/gQGZiWMjClf4sJZYsXXfZDscHBiyILgyhbpn1MutFBPfFzX9aGmG
w9y+37+ONMFXnze9bOEgJqpfHK+TLYMfX55nNSzEp51SOsprBtDGGPlrpMuH
or6cnOATB7aXmlIZB3ohv33eChPbLtTL2x8yeEl41yqoYU0vFO9NkpSJuSnX
VNU8ezoEP6nN2W1jjaDt3Smu3cPGswjWc/ksNiT+Sa+JPt+BnKsFeSJdBJeL
G/E2H3+JsPwPr6q/94C6w3X1rb+ZSMKiohY6E343InfpuAtBXdDwseTnV1Dj
chIP1n/BZTO/5TMmLHg6Sw23TZfCds0RkdgPrbB+fe3aLGEVPDMXfN8YWY7w
Oss5qk+H4Zecnel+dxDH+h5HTx0mOHzmCfPimx6EMUclty1jYOJmyeZ7PxtQ
Zxpw8MlMBxTU+jUPp/Qi6nv9IheZJhgfHq9iV7RBdaWlo9TtYbBi7by6N3SA
7LjtwZvFQsQn7a719OVDYmjOZN6+VhhIyrhXOhfCiVfncv8NHVbKj0cEdS2I
vSX39Oq1fmRY1xT6P+bBN3/7ohcuRL9SlB3Vp/MQVvNYw+5QIwrF/zhm9DCg
V/WgxeMfAzp7k09ntFei0NstPq2AiQMq5SqShLeO7b5rt5bEhGvE2PeN9sNw
0NX/cfoWB+SHq0yi1AtgHup5/GAcMaedSbJj57gQldL2WzJ7BCYHW1onKgbB
DX2nXHqPh9QiscfXXvAg71zfl0xwxvyGb/lSikPQMb6RYn6mBKTlJd8CMlNA
SjRYXv69Cm6b4m/wznQgwpCXpjarEVUvfwR9jyDuxUvxWdDphI/lNrMaIROy
JzKHpQSlEK9+fX5byDeotv5eqvKKA0en/pMnCf+hGc88v8//CrpN9dTR1b2Q
knv3sfdyIyzS7vxbM/oBLIb5PSnlVjjt7Tqy6x8dDgM53Z9+NIFaJvR2FvmG
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
/3CKgsA=
   "], {{0, 0}, {100, 100}}, {0, 0.9999772238430016}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Tiny,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.7111879875518813`*^9},ExpressionUUID->"cb24afb1-db63-4995-b296-\
2cac29275ead"]
}, Open  ]],

Cell["\<\
The ImageSize -> Tiny directive is an option. Most built in functions have \
options that customize the operations of a function. In this case we specify \
that we want a tinier version of the Image above.
Remember that anytime we call the RandomInteger or RandomReal function a \
fresh set of random numbers is generated every time. To save what we have \
generated we only need to create a variable name.\
\>", "Text",
 CellChangeTimes->{{3.711187994654192*^9, 
  3.7111881739202824`*^9}},ExpressionUUID->"a50b41f3-4770-4545-9ced-\
fd3ad134f6ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"100", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7111881809233284`*^9, 
  3.711188212279961*^9}},ExpressionUUID->"04a31bb9-36c8-47a5-97b8-\
47c3dd3edaa8"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
qe3WjXj+AoPDTC6cb8fr9yzpxZrTslcd19qheOths5aHo1T//SR0OL0bpU98
19te2w0PgUc79WZJ+FsO/BnTJCDvtdw232EIZfaMtINSJNq7P2N7FQs3V9Ny
NK92I2CquvOnPBd5SpKfaO8IHDY9XvD8wzAyZbYeS35M8bmP0PsntXS8NOyT
LOs9h/CakNKZH6OY0iw1adhAzdf+AuFBYzU4fXr1T48cxck3BStiBbqhf11F
aZQmCznR/i1RFA+6tsn8zds/AMk1F8OPbC6F3rZvj+p3jWK+4OtNKsd6IJp8
eb3nmCVuDHt9vuRC6bNJN1p4jOod53ZlvT5D5UlVL57ZEig1U8vOD2ViNT9b
u1WtAZICr2JiqRxc4bTm6+c3g6gWGu7V2VUDA2WfNeFUPl0izAUsndiYC1ve
a0/dp45wemj8Mi7yb3JHXub1gVW4qn/RqZOwPpYaFfebC7aglOyLMYoza1VY
b04fxatfNfN3/KR0W71+hakUC0WD+Z4MVie+tEaaFlCcubxC3HTNLhr+6wzY
tnWRPyzmu365CBI91n9vbXUZQeaSkHQByT4cefpDxcGNRIK7sLLInxFss9wW
yL1Kw0xoXIR7OQfdLd+C+mgMrCGOBz7yL8C9++NTEkYU73l3pWYc6sFYze79
7SmW0F1rwdNhSiIowcR9iwIN4dpFT18b+0GyRP/NtCGJ7d71PgsoXlz658vq
Ajc/2IhK+hqNkUg20Lj68W8f0m7+Izfu8USmu7aw/zcCH6pW/qk7P4zUTWNz
jpHt+M0nJ5JJ9ZfuaIGMQ+U0aH9U+33LMAhTv8z2VX0l4RacJLotmIP9zlox
908PQu5zq663LtXLTDw8Y9RpeNZ2bvPmh36QmKFVlHWNYq/ZZL3xekonivPr
3jzfiBPXGSts9AksTdOSmxVhopYttGpR7RdkcFzt1R6SyPhytbEltR9SdfuY
mh6n8Vo/zadDj8SZBVeW5zmNYCz6hWmfcB+SlwYXdNZx8XulZvR5417IJCrV
ZdQ6QOdX9Pdb67nQ2/vhPGgEBhokPhrJsOBWYeb5o4mEpnB898mrHNg8SFGJ
fjyIWXUmK72GgF9Fze7cY8OIXf8Cm/+1ITTSbCD45Sh86BfMjS51I+LVkpku
XX3oyw+6GlRwMeLXMR1v0wvfRwJPY58exzvZCW9cINEgEfR3kTUb8T88iJBw
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
QbKnmcgzqQrrJz1rMbhMTtivH3Hdf7Smpt9jPKTgri7ZzyI+EqrXtRmotrxu
IB9Tjga7G70zj0YQcMFLezKtEy43xty/rdwDkbfO6bKLuRBtkA/hJ3787Bjj
4//PZ6o7nel5l3h62ullIzwq5N+tFSvkTjWDX5B2rW4zmd+WUqNg7x4s+Ou0
JUnEDj+u7Mn4SfrRK1k58B2Xhm7Rtfm5dh4YrD71aM9ekueHLrqUrqHhW56J
23ILV5isvPV9dIyDlIcyT9wEKLx4whNQOTCAdIEj2buJbxb63S2+Q3yz6a6z
1wfim2nSqnZHiXd7zLJ+HBbRD9Pzg0WtioV4XCXc+vIuF5NuodLfznIxtXvm
WqQYyYXILRHXa9nYsi+vJVuwH3tumARaDrzFVrpH17QVB72nFg5l9bHwPrTH
gs+MBu3JRw4VF4h3h5i2z/7TC7UJ/1dlNi7YsVHVdx9FeOas4wab2H5EM8YX
ZU0VIsJfNHGC5PDgccejMoTTQh9//SNDOO2Q9uH9Q2JcfPf9aoErFLZI1itP
SjPR9UQ3TSqTcICZmsh1McLZ+vfGU871428FTft4LRfibzvyPPZ1gzoepijb
fBI22qejt7VyyLpn6rqSPkn0iZEW7GXA6bclQ9Z4BAJhnMVZ6l1QOVawv8fQ
CNpDR9fM6+NgyqW73Zpct27Der4b+gNQTUqGiNQIvnxIf7shoQsTeenm7lfM
8UYr5c3QMy7+mWvmNsdwIfYUP9PJ+n++ly25nMzFk6uqrmLqpL905iitOeCF
OQodR/uvcXC01tTzm80w4cOAOC3CKefF+jaGXaAweu9C9Jw/NCzC2UWR5R7I
TVMNn8P6/+fAzQUygr04sOt2vE+CPTJMlBZX+HJwV+Jy8+DeYTxND16qdYIO
0bOqs+QNOFhdazMzK5qFBwIfbmWI9qJ9/febzjZc2NW8Erv1moNHM8cXeW4f
Rubz4113X5NcXaDacX58EBMW31MVLZsg/XJnfdFWCnFSv+8PNDFg/rJKO3VR
NeYeygrXIZ5YdUrJ+BDhsMgbIeU/xWkY1bM8fryNcI5OoHUV6Y29ak9iDYcZ
MBFaHJV3hqzv07sL/6PozMOh7OIwLJVKktKiqOyStZKl1KNI9rRZItlJtuwK
KSUVkZCUFpFKtiyRFmUJITtZx9hn5h0SRam+8/2r6TXvOb/zPPd9XWPepokx
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
moF4/CiexM9wCtR2wrJ6ebJAKhuOp9epnY0jOZYfekHlsA2eUZZRve0UxDfk
hatt6UPLtMnHrcGnMd79Uj6Ul0KIinKsxAkaJofUhPo+eOETdUmm8zLh/HVO
ndO7hjHQcE8uNroReR98L3McYcPkYYqimi+5XudBhYoHY1h2oPVjDNmvBPNX
o+HFw6je/++DZ3AzPBfkxw+QeVg0frBHdN0wtoS3OSRxNeLumTIZYa5xWN+j
nr1q7Ma9GcufN/rNoGH3IIJFev/Wc0sVMdL7Vh2SLZdErSGwRjSUQ5Dsu7FR
8+6n3TBzNXF2rDPBX4PjARf7WNBqMBZbWj6C/PGeRdnxxCOOX9pXc4CNrrqy
HV16FHRzN3bd3DoGA8P6sG5eNpTdXla+8Wbhb/fMKBfnCJ6u3XVyTSCFexrc
WZ92M9CS3KrD2tuPz+Y79T+fGsfl5Tcj8pZ2Q5WWH/ZlzBDce+nHduwnvh2j
9H7dXgpU3ba3WwVID5/g0ujJZSLYyVQi8FU/5B8f43nicQ5ZjmXlGbXjoDnd
mb/vAPEpLTue4jNKuCXzSGRROhMB0hLnL7vRITxek976KhVJ9FfXtTMoTNYZ
7Gu62Ifvkq5vYwrcUBY26/mM5Ezjp8aby8IoFFf6LnhXNgbrN3kmVCnh7DZr
tapeOh7+no6rOZSLZ2eHuNtOs/DTJKa25C8NLlWrokLq/WDGd9L0zSU2rh01
t6kiuTOYsZeb1W8Lv7EFn+OIj5sIz2XOSNMRc4/v69uWROy3DLzH/f/z3y0e
mHFe6MWca/DdR3BC3E2unIzf4/DsULjfP0a4PTulgfP27z1VSTdXKXGwoOLZ
vDX9VD+SHRbbnwoKhLFG9ztvMzYsDm6xbbxKYcGdw8kmrWP43hrqoR05ji9f
d6lt+9SFGf0Uk6GlB0CpbNfkOc1Get0KqTUNFF4lKE4JRTKgl54mY67Kgos5
VybX2CBMHMXe/cuvgoZB4YnWfSw8VOn5R1szhEuTu07mbKjBre2r6LzmbAix
P94VjKTw41+Wh37XGLbpxD948J0JhXeFA+feDKDFIzvo1bd3kJh75cz7/+ds
932pNhzuxfKC8I9+1acwFDJ3eh2Lha3HfS+u+z2C+k8Sv9XcO1BkzlWxk3hK
cd66Te7EU9byMg/pfxiCsO/Ttr9eLIwe6j5yfmwImy8J1+/Sb8AEtSKqrpaN
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
vCqjazhQm5GPp7ygIuwKe5J/ZSCWrtqbnDLGwb+VO44r+FBxtnCnZ8Znf7hP
BizMDScwsXe5iuZeOp6EnhDLvt2CpM79aj/VR1D/Y66tzKMXO5V/i9dvOIlT
39ZVeawm0M0fZ2RvQoPLoo3OLgL1eEzcu0EhfSNB9HLOKu0BfFj8UPbOjDP+
vvzkVrWMizrqqDPrLAWMS+rcX2UeWG29SzXpKxd5nfHbOCEc8K/w13e9SUPu
a/5L7tFk7vzdLBMQzUaJVvyb1lWD+HQszb4hhYNzDzMvCh0cBCWWcN4ZlIYQ
bt7El/cEru42PDTPjAHZbf2KtUQHeu8m3clMI7Av1DainOQH0Tf9p9cZtmGT
ppbi2o083O84lr0mn9Tv6S2MlAwGXk1nrLJ4woH0f4fshuupoCSdjaprCMTL
2QHh/GHSBxp2j64aYKCw67LLfL4uGJnrhVX+IVAUHHlBai8Tja8lzy516oZA
f+Fhxc8c5DQYSLCWDYEpNB5ZdLoIW+7nb3dZy8PyUs6Tqef9EN+mbJ+g6YCh
O5eqhs6NQLxb+YmVdC+WtJ4yHBAygSK348mXA2Qfu5kc83Ev2e/KC2wuCpH8
JOGoKvCVg7LSKcoC8SE0vU40PtVZBGHN0zWa6qTOUrzaq9364bVAcuz4dzs4
nEg6taGe5KwfUWr7jzJga/ODfqeqAyMn+czYpP9sUNn5VIv0n8yhf3frpIMw
cKV785dGMqfnPPKsMyl4sfjXlPN1L9hs8jRfTnL0W5t7+N7OJnlE+VzXx0F0
cNs/7ZobwU3VH87fB3+A77qJ4rBgu3bXEVX59TQyb92cGtP8yH1QK38s8b4c
Oqt+Hb1Dzp1HY/4e9dNsxH7QMfa5RsWGveskppbxcD7ilgPhSyD6lNVx9hIG
9jVbdTs5jKA3/3mNq0gvYuZkhua2GuOM+/w0/sc8fA3Qd36fxsNtzXfbT74g
sDi8IJtew8XVJRv3yhpxYPfdMq5+Pg1WE7+RSOPC7seV6MUkf4Q33JB+fHEY
7sF/fEWvcaEgbGbx9ywbVWmWgoExVNDW/Xfe5wIB24WPilofDePGvns0071f
8WDZYotngTzonL8h2yrCQ5zk7wtHtnKwviRKaaaKC5n1H8oYBzkQPDjkMfJz
COHy+4mkagKzI4L84a8oEC8OdX1e6oVN9OAFm6QIPLyhukD6Kg1MSszxGc8G
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
IvgVDihcd09pJ15W93t6WTIX/Oc6WzR/D2D5j4O6/B00+vpja4Rec7Fs3y2V
jD+EL6y35Ulq0lhVp7JtUJyBP8yhQ5VqTrghGyYc1cHF2vnZFvOO94OxqL3k
p0IO7giliKQTH8zd+LEucj0XOkcyR6/G9uONybDBtf+fJxENj327ksa1mRfu
C75lQ+TDpsSUEzwU3RLTcSJ775EUcIh3cxhLpIOeLyGfc0vU5A6PJC4Go6uO
Hf82gLtlc59nTFF4PW+ffOsJNuSOeLIuFbbDxdhmyI/k1ZXNcv7Xj/GwnPVq
zwThkZzn3sbpXLK/s0r3GI4PIVPBMN/Iug3lavnvZnFGYJVLv/82vxNxKzse
9/mJQ7b3ln/Hewp5E/uSldMYSNNtKTvWfQnXheMlE7spzHofu4qdNwQJTumW
N66tOLQ2qbF5mIu/y6X9GFeZeNiV3TIh4IXja4TMfNR4eOtnX76FeCHH50zW
1GrihayRq+pqNKbrzOX+8xzGvwOP3p+51QMb45PntF6Q3l/essWK4uC+TMpp
sTn90JjaZ791JQV9Kud6szYT9MqfZff7PSA4KpE/RXrhr8HeK85GpBeG6y+3
r1CE4PXCil1XKVhKifEucxlwaHX/wXfSDW7Xw+8nvxvBPgfRzZRXJ/h8P3Yc
rN2HsXT38FvLeRgoZ+z+cIfCmpI4Cc+jQ4gM6W9+RLyrVFkyWpnZA+Wd4iG8
JBvMfbWNX/0xDx1fVLpnJnQj8KBWKDfTFBrdjpdGCWfyLerif+jSj698+08N
u+XCZWDI1uUsjU8LlnDvNgzja8SxJ67SDASFxiaOkjmZ0BF//eRiL7bxNR56
t9YOY7TUkEUAmc+rkkZ+5zkwKtbdsDCNCZU71SMPZWn8WZ+qorqXgSqx0MUG
P52w8NLDawpKpJf1FW7KkflYO2ZZr/6zEtZ6fmtrYykMu6477ZgyiOQiYxvW
0SbEPE1r35VNo2oX9ThImguBx0afQhP6sd1+a5hwHfFxcXfLmL29UPJzzns8
fhFvnV4W1hSR+0v2OFiixYXixOyPZdMH8GGo7cbmGgqKfK/trzgMYVmTRLXw
4RbwKzQ//epMYcMP3f0pvxm4pnh1uWK8G76vfJn3qpjwTAh795eTZG+Odz3e
uGwAYVYBXzZ8JvnDHt1nEs2Enmuu4USGFxJuWm7NPUByLO1MynsFkm9Mox91
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
Go1LAk+kL+WgqkR4mx/JVe39zzZUbCS5FLz49dM+d0je85LlfzaCTX/Khqai
CB+Gbr27OuAAZv/unP6OeNl4yV+BrcTLTEyMVjHV2xGkneuuHU7yJEqlxtN5
EAqTgSl/LRtBmVedezLCxbtS46//9/RN/hnl7O4CeN3I/xT//3vJbgXNcr7D
goD50O5f7bXo/ldfLyQ1gveK580V7nfh8Z7HHu41p9Bh7PRIXJvGvso/ddWJ
wzAWqO6xcu6FsNP8JVu/0oibcelJ/RQXPFuxJN9mFuRuz4pujePh+aCO79lH
PNzdfWRr+2MKt7MmF69VofG3qpB102oYUrP5LVdL9mCn1NOOa2lcJGUvX2v2
qA8e4fXpDINkSCTKH7nvy0NGxnQTgc5uBMav6mMtN4fuXvAsF1Jwmn32afj2
AdTkqr5lLymBWf7M9Pl7aNzgrjgkcWYYltu3KP1t6kbKx7fzFDN5uJ36yNXF
uRsnFqvG0u4mKHj3RTRnHQX+GqeJz6ED8NGb5DccKUPG5s66m4EUDtMF2rsG
GHgwMqhgIOmGDdkJ05cYkl57VvD6NMlNqz2uaztWMyDslS8tROZqdJXUv9Yq
Bp51Wi7eftkVuz0ertIa4wLKmspUfT8yDNVfP11VhGsB5o1hxB+pF82f13ex
Qbn2WJn1dyKoMazU6tsIMt4Wxxz61wE+w3FrsQMroFOxeXb2QR6uTBtb7apM
o7BNcHXA3GF43w4LOkn8sejzOdklxB/HhU7zfRGnsPasxy9pOQpmD5Lzf9UO
YPGpFw2ijAqYWO0/2feMQlhwmOiRwkGot2ozRe83weVYabBWOblHt6TfQaZc
jAtuLGncPYAnuba1zgk0vka2PDC704v3fH0J9+fbI+vU5QyxUB6aX8+Sjtfl
gfXl4sWeAS4qud46M0V5EJXmC5+WQsHBV23wb8QQhBjy/DwTCgH59tp35zJR
rnjo4tRSdxwW3mQbZMODmv2TjRafyB6viIjU8uZAxzPFx4Z4x5ms/IFUVSZ6
Dh3ZrhnmAddXP/jYFhRuvTBdFjOLicvrZgkl/XGDYsW6ZdtGKKScWCDzaA4b
MxR+m+s/a4OoaJWayF8uOrM2SEcxSU+smyf2+XERfvk+fM8vw8Ps/SrHNvX8
R9GZh0PdtmFYIYlKllIJ2dqELJHikqTFkq1Iki1LhEqyRCplLbIlIomSKIks
CUWSKLJlnxnrmPkNLdRbqu/5/o3GzPPc93Wdp+Mww4ZyXAy9d/kEDM5lyZm8
ohDzr9M7z5SFyKtF5c/4RqC/72rp2QsUJOMNxfoPToI/rOHk9TA6ZCtEtPJu
k/xv8T+oUj+J/buY6yPvMMChHtvcHyLzeTCGL69+HJlXB1eJp3bDxWrRzY9x
FKrnW53JTZyEvUpHncFaBmb2PFfV3Ethi9rkptVXmLiwNoFXrm4QWjYy9yeK
2GD2JdtKVtKwfDPz0oHlZ5EZVuXSMcpBoa9tHn3ZAD5fEjRsE7fDkep3I1rF
hDeaJWMKxVgQyRicDTkzjImKPKedjhT+qNMzK4aZsPvpWvTYmjxeKUKmH1MI
0Ocd2s3Pwt6PtvXbLIfBPV067jPGxuqFbjcPMcax9q7N1i7Bz5izlLq/hfCA
8uBWdw9nGnbqdsoLTZ7GYRGN2GkTDhbRZ/jFnSiU//i4m9ubCQ2Rzq1Fw2zU
y9WzCiJo+LGlwqHk0xkU3I5aYbmeA09tt5bv7Wx86pw3ZTw3jme1XnnN0hTU
e5Uc4ukTGL4lyFXwsw+ddzhUyXUWzn3ij9rAzYC09rqhmaTreLhw4ZVt0WT+
smZyaG8HsJVjbjqb7gRNJ0Qs+MSBc76puva2AZQo55zOXWYPxg1V/zQBDtiM
ZxqnyPl6TW9TbWO6o1xn81FZwifj+dXqT///vrybDHkDdNgIXJeupWZIYWIu
bH6bPA0neWfvM+1PYROfx/YEwtW/I5h2RoSrg+oXzTw9E4j8m7/PXHzJRu3h
0XnWyuNYT/dCq3En8iu6FQ6ZUuhIN9q34zYT/lIXH/tvH8L2r0r9b4UpWC2e
kdDPmYDR5p7AWL4+KAsefSFEvGzTesEDZqvp+BS7hN195RwKpBh9P1gsrB5d
nDovfRixu67o8Q1XYS3PTzb3WQ50j5TRub8O4HWXhuW+fGcc525pyjZgw1Xp
8dBryVHIHLkR/PRIE7Ydn3inO0hh2OW/RL4qFoSfHmIqy41CP3rXhZpM0oN3
dJ6dTuRg6nfd2C7CQ3KNp/YxPpG5VVuwcuUNFioWxFWEl4zg1+2jsgY7KWRf
r4v7fILk+c6QzxHag9i4/qryV6UpdCkJrckM64dx+EH5eW1WKNbIEdQupbAo
WHaOby0LSXyXBnlvDKOoVtP5rzWZkyXSzaeE6fC7k/T7i/E5LHjSr9AdTjz6
68ZVo6M0nDY7/kFe2R/0NSpv94xxEB1BPzEnRHxH4Nc/y8V2qP0xYX2Q9EuY
cZmmhRsT8554FG9ZP4ix7dGL3W+ykCB/foHGBgb0Svaa5+akwnFNdWkF4Z+A
xQo1Xw9ScGOZVHmaMnFiSaOEdTUbLUM9R/+ojkOdz1dt05FOpFemusseJD3+
MajKKITwhanCmfoSJsIepMyB9H7cOe3MVcXEh9eLfPUwrcbzpOGDwsQPk/1/
/TKV5aB8/HVukgvp44HHpYq9FCIvSCzMlR9CxM/IkY/HPLFCs80ijOR46DmO
Gmf+ILR9f4e2LHfBhd9LN5hupHBX8NirqztpmKCHcAqFTqMwweZm6hyFnqmm
h2VKbDyev2VBmOkYdFIX8HZ/I74sy7Xvm8QEbL7IJR799hmt25IcjAkX7VWJ
tzdVG0KinJueX5knZlcFjw88Irz3wOirGmMM4ikfrnmt6cCjuqUr12qz8aJq
PKx1egRzI+bFu742Qoy9OGOE5GRh6O/mETMWcn62XwhfPILojPGiIPspkmtv
bJVk+lHCuqx6UMwMy7KrnpTMp/D09pkvM0cnsP2bnP7Sbz1Yn/Zb982VKdgI
7Y2S7OiD0JXTKuHWe7EzImDk/58DWyTg6L9tLx3qa+7ozuQSX+sZepUtzYE0
n+DPB7cGEW9nE1Ez4IZ7FdcH7D5yYOi79UK4LpkHiYCaKwftkZGX8PX/78ux
YZBLxlqUwoZO59H6exO4pWGtG+I7Ba3EGhvXv31I3a7yJijJGL0PItVaiXfo
rdhovby5D5H+u7nco/bA3ejJka9mHLTwO3/3I7wZ8P3f7RsxTAQonVaU6acw
0x/3QrCEhatGJ4y8l44iu1l+ZPAmG3tnPftfRY9h2YF5uiFvPmHnx0gZ5Q4W
7K7qdv9VHYaXQMajwtDnMPjXZ2QdTGHbpguVRoaToE96vRW2oWPRzzV77iex
UKrkHh/aQceKoG+v2jecB2vTGYnrfRRE+CR0Bwg3nRPZxV3DPwqfHX/MV49w
wP0sdsZEbACNstpPqwzs8OXl2/nnPk5BPOD7vNKdxC+oG9+6rdSwQNvjWwE5
h18qZ+L5yDm0uhpe+xVtjPvxwVsdWqbwpN44vG93Hxx6tqr1blBH1Po/OQ9D
OPB4oG56cjkHOzcekxDZxcIiU/ZpFRE2WmOy+d4fIvtrcNDTkzsQDK39K/eQ
uTqekeyXNTSGqr8KT/eLdMDBvWB1Qw8LFjJB+b5Gwzh/9dVXvX9luDtqcNq/
mfCJ7vuCGt9xGMzrkxcx7QLXoM9t72jCdeNRahYXJnEwxSzflU2HtsaxigPv
WMiYO35KKYuOp7HTpdt6g/CHy/aQ0lk2omPmLV/ybRSvO001231bobZesmby
NYUrZlEH66xY+MlvOpu0YgTzk+TU3QTZ2NKvv6Fn/QhUJpIz97S8hoz7q1/f
g9gw0M49ZiY4hteeU182dbSibMT/Wzmdg2bZ3+mLVg2A5+uLnMsX7VC/00Gy
LIiDuuPCnUVjA5j87iJ/z9EZClrd/ue+UJCST4x5yMPGUKyJlwR9FMe+SIXF
/ZuCQruyyjoG4T096udZtwbddIvtEwcNKPhWfXp7yp+J/KQVOwb9B2FYgcCt
QVMo/uc6JMrqQ5ZZbVptzn70/wzPuOhJ+G1qJfPsokkkVDi3+lTREJCSdPtg
GQsFy3J5O0sY+Fn6mScruBCzK7tz7cleLxrc/WjgywiKePbwRv1qRGNBQi2r
mPhIt4f84nnj8I9+q/MqpQO8lYOb8jzIvAkkqqXOp6Grcdz9+3lfPN+azPHX
5+BSwUnH04cG4SSybVmykisCnVTiBn05+FnwNFbv1wD8JPL+Sg85oy2zFv8F
crBOIq7w/EIOnv2Ob2mVZGFl+27D8qUcxJ+4FLvrxSC+pvQ1Hy51h8uDswfV
DnHw717y7gMXKQhpx67XqGHicWxE3fHTbLzxE9HQ/ElDuZv/8sc5/ihIGLr3
zJLkan+YzaUiwv+6/+3i5AxhlcKbiuFTFIwnRN8nyUwi/7Kj5ubfNAjx7TK3
9KNww/6h8rtNkzB0rzwuKUKH5LeX7wYb/v85wjd699uMg7rmFMOgOmGVci7R
7iEF+cyIdarfJ7F8ZHSRm8QwxuV3vSn+x8Y/LgFajycN8Vu3rFWXPgNtdyXe
hd8oyFSUyCUuYhMekPYKmR5F9IGsk48vc1AWw47YtJmDe56ZWttDWRj/b1d6
/M8pHO8O0F08TebB4mfLVBEfWqu/2V88TOHr7L5o3wbCVVtnZS4J0HBJYoQj
RHrl0c4n/e1J5PwjDie8qXbDnt2fl129STjwgENYU9EknqxZlCZykoHhH2dP
3ixkIX4mrrzsBR2+C2fLaNHBmOV6UuSTS3rpekxJnCsDnxPN4zv776Ej1Vvx
YirhIs64QF8wBwPifTpj+0muibzQiH/Dglf2pVvj9+gwZTidk/gahHI1yQOd
rznonqpf5WE9AIcQ33Jm0jHoZThefhzPRuK4cZ655xikbWXvde37hIUQ0PEV
4uCUCZdNcSAbpm3/LYpYNg61lNNXF16j0Jb+K1whahJvztu3/+BlIJ/iG+ne
yoaE00UhBzU60iq/ualLB0Djd+zFBXkkB8p19jJOMRDv/sVy5c5c3Osy/NFk
R2HovHbKsaU0ZP8w2Tb1wRdXdrg+lyQcY9WRurlsMQNmUq0utxg3wEerTrUk
/NAoN/no/iYa9gtfG7EOP4V947bPk8rYSPdKTg95RoN2xnrvJpYfbm2ckflN
PHHvzK7oUb0xtLIOeM5lt2HbUeFPDcfZqFLquVn0ZBTTWcHcLz9+wHtP/mwX
4juXJRKPdr4jXhWvuKkneBLSKjQfN+I7mpe4lJVSRtC/NuOo2YYG3Fz+rc60
g5zbxS97vqfQ4LF5RUu5uh/MLvBpfT5OQf9CFveyGSZ2PVebehdOQz81vm/q
Kwtn74e9CqgYhrGV/B3L19XwCS5tuUd6av5tmYTZUhb+Lpt0cxcdhTTl1s5k
UHjW32/2qIWFrZdlqpZZjOLnkkXHvhE/1Twq9fujEQ2TMilv8y1O41HijiNG
JGeWJBrR8/gnMb9O9LIt8RKVutErbmZTOOPv/EVOtx/lF/dUrDlvjsarO+1a
I1h42FVUqkun4/eTYOms4PNIr+gQlPRjw9aTz9qNMwrD3T79EfatSG9sN3tB
vOzvqbOhty8PQsi8TsrSzA0JtO25G2MINwqsqRK/NAm58LlPmd/ouO/CvU4h
lMxNnfh/u1eNYYWO1VERgTYsTlbqyrLgYO7Onjsfz1Dw1kKZOOFu/VqjyKUt
bChtfSp79Mw4GKPhO+xsumBUb6/3rYaC69/fv6sPD6ElfZ3PksdeSLpioKax
kA2VmgH3sOWEd3l+vJ3Z8RpHz/DE5jApfP7R0sFcMITLX08/fZh2ApwXzbY0
Xg5eXx762/ZhEBfpFy58VPXAkpPcJjPKU8iNXm2eHtqP+jgNPvUyK2jrCPhK
ZRGOUske39tGev/58fOprxjQ3FjSPaHPhgjPdsWtK0ax//zEUVPpJtj892m8
NZmCQqRIwqH8SajYX3q3344BnO18XLqBeEeS36n5D0fgPjRac/JlA4RsRK9b
6nBwcet7YXNZChsVbUwrmiawO8MlzIJ4U0RWyaNdhhzc9XCbDathQWqYnVXF
T3r8fZ2iypoRGHD3zVw/9RqL7XqerSC+Zrg+0UmU+Fr0xjPqvL/G0d727/pA
/P/fZ/Ljnj/2HDRsqfn0/98D9Uqv+eD8mI1emU/sTNJDn+pvfLVTOIvUBLkn
xkUcvKhdFLz9POlNAVZK4XMHNMa9fBtEzkHF4szG3alDkDkq7LgR3lj+/DeP
SRELF3xiPginkL2eqa9oefYQ8s4hj0fYbHB1KyyLDKVhUFhEUSD1DIrWB5ks
3UY8ffETkzwjJm7fsfL9dmsAefc6DlllsKGdfUHkbvYYhAyFTjrKtqP61YKi
401TOHTJ07/BiPTpHcdz8Yc1sO680+Vb4hRU+a9dK3k5gT9C325me/aB1ezX
00h8IVVU683k7kHslzRbF11/HOmxNmepg2yo7XLQcTwxiorQtcYRj5uxTGR2
Tbg6hcAN/LHvNJnQtCpLajYaAH/Foj13yPyU1DdI8Y4TD3omtW9+0igecf15
2RXLwY0giRUNB4hnFP8V1/lMcvbuab+FkeTn8hcpZJD7DLS0/8D1kAXuQZHP
OskcZLKi7f88JbzhYvc+ZqkTzq5TiN85MgXhOT8fV/E+hH3pPFO/UgEFI0tY
Co9ZmLaQli+MZWBCXT5GKjYPFQMD1BclCqv9Re57STGxvLpu2S9WP17J6l5f
s4ADxR4tyyILkk9GCrFCBWM4nyTwN4SXwru+cnP5ExPg5p1cPyfTi/71D9SW
sFmwGbcwcSZ+6tI8c2ohswql5o6Hl/ERTxl7Af5TEzh3cw9LTLcXLtF2YcF2
U7i1tnhGXqEfzV7N37fvNYO9vb6cVQwb94Y+9ExYjkFuo/mmeqoNkVyDf27E
UhDckXHbNWISUZUBb0/MYyDvgLNbieH/P/en+7EZ8fSsQ9WuxUdOIXI4w2vR
Xg7mO7x51GJE/PvS9fCF6kxE9zh5vmKyIHmwItiK+GfOZ9MVzfurwBefWrqa
+Ga4a6jJnTEa5tqXHWxV88fufEPeAgE2LpwWKtW3p2N8Xam1pVog/hTtyN0S
y0J2YfkxxZ90hNXaaI1ujsL8B2pVTLJv11sVxZWmJuAWItawTakfWS1m7sny
xKNH2UfOz06g3PLf65n9/Yjw3FLG28eG47fYEM+iceiaOTuH7e0m+z5hKjxB
YRnTXHQDnQXtB1rR9eGjOHT4TOqpKgqHuTJcnzsMIfl5cERNrxdk1n030jnN
watbl7/qsyg4Zmzd3PxpEotZY9uvcdhQDWma3847gfj7L5zcUz/j4+WZtQ7k
8ZP6jq////tonhC+5f8qYhR8jx83eOewEOi4XEXRiezd63jhaot7WL4m9G+d
KwXuw1VfY34yIaqZZdV9jYbQVuvN+204+FKWbqoeRfq2MFWgup2J6ksKvCFJ
bCThiPGP4DHE0/5omMV8QtizE2tpgxxIPrlzs1hqAOrfbi1a3mQHvdep15Ib
ydyn75SeI3vyfcyl0Gz+MayYZxY80EruveP3uKzWEHjMXzue6/LE1gdb/5Mm
3CW73vGEuekETFzjv0SW9sCHcbOzl/T+qEZMgTh5Ht4q8+Z5K9Jw1bA5Q9mF
zHnjj9hmDhPFkrIp5/1IfzV8CvyVzYLt2zDh1iMMrO985nI3OhuXn0iMbNUg
3C6kcLhbm4mevWIXPxKukewPelq5j4OS4Kdh3HsHoVLm7fOn7TicdH9mOxpz
YF24LE+d/Hzf/dO+xfZM9OqtYu4RZSPj06pAY6MRWFwTiDfsr8OE+Mu+FQIU
Ds6EvL93aQIpHwyrLC73Yrr8rrKPLgV/uv1QxGYaVh1eRbnGn4KdhcSew24c
POEveLmaeMxg1QHVV26T6G9OFOkje7cm6JHucOYwUkO/Da6QfglN/VOS78BB
z9t1rPojg5hNklpTafb/v/tbGrG/mwXV6+ZbkvWGUTUVNeBrVYYe64QOOXK/
lR/ck8UW0KDXIVdsneiLfWlmC4LLprCgNinjyP8/5yjG6pETYwdS10wFXf3C
wXVq1YbcX/3I2zVv8DHHFimeG44aWFAI4fSFLX/ExL+jLgGVkUO4o1htd32S
jTn7owOHvxOutjOcemz5GQ+uzq5tr2ThpqVDmHg92WfxWebIkSfwYb7hy45n
4VnNKSpZgMxh8LrX8XY34C+9QGDJZjayFFYcWKlDh9n5jMRk+wCcn960cBXZ
9/9+f8ldaEzBL0uDfZfsu+sd+yRB4l2WolOancfpOLnZyWPcmfgpbcljmS0U
4qKa6VwbmKhfHsH9YNkAeg+Z3L4nQXowS+t+j88IIo8XBzf/rscp0S0e2iB7
JfNwubwzE1NOcuPnhAfhaVq2U1aNjYi/1R5LNOnYlrC5vU0zAOWS56lTulPg
6jXXaHfsR2N+iy5rtyWGX32gWypQuOa2yOrlfxMoLXKdemXdj195wXknCD8I
hW3vePFxEP0hG9MeaXlA8c/N+1wTLAStWzv7MGoYckdePVP59ALHplxjIjdy
sDImOcykn41f8VkF84UnoBPHt+c48d/ueT5vd8zQ0MwzMZ5wwx9VDoe6I++w
Ec/d8nw3yfEEjsmI6b52BGfUnssh3hTW7M69j3hT5XY17vp7Qzg8O1YzfJ6N
TzyFPO8pGm7rXZ9udfSH0oDtvDe1LOR2Ghfk5xH+b5dVeCgUjLD3RXGLzxFu
2Upr0vk9igCPHaO8N1ph8cJHcbsmhe+jNflP1Mk867AdTKtPYe7EzdNhZI71
NE6j0GoIrz7brI665gXF0HcuMbc5kJ6/ZaVUDAdu78c904nvTd8RM332kwWR
oBNxTz4N4/V11emwdbW4t63DLYr04Y9fFwaqa+g4/nLNu7KcYFh1X7SrtSX5
pnq90nUZDbO8EXlf+nyxYpG1ZW4jCwPurs+7s+jo73ydeW4wCCaRPiW7VSnI
tQdW3N5Gw/qBG64TA6dgudAuPf7RFGw3gG9hVB9q5VQWPG7Vw98N1/5GTE/B
T09Ak5urD1zmqiICueJ4HxLklUp87wTNJcjqGB1/HzAeKGsH4uSLdjspXzZe
J7X94/SPQuWtYFLbylYkNN23iCF7d8Zr85snvMTbJ1ZHNcX74sdm9YEI4vuX
FqZtOjPZh/hOSYWYpP14brjH1/sZC632Npfr7jFQ5OR35IbTIxwsv3GXi3gu
V73VQ22pSaQUa8id/UrDzUzrt4XNbKwW8bn/9NQ4koYnBprMu2DbIHmMNjYF
8VcbS7eIkL3+0xvvxi0HR3rTmI02Bfpw4uVnZmTO6bvOXikewDf//G3yJ9io
3ni/xoOLnJvgdJNBjz9uDSqXDJF5TmPYvJOem4DH9yqaApl39s6njKPfyD3O
NqbOzRIviL2uV11ji0ovd3qhAgefP5zadv/aIOyllLLL493Qti/RxesvyfMT
tc+3G01g6I7zV9eHPdj39s7tQz7k3MRubdpJvD3vXD2lWO6PilXHbnCaWVi9
f333HpFhGPRV+lbElMD7Rn/6cg4HXPuO6QbOG4BZRVupkeERFNK4BTM3UojR
fPTygiATg2jwjr7bDxvjO2v8iI8XFh8LtuocgGiQz+ldX51wmlHrxSLcc8X5
0LttR0fxe5nzkiV7mlH1996Pyf9YWDB6LHfUh47H/CGMczmByBC/qbY4jY3Z
xFG+9lYadkyfc/nvwVn84meERBlPIWxbJ6N9dz867uTmFQ+awzk1mP9oNxux
c+J7PLPGEa0y4n+DvxtHLcKDI26xoPOn41KIKvHTdQ/vdrLTMLskQsxoFxu5
lmv/zFtHx4en15QGWs9BI3sm7d1KDvIWfddfQDhXNTd4sefJcaztqEx8F8VB
/dQHgZrGATzffE846q4T7hsYjQnks/F3f42gbu8Y5sLPY83fdsz3OBYl8ozC
41VSL8fFWbDYsfUnI3gYShMie0yOUWiVSOq27mfiQb7V1mADGjb4HKvQv8uC
UlHib2MrBhz2BdnuyryLbMlZmRElNnZEsFUe1YygRMFg/JHPW7wXyrB66sxB
pIg/v1EJhTL7MnbbrkksFbNn3jAlnOxyfpVkBhOXz9E9F+sN4faz4L0afRSo
WUGXm7JDmHpBYsnCE6mGi2ZDFnLw/pL6wUdHiH8z5/y96saw8aCB7seiKVTT
t8TeDu2DQ6mJ1s1ooEvBlPnhFwcpAYpNahP9sDswK794vi0WeaX4Fh7koJu1
0uLgBeKXZi0yyyqZwNacY/d/sdFX06DyQnsC2oFedhfce7Dy1Ur1rtApuMs4
rxylkxxI25zIXbEPfUdWHTZ1YuPLdzkrtYV0HFF5KKctcA7DT7TjTevZcBNh
rBQzGYfO9Sun3r/qRGdleUfpdjamPhSeqfwxgq0/hOPur3+HnHldRrPk3hk0
gTVO6gxMp6QUzDinQ8Jkf/84g43mznNfz0TSsMVCRvlp9xns+rPU+1E7Cwl9
kaYjyXT8iDzKq5kahI79p3+2XmchrD5pQw43uRdH20q0XceFnj92MTVsbG/q
dNqpNY7WQ8Nr6T6dGOJZ9bhXhvhLwaVUvpgRzJmq+t1qe4MWrfT+S4SX2s6c
aCzhoyFQ/9SBmgxfCC/4+U6mkA2XNbtKa8fHMLiWlqKn1oFvSn8Hbz/jYKDq
hc39swO4NP6O60ysA7hi/VI6ybw55eUtKRoYQ/SvOKN8gQ70em9U/enIgYi+
zarGQgo2q0fEGKqTOGRxM7MziMI0df25o8EkBE9T6uKW5PXFvnAyf8mG/KZj
+U2FNGySr2Frv/VDfKV6sJrpFEQzzK5d0e/H+ZGtL/eUmEPZ0X5VSicLRlqX
GHOJdCyYFhTlig2CQPfHRP0Ect/bDQ9eKRlC75K6R67fvXHCcmvxF80p6G+U
ynzp3Q9R+eV62SxLbCn84Tc1yoLL8rnKO2HDmGj4IPBz1wsE/Mwe917Khn/v
bteVW0eQKn2h/bJGHVblL7zzfZr4ws9rPBeCSG/2n2GsCz2D9+2DJYLk/N/P
U90rXEDD6R6pmi1VfuiMc4rXiGNjYHzpntQ+Gswa4geXUWfxOS26niPFQetq
/y7dEjaWvnFzb3s4jjHq+C+zlxSMe76E3AILl24sLIqkDSOzyn6RI/EIW6k1
XJw4Gs5vcjycx+eH6QMDpf8q2VAxgLt4EQ35iVmG87v8oOPkzFZqYSNwKuLE
2JlxRG5/vSHAtguDo7w3pTuIBx1hHzNIGAdN/aH0RFsXXm39MHAtm4Ph6wdv
dtzlQM5cu62AzAGdbU678J2F99FmiWa1wwjY/1RmbnMN7FxPayV8J30kGF3h
IsSG/oVn3+78G0X/PB3ucsJR6o6RJf9cmGBqd0xLSAziiYz7l71xHETZZljz
HOaAxdjL3jPNwtjxb/2v81i46FH+Z+VZBmxmRKyt7+fiTP+fMEV3wvlH32sN
/iE+UtdY/jidBtPGtWEHSB5G6TL6tNLZiHx5a7zSfRxVSQaHcw9RUIy9dyL7
BRNKqs2eHwaHML/kxXpbio06B2OZJK4JRLZpPG64/BnVxy1iRsjPX++UUBld
NIzbpgZPujSqEVPNWZVUxYLmuPxk3XsGrF4eHExXKIKOt76+zDbiy6/n7AJF
KDRE0xeH353AvvXBdQvjSQ7Tu5R6jnDwUbzdKPcHC3GK2lbVJYTDuz3dwh4y
IG3K4JNYUYAFcYPtX0nPOioa55g2EN/7yDfvwcWPqBL3zMmzJv2imXXo26lR
6K92HBKdbIZBaULGxYVkfi7sSf6wYgShIQGB2nteo0xKMXVzLBsNITea71iP
Qczkmr3DXBvmWZlb+c6xYBXqUrNweBj9Nj8er8qrRZch74a/F0kuKYTuqpig
IUHzW6jRTn9snjSZut1A4caMT1WlEwtfpZaMTGwfwW3HM8lPFxPO/3denPv6
BD42rNJbXNSLtwcj1C4Hkb7W6IhcN03DxK/Xwj98/XFA2sMqnZuD72W14Rr7
SJ4tYG51TxxDV+QBLnV5DsSfndPd0MjGAkurlsyBcQStV76lRvL50PTp21pb
BvH9T8GiNzgO7z8qEnzmU8jTVGaM7+iHlWTU421e5nDR1uBXqaTAM8c73aDG
QsqPz0caXw3DRyhl9kgYB9F7HnVnSHMQMEnJJh0lX084sn7VCQ5UzWyPF/MN
4vH9a3aOGi7oKTFuzOljwZj68yPDkty7vkvP6IVyNGt41xn6Ex41mVUI/0Ve
d2Dot8Bfk1izal6MiB4bZcavbD4tGkXS7xu/uqvfIXmFwNGMixSuOt3N4bKf
xJvI2NgqktPHS8Z5ogeIF5dEP2kk/rxgwZLDI/+dgVnuycVKq9mo+Ou1MMCD
5HATY1Hau3oor3QT+R5KwYflt/2r5SQCQjr3JgXT8VRk8vxGMm8xltYVLPdB
ZN59Irwy1xWLVuqp3jlC9ss6dMbnAxO/4zXvH5CmgTYr/aa/jYXdR7rTu9eT
e383vP3LYCl2boS29RgbYrutCybp4yjxuv1qs8Bn/JJuPZ4Ux8Ktvbubfi0g
8/m2J71UOx4ifp3Kr8g9rWeUnIp0GCd7WtJhtKQLXqJHntHJ/tasnE7YTebc
THuHrfwsC+fUP//0eUs4x/OE7st7NJRHrah6edUP4YoRcfxjFM6vGjUN7GFB
xjpatcF3FIEKZ9e9XcyBya+rz3II9+V1jjQ4/BjDlcgNHXvZUzgnUi57ZiHp
38NLJlZ5SKHoSbja0V42eFq3SU7H06Dso6QrvcQPKaMB9Z9OUqDZPN6jKTIJ
1qDCR412GlqubbnbYMDB+c/B7b3mg5i/99cNqWWu2H3BwSlFaAqCLnsqOVWE
E4waw2hd1viXKeC0r5yNTrqNTFMxDX+vKCw1GvfDGyN7+xEN8jxZHM9tfBRY
82TUHlycwHmRhMM/P7BAu5WRt0WC9MWPXRu+ryjFywAnv53/fz/2rQUqLVKE
2xesV6q1SkGsbZfk2QwWHKNtH1a/pyOuqkCp+EswUoO9b3wjnKypNB38/797
HqxdONDCGUdBTPm9/7w4qNCzv2DfTaF5dbLhkjuTqAsoS+2+Ss5/c9imNWQu
5FVt3YzJ4y5uGv55Vp+Nz9f3FXUSbmzK4jba1HUOqjxZ/72Xm0KO25NVjUmE
1+8J7ixvP4hcVqZHyjUOrs0TOZpmwcHVA8V/U4dYKKzLLDVPYGHp697nM8IM
qNwI2H5HMRHCE+z22JscFPgKVyKAg98R0enhO9l4fsDC08CSg6BNWq+3+VMw
NGiIdshmovZ2+CDXDg74XhxI2es8CCWVzFlOmCvoD+JXzT/MRodPhVjvuVFs
7L/xLky8Bevtcp65aLAR47/3fas6HZNCr8ZPbQjA/c7zNaaEHx7LB7XseUTh
4ee5dAfFSezZusFhPsUCP1eadfl5Ov5cq9N/MRuIBfGdqqoH2TjYsNNKyW0U
HVHTUUeTm+Gq7j/g2U/mT+9omeo1OiZs6fqnHILw5vTdzS+Dp7Dgq1CO4EQf
8hrX5X85tB+iSmuL/v85ccm8++zazcbBOLTBNby1E1dPXK79zMtGwdiY6GbB
EYjKeD6tYr3C8LETP37YEs5JvlppmUiBX9ThujCHidx9Ji1rotnIKDUtTjcd
w3sN5QOTn9vQlbBOdkktG7Ro/j0h2uModFH0yw/ohLuy8I4d0RTKtW69968f
wtKagzaPbX3waJmohi7pucY1inoXb41hTQu/Vei/T7j1JaJVw4qD6p5f1LtA
4tkjxzfnPmLCtu5I8690Fu4u8+tW12GA1ro6TC0uA/z1ZWJJkWysMRZl0/eM
wbtot61/dRtUBUadFxWzoOG6KOBxBvn+J/3TKvfykfVQLEDyAuGTj2vWcFZz
4JLPiHY2Z+HY2O2VX8QoRCRa84oVT2DNB/pplk4fbjKltLROcdCmvNrNfZwC
53D78obGSTSr1yXdSGDjevwlxYQzY8jJz/U2OvEJ1oKWuvUfiUdcKl55jvT6
yI1Bw4fmfsgLz8zKL2BhB31WTOkqA77H4uzKah6AtsRLLNyBA8P+0Ll9eRQ+
pzx5kCo3ieey3z3OHOLg+dFezZdKg7CIPNz+Wfk41px+W3f0OxuL5bvyVp+j
IZQKivV0P4OzvfZiX3ZRCL+t+f67HxPf/sszlPYZxJHtuw58W0VhiWTJ3rm3
E1j36NLVZUl9eGY/Xqp4mvgMb2ZynuwkxhIfJvz6Q8Nwgmz+HOGYvJeZUplx
xGP0N17zGmGCqimKeH6U+MvGtVHFGRQClm+cFuCfRDbj4ORT0oO6YZ9a0+IG
odiWudQgww1OvZlFz8en8PisFjNiWR/0uPb8LLSRRcfn6r9yOYTrjnUWeNeO
oen66vRbqe34/HTvnQfk3kNqyn6dC6YQlbyygbuIiZjVBWEdYONy5IeH1fyj
mPSXcTr2/B1mzQZ25ClysHEq95flCBv5fwpjGAoT4EpyDbCMYGFcrPRNJZ0O
6Y9hvFWh53F9XqRoagEFzHqJenCxMHiJOqW4YxgLth1QFSEcKMez2fRs9TDK
FSS+NgjVgGtT03LqzxTOtvuccx3tBZcNt+BL70ldvajgjPB3LJyvvTF1mGcY
YX/PGvdkPYND+5d6x8vk/NVkNj12mUQYg1dx9QM6NhkfWJxMPMFfzFZYJ3QI
0XkfTm5MPYnPtXFy7cRzp/ZvPeFEcn1BT7FiRiULUnI9HXnebBh+eiAd1TUK
pe+8dx5wtWKdZNl2Hb0p3JaY/0Tfnvj4khQhZXFLLH/bZWpT9f/cixE3cRnA
/C8uKuvWOGDm45LFX/k4UGgxvlPaNIg7rs90fMU9iDPXq/0hvO2U0vw2t2Qc
BnFCimsPd+OBgHiTE52NP1ae2Wgexy7bytjvpd2wDyiw758hHr1ZydBAjHg8
T+CUseAYJOUig71SyL6cfOmXXTCJXMZFapcTA7vLX/yx6+Wgltso/uH6AZyf
k3q1Wuco0pz/0S+KcGDeFLDC6Arx1PtruJ8qk5wIe5O+z5eC6tEqXp6fQwj9
ulLwmYUvqmbWbl/aTEHnfNeqop1DkPzPMKFMxAs3emYeeWlzMO2dOnFYnMKC
/7qz1B5P4Nyqht7NPGyS6/nqDJ4RSKs9PXas+BVmlw+rpJLX+yRDTrOM+MWi
Fu/hvQv8sOmqmfDfSQoL3ezttvMMYQ/X6pazUSdQsOOBzNUxFuymY/JVLw+j
ebfQa3+vF6BixE+HK5NeO/ujRWaKjUvWIsb/9CeQzXdHt8+G9G/vOkXbzf1Y
L1S7JT/HDPKLq7Sekj668Pkv15/aATissRGt93FCW3lhiM8iDvaG1tpzOxPv
GU5Ju9o1hpZtSwW6A8leJ6pNn+Qbw3w/wfaZ2lYMnjj/7KA3B6v1kl5c7Kew
91CfmSc5b4Fs88tzUyzopyjtrAuk48l3U+vXw4HgYR49xrOHwoDUs1eJYUwM
Hs+LSXo0iA0P43r2rqFwTHni11lTGk4anrHMcz6Nxqfv1DS+EF5psx7QJd53
/Yu8Zez5M+B+1Zi3mHDQFplTayXeDiPyuPSz4dQaLDu10e0Nef4u5cHz97qw
YRE7y9PeM4b2HnWzC/wcdAT9aD53jI25db+nTFrGEBM/PHGczI/QeFdOuAgb
V/3NbteS1zdxV1B8bSQFA0vLG5n+kxh9zz5e30lHdOaFVW9+Eo/mdvHWl2Yj
jvm1eWT9GLj9+XeEarKxbfT+p0pVOnb80zokJBGAX6LvDegmJB/OPX6jvGcU
Pq53ootuvYdCqnPvt73El+VYAmKyNKy6aKF2zOQUZE6EZbiSXjeb5XzKUptE
9P5in3DCFzP/ie8ICuVg0b9xO82hAaT6rqp8ssUZkp1bj5uaU6j5FFLQuIpG
9jLjrYz4KYx+L3hOE6AQd+rreuGrE2D9pvu1xfdCJPqzw3+ubDCaPTTjuekI
Zc4LC6L8wclhztMg+1OZ3W95+MAI/u6QrZCZq4O4o5iFaBYbEua0ggePx8DR
tvlaaNGObPN/95pIz1a9ux8dZz6GSYtOuYiRNnwLLc43DSfedy/DQF1jDGq5
SmH//NrwmT9449s5NkTHXmbzG0zgVMdo28prPWgzFBc+IEjhV8qXuu8RE9j1
iJ62PbUXD8Q/U9dWU/CY2++X1TSBZyqyf/wy+2DsOBujJctBpf32kkekz3dt
ubRGtmkcjZqDnI9hU8hODbH+OdAHoUYFL2OrfVAeuJ0hWMjC8HDjrd4IBsI+
f0tx+v4A9vIhElGr2Eg4FFhx33UE+ve0BH2f1eNTJ57TA///fok3BBv1JuEh
IkSv3EfHTa5wvy9r2dDdGFYgEEE8bZtliH7xG1QmiqatGyR5UWKtI1k9jgz5
mzSH0G7sOCLTmfyd5Em1Qlf8934IrdQ+/jjLFiZ7nk3yP2Ph5pgSSyCbgYXW
kZejFB9BvD9xYzCDgnuopLGc2BCWfxxe/mXmBLyK3ZdsWMqGhq/Xl3H1Edj5
7uRbq1iHv7XJexxfs+Bm8bJeZpQBxeWTarWlTyEkseJAFcmlf7eFdW30hiDK
VEhbKeCF5QNbriydpeB188N8Xc4gNjuacLvMeaBJWDV2Ien1Z0fydu6KGsKH
B1phw4Mn0efSkitA+nfzye+5m0j/am1yTSudIx7w6Yv+0OYpONy6YV57qR8l
hxfoObKtkHH3eetoPwe5TW6Xs2QHUFAkGxs2Z4fwdz/Nr/6jMHHtaLhv3yBS
OS/X11/2gJXyj+/sfRzIXN2Rc2fPIPKqU5rPfzwOvpUVed1/2chS9WwRMplA
pWwgJ72oBy8kLr9cNTSFY7W1adkyfaCZufccVN+I9oMpSW7Ei/abbQn5L4lw
+07nm0e+MkGv2W62cBGZ26+q2cPH6NCoc+Bv0AmEw71GVnY8BUkvKZ76lEl0
5SqMO25gINLpgKwQhwURgQX2BcQDbS7qreWZDkTjhn2xKdYceF4ej7x2lUKl
OW/Y52Ymoh5SGh6kZx99fbSCwT2M+K2v+oNvPUN4sAstIImF6f5z/A4SDOip
R05IhyRj4/1Yk7B/bHxYtm6+oBcNK2RO15xdewZde1ZOP29kIU2zIriLi/hj
fOuDBI9nqKlZKLFcg4KCQseKtq00cE+OeP/3/hQ8vb30xo5SWH7k5mbDJcS7
NEyZ9Le+uHv+dJqQEYVkzj+3oTgm8kaXeCv8HkSHf+KF98QTN+iH8ByyI312
Ieq/d386sbOvkFsyl41ZqY65jjc0zBr9i/VzPIuFJVLbsl0pWFhJHBL8yUSJ
TplrTCwNSxPVdxvvJzmcdePOFc1RfChMe3pO8j2qi313DX2aQkdp/tJp7T44
qER7nfxvC4T0d6YdJzkj+s6GW5aHjvmfbHXWf/HHbbMVOiO6bPBvOT1zj3cU
Cz55GS5PeYePrrz7lw1T8OQV9NUjnhfiJ5qRbEm+Pj+5TaWe8JIgD2MxxcD3
YtX3lqrFGBKruL+IeOyHcOa4+udRLHculNbma8XHQokak9wpSJdtuRSQ3IeA
nW/Vhpfqw9n2okS4KBuP81e+tDQeQeymhUFHR+ogHPzo+kj0FDaou+3/8q4P
P/mWvbe32IN+qWRtwUkWTHebZqcnDGOOi/ozZl8Fpe5uH7VzFL5Ofmq6v3US
ui7aqY7KdGx079reuYqD8rNZVsq5g3A14TEtXeeOrfcV39QIke9/P/L0WPoE
gqbTx9JGepG1XmZJ+5opSPqE7c/O7oeBjvmLM1cOYfTUy6EV9hwYuKcck7lD
YdJAp6xRcBLJfVdE60kOc9eoGuU9HUOD6nbeEPt2iHnc2VOdwQGvV/OhlXcH
kOmz5bfyPUeEi4hdou6zEGnsdUrsJOF5Z7nhpfk5GFi85v6JbVPI1xQvbfUk
uTR0xWplgyVSd/79sfkkBxbRPjvkPlNY0Wx9W+juJF6r+35rnabw5EXyQfX5
bHwrjW8q6x1F0Lz0FYc8ObD1yH6uyzsISW+l2/flXaD3zLfdopoDL70Hb+wd
BtDMWm87xe0AmRdaGUkqxFfLzW8nKjAxVRMauHrhAHRC9sq83MTGy/ijc266
dCSsNcn86RoAtbJ9x6NqWYhmrtsgMsDAxPTzIM7Wpxj8U2tHL2Eh6CIzfWU+
A1yJSnenNxTAwVnd/4A6GzqOB2Ttu0fgmx0vIL6xEcOhT3YuO0ahJO05/9k+
JrS+eRhu1qeBT+50det+Dpx4DN/tO0RBeMtCGdMDTLBN997puUbBPqswZ0fs
JFT+hM77t5iB7T7e52+/Z2Hy/fujFxcPI0tM5dCASglsWxxUAzWJr/2+HL/X
axA7foWlPqp0hc3ZE5ser+NgsbRX2pU2NlwPH53+MTOOudTOGJtbLHik/tLv
+EiH4oMXc6MC55Hayh+zUJSDlOWrcp8WD6LX86L5sVB3pCy2qzDwZePfuzKn
hIFR6H+NUbWSaMWsjkMybYAFP/fGq05Hh5H39MjIjZUVMC3+6FazhIJSq8XS
OwkTKAj+o6r0uhf2UtJSd5eR+7JS9lQNZeN2n3vR9jXj6DW2bZPaO4WLD5N3
pZr2w2VUarvyAQt8vPxrc2YCB5d0lZvVygaQb3L60pyKEzQl6C833eAgzLW0
TqRyAE4vNadO7nLCZEyKkkcABV3HXm/a+BAOfXjoyZH0hbbmf7+90qbg1+Kz
VuxRH9xXWWkGaBsgW2X6gIMlB/P/vll/j/CO1daK4tP3mLD6KXf45DQbCm5/
XXiDadj4LuTrlYtnIOnhN2tFcuDvx7kvj0gOlCxhXVq0oxhiKnJznGwKjU7R
w+N9kyhw1mrWIvMi+buxfGflFISv3L7X7dkH6ae355u/3Y5Ap4C3C55Q2C98
dGUaPwvNMoM9olbDiH28MHNyLYU2s/PM02MTEJLKCWcI9IPrGvNQ2ATplfvf
+xoZLJRXDPP8jRyFibJYyQc2BwOz0aU8PAPgOfPI7qvrEchX1/Yt/MfCk3Nc
bU4ckhsb8q+7znuFtLnIuOVsCkeKzq5cMn8I3y/MtoUGn8DsRkXR0E0UmYv6
Hhs9GnjPNa9dw38a3eHMC8tqKaxUTiv+t4/0iZunWfLvYWwdOfRjWSYLBpUj
vTLv6ShXts5pooLRfUjU9ooh4fZA13NLDSkckEt0Fpdnwvff56NvCMdekG09
IBA4iYCjLfNE+ulY0KZfdfUNC12DOdKjXwmHRNx8qXm9GNe+V55i72GjN0L4
quzmUfTz33Bvam7C2dDmCuFGClzG6qpwZ4HxWeOT/v4RtPEeORfczoKgfLw0
pTwMK/kfXi6mzxGrzRlc84CFUk60kcJrOtJuDXFkS4JRpbROc1aNwqfJw3/t
NJjQbEoY2KU/AI/MO7MPysh95C9dr/OcgfVcZx8MPyjE7KyrmVMxGyVyWRIl
f8egnCBkfOVaB1inJhRFSR/vbJfgH/KeROoLj6UZr+jYH/yIK+gh4YHo6OJ3
UQPwEmTM3FvsiLKtG9JNOGQ+A58bl/5k4Z7U+Fme16Pgjtq+bWQb4SLfLZm/
TJnI1jLojns4AErV1Ej3MPEjfq26D7EUhgJDvNcMMJFGN/4daccB/XL7Utyi
ILjo6rKAP8RjPP1bvAgfRlqa3ngbPgLGX1Ftn6w3OCChLWw1y8E3n3e7V33p
R1iusCn8bFHXzZe4S5qDkKlW4wulbJzj05kRLhyHruSyVIs0Fr4P6FfPaJDc
DpxbpfQ2Hfv3hZ95Ls7BlgucZ8cfDmLSVdL2hb47lvh6F680o2CrZxQ3ls3E
mxeZ82Xth+D8rJTnHenZS07dLEXSs65SlqMnE94h85K1Wc4SDh6/3OQ+cZqN
R6e+hQ/+G8Pt0PuX036zYdQu3zOmO4H76itSxwJ6wP2cN/MY2ffkAdmXEw4c
6LstVfhIPFbsQto1aFI46NJsULWLiQ6DDlZT0AA2KT+2liCemDTOE6jDM4ZH
Id1xJ0paIfaU9mUrkwWzSLlDIWF0cM9sm2EuCcI1wSrmbuKtS+POX9rKYaPc
/UpBqt4EpD9/6azPYeE1d1xUjjMDDk8VJ/+F3cOe7LiHbsYUrgfNVE0lMZEl
ObcplPByV0tO7ZAxB2MdlprL7CmYMK5yRzuT+0wI7zydTvh/yVs9hjYDWQG7
Fyz6cxv3xbe8u5zCwoPe+e9M5cm/cz3j139yk+S+6/19LApp24oMzSgWaF/G
+RxzRrEjzbfIaoiN1Ll8jn7dOPr7SlLTE7rxVzaf2/cMB72upt/fTZE9jrje
mzA4iRJncevcExwIlh7ZceMDheH7f202RP7/71xv+aircWC0J3ts2R82SgUO
3NFxm0B3xbHEFvL8C4zbIpoJ32kbmhzpdmLi9241tcGbLHzTiS3etomcQ5f6
pQeyt8B+NLl090MKu51VTXq+TSIht4K6sHoY8zvpUas7WFiR/F7uoeow6l0/
+noEPoeo2JCG30HS72tbhUJCKTilm98bLGNCN/l2Vi3xjsIjOveWtpC9+ObV
ct5sFHI26zzE3SjcTB2YavqPCcHCXYJiN2iIH5G6lJNOnp/8D2P63SHIKZS2
tJ73Bv/+YzGFrRSM1zeJ1kWyINZWPduZOYKtP989GFvCxsEZy/g3aiOor27t
UJetw7e5NYfoawkn2B5YqHxzEHu9zIWHW9yQOO+6gtgMC7zvhvSf+dExt0NF
dW9dIIbs98ncbSG5/fOghG4IC0kdX32GwkbgN5N7YP4zwuWaE7n3xVlo0Hj1
cFvwMIYLn6wzIb1+MWOx8ycxGr52R8Wa/PSFkI//gfmJHGj2HR5a7sZBfIzC
CQbhQt9lC8RnQyjkG3y9oGo2CX8B/un2U3R0yW+eHVDnYG2s8xb/U4NQvxXY
N9zniie9ZRlrV1E4tDrZwK2eeGsG1fjrSh9iG512BCzgQMf9i25OyyCsZCye
YpMH5i/VLf9M+ErCxeO/nVyDhAv95x7wuqBZ7l6GHOGT8VXObP7FNFRfD1o8
U+MLTWbY/LNHKLxazxfb2sKEvt+eeU8laTBqdhinyONUTZ+49F8vBZehn6t9
8iZhGErTGic5lbN7UWEemTPxo1OhRTwMCEtltB8hvRwU/fnNgu2T+HOl7PVr
bTpKjNLUvkWQ3r3/Q+HL2Unstz1mNa+Djt/rpSrWE555MTohzE28fIv9cu3V
1yfQPBd1bbSLgua+nG3rFYeQ2/ra6WaUJxR1fioevEv4MJFmkJgyhB/z81v3
q3sjZcr73wp7NtQOaXmvuD6K658vLT/9tgVX5asZO8n5hHh4pm+zZMMhf8fd
s4VjyJnSWvD1JvHc+eaRYjFj0L228WBDwyfUyft8v/SGjTcMw6rDFuNg54m9
v9zVCV/DxjsuRmzsbjLKPbBjFElHrozKGrxH+dznOtFcFiS1FojOP85AgJPm
ttlH99D2oqG7ieSX/LrfRw+SvQloK5YxWzeJuJmZm4nEgwwvb+172jCGchZD
cvvTdngv7Pjs28TGlOGo/IQb2fd3n9yNN3VhsdeuUs9mFvaHzSUILBvGSPer
ndfdS2C2de6JWhELW6Kjh6Uq6Ph++dUS3aBgXOu7aaF1m8JJm9iLUa8n4X17
3eEd6QwsbXsoN+xFYaG3ekvhUuIROVTS/CYaTJ7Iu67ezUGt+uGXZXoUGo6a
t6quYMI2zUFcLo6CX5d9WVnlEDzWX6teJ+GD8btXXupZsBEywlUqL07Hz7td
TyNOncOsS+bT7FcsfIoX8vvwgI4vO4Ic5QSC4SRn/DbwNRsB58/yPsqjwTNY
ycHuvh/kXw9rnSA9eKVZLX2zCRPvGNJJW7IGcCCGKVixh+TGcZvf/4wG8XxQ
WCyedRyZgw+PqGRRCGsq7Y5sm0Q5pfhe9zUDGxbvK34dxoZ9Q/ytp/JjcOjg
s/ur2YbsQ40r1SvYkDTreHBVYhxfAjns1vmdKNH/ab7SgY2qxlm9/pRR3Nd4
6eMl+AHdYVN3djpx8Fpjb8LAYwqXDot9eKYxCb85ym/0NIW/gkeeOilMYrlV
iYcwLx3Cm2Ul7m1gY8g/Qetp3gjY4R86OZUN2L5sUa2O6BSqz65wKSgl/btW
QvBloDUCOqWMi6M4eP932HhsFwc+47HWthUsVCgv+zZH5uTKDe5S4XxyP8kL
s3ZsmMR5DTlWlCXJ9+q6opEnTMwLfLCmkuTfXVH+fxHk/3uMOzjVaVN4rnql
s5SPifbCvE93DEkPytdTfutGocUnqyqe1YR3Nz3FPYvI8694dbV/CQuFq/Yv
qHMcRlLBsswjoxSiqq7wTnSx8JavJUr8xCjOLeT/FreTwuGF2054baQRztja
e+78Kfyud1qj6cGBtJtI4Fn+QUhY7pZ7oueCkAQxj6JIDtSFWB9X6BEfPYiM
M09YyLCQViqVY0MlaTRHJnEEnH1hB+yWNWD2t1UCcwUbbics/m0+QvJ61+g8
tcP1qOGb9NlC8rxc6I4E5yoLp41NZITTRnDJ5bJFKOGN2Ws8zU45TEit61k2
cHwIH4rrpreSfnk02x6dTHJUxfeXV3gpE4fKO1qDAsn3L5HavguT4DFKiXi7
mw61GYXlG/QJR13gcU7WoJD4p795x68JWHXv7+ggnltdrxD9hXhupOfq1RnH
2lH0z5h2UpaD/B0TWmdfkVy5v3KvcvM4xPkDtxTeZiNtt6F0w50xdIiVXFQQ
bwfvIn9ZO0c2vBlxv47dHsUnoYNeLZofEGy7eOW4OBuV3IufXTo2Ah7/+kMG
wfVgcP+2MzvOhmeaV3x+4SjsE6eEPtV8wPeg9Acb29lwT/vgtzyVhic2brZ/
t/vh/Kc/F2+bcbBA/VCsCtnj9NL+lt2RTKy817DYfwsHdu26ssGzbJglPVRf
dWgCD5fItTB4KXzIcdo06DkBRoe76OsNvRipuf54ZzQbhzlJaVoHxqBus/K0
ZV8bAn+UXzYhvp333sDihhv9fxSddzzVbx/GNc2iRIpoEBIppF/FRUrSErKy
W1b2yKiQMhJCpUIlJKmkSJTssiUk+xjHcc75HlFEUc/9/OtV33Hf9+e63m8v
B0R5nfDicfPHjlXVzNhCNkamJ7MKV41AuVt98tOvVjSJOHu+Nabw65xvhs3r
UYjLbfzI87YPX37ufVEaPQZhT2czVHfBPZrZEv1DF7yGxeWShSyccpbEnpfE
I5a+4Pq0PxBLlHJj0x5RkFPb6htDOIZfbt6XNUMDkODRepkbwobw2271xaP9
EKlbpfSfji/qhKd6XgpTmDvh6q2dxcBPqySHfSu7sOTutLoO8Ro1nvylhoKj
8E7bevpRTjc+zeoIDxEe2hq+x2V+KAsNUysS9l0fgnPkB6NTNWzwvY3sP3aS
vFelXaf2qnZUFD83MctmYeLhqy3cQQNY+2XJT73gTPjsOF+3jvSFW7Uq62o4
HWkBi6o/FbbAQmCBtdwQhUUHLnPZtLDgLHf8wSHrYRTncI+eSST8eX3+5fek
587+9Lx5ViEIPIOqsF5G+OxqUfGKVAb8L3jka411oofdbX+U5JVnwveeqpf9
kHdealvV743v8Vm7w5tYOCRw/Uqa5CB2v3vXYqGZj3cyzJv2Z9lgbBA4+LZg
GEn8xdXLuJvgoPHU7YwvGydLZzn208MIMsk6XnelGU9ELELohHeDomvPmnMz
cGr+ia6zqR0oHfLmBHznIOrYuYLC2W7s9fg3Zch7Au0rT13k3s2GcUhtvNTM
EIJve1XeV6mB7SXVwML//9xslv8bma+DyPHUcb2jX4ois6K9c5pjEEqJsCmx
JR7L7X2Yf4cRSjPPicZZcZD0L3zfuhQK3WMLxOK5mdApjOjdS3j7wHg029uO
9GZIZI767kfQcjy5xDWe5OOF7HT6KcIdV2vUtgqycZHr2eXHpGdzD3S0Xj47
AK0V+/61/36EWMe5k9qEh1+t9q1eRXh4YkNV0qduJk79u1T5xYxCru3LyP6K
UXz+cfrz14X9WMUv3v89mIPvy0SvNa8n720nUn3wJPHd6Q2XCksoxB2UWsTY
S3xIWdDEhPj03fNrCt8TH98VJ16fO0j2U9buqPm1YcjPnX30nnD7ZylW3OIx
4qf/JQq2ZQ3j7a/K3a6GZO5qLhW/fjqKsUHm3fFrfXD79evWz7/k3+nUK/KR
69aO0o8++1uKvZWl/E9rx5AjuCd798EuBPutPvtdQw3pw6m3u5rGsOF2kCKl
1YVSsmafNqvAyTHCasCNwq3I6Q2fp/uQ2/Nmbu9xd0zzvypfY8zB5m2SvG4k
/+z4RcoKs0cBakn6P9Lv1RHfVUX3knP6fP+mKalRKFQrt/7tZ+OY1fL35lH9
SHoWn90z6AU90/0/ZD6zUBXkHXo6iYbfH3RD9bICUJq98V/Zbgpeo3dPNJmP
4ubhNAkGrQevvi1VzSLnUCLq8vvRN8OwP+uX5iLUhAG5ilu0hP//ftpSnZev
eyB2dumFgbX2kNbauokZT7haqmzc5j4TucsehVZjALI9RreyPrEhsIPdI2E7
glNMzTfpAu3wmGeZteU5Gx9itoSYsenYeNpX5ti+VgwvjItsIN7V93hK2qdz
FGelQ3MS0I9TL7mtQ2PYqF5dF/vZjo6f6y8On5dugZaA5/XOm2yY+dM7xkLo
uNcnplyf1oIzf4T3l1axUGprUdn/YwAuEpJPnqfkgaWQUhtGOOGYh6pGXtIw
DnbU+vSsbkTA5+NrXzWS/D96UTgiYARB6910r3u3g/dzzIuSWA7kRZbolFlw
oJ8dua3hJwuym3gtbguzcYQh1HTKhIZe+kR6F5c/to9/fit8Zgw3O/YLigp3
Y8f3Bg+Dx0cwHjl6Me88B7/2ik89WcCBcXjntn3LWdg2tm7g4i8WJkul65wa
BqHKs/G05OwHqHUfKPGU5uBiY/f0EcKtK8z0D6u0j+Dj2x/hORps1CfHtBhw
DaNxoveSiksNPLl2ziSWEm45PMSp3T2Cu29/pL8NaUPT38vUpm9s1O5evuVo
1ghSlUbm35X7CtnZR76bG1no0cngLRAbRIe7aZEc7TWWL653v0R8SnxzWr9c
ERvySXtiVN6OQF/tjmltAQtrm1789sobQHPfxYBK5WdQ3xsQOPdkDPqyXmNy
0V3gYVrKTa3VhsOqzfrrRNiwoPmsWnB0CFwNh1yDZipg8unKcNsrNsKy80SX
LBrBprTAyKDMVpSfW5u9JpSDs9tZMtqyHOLXh5U6XFn4R/PaMPCCwvI3tlxf
BVgQG68bDrYchA3X+p2cPjIvbTNX1Fb34bCJqbSXqDNOqF6RVdYhvLRHldtV
bBjzGQLBg/K14B/Tiho0In36VUe3VaUX5SfG9wcbnIbomtmYOXE21utmBi44
NwR90bO6QcOViH78N87Ul8JMi3XGLKsPC3/0RqzZ7I5gnz9HzxWx4OudsPME
4VSGpv7ZTTIvoHBYJGcbyavlX0PlBjgUqgzTOOokr3b1zb+nPEv6aPiYup82
A2PZSzfPhn7D6mV1hZl5FDwC71KbvPtg2+8yEWN6DsvfSUi/NxxDI+PYg5D/
uvHaxLv5ntYxbBpXMt61luR/x9GXsZeGoNWuN2zvV4V532OjvqZSGN5h1etR
z8RqXsuMefkDWGXY3S1xmYO525P+ixQ4+HfjRGD6eRbee51kPCCcaWFZFrZu
FwXROv8X2TyjmJ6+9q1XkIM/a8Umo/3YSIrJ5JvgH0FSsrvLNpKnnIv71Rre
sTHuNa90eekIXH/xK0kojYFv82L9/aHd8NaNtDWgG0M18eJEqxgHMyK/yx3v
sGEquM988akRJNs4HilMJ32hIf1zd0IPzrse2LBX3w4nbsn6enWw4OGfYS99
gwZXsdWxJf4BUCucsAnNZgOlVJV/aT8sLJ59XQkfiIYs2Upfwoa92fcFp7YM
oX1rqGcJVwV4+W2s2/JY0HnQ+TS0gIYnE7zfzjsG4tPS2N5necS/WKPrLQv/
/3lCmiY3vw/23k/Sf+/JgZH3znsbKcKZqvLqBV+Z0D5gvGnyMsmBqMmeHBU6
FottWj7r+hnM+Ozk7tek1zoO9V58TUP2Dqe2a5aBMDK0M/zQwIHTpieri7R7
ULq9wOHVRWvkdG8QtL9PIWTZ8UHPu33IvM13TPqwK1LsFN+UeRC+Pyy+f8V6
Jipf5I/1zvQjYSDB+KIE8V8hu/LiRgbEtFJG7j3vgpSxZqS8BAc5bO3d19J6
YWiwZKZC1AGd6+bHL140BrXK9etHvnQjLrR4z505MxQ0OGdMkRzYuN16ma/m
CH5OBaceiGiDweWPmX+I99lExk4cTGSCPhHePrl+ALeVL/6taGfDSNCPqzFl
BM8UhCQP/GuHzTGJrqOES/OMwuhLnSnE9NecNb4yCt1Csz2ifGy8fvhrQ6Hk
EAaG2HvuXiiHbcQDT6nNFDpvpMmICI8iZBHM3Yq7oZHf4vGIl4PO+EFjLpK7
Px6NC71spMOVkX9xXT4Lr4tfLtv2dACfghyOOh7KQS3b8qYa4Wodh9UOAZZD
kFxT2uJ4shKZfM/tthAPabqr7COpRIG+VfpoC52BR9yCuy+SPGyeX2J59d8Q
pnQdhn+frsGL1HE+RwEO2oXPFfo7sfE84MetsVHSM1lPM22Ip1hmdLPTDGlQ
TVEZKWWcx7cPCza76XFQFtxqrX+YAn/89Ae6+ihehzRN5jRRmH904vJMGAsP
s2X4ZhOHgPTDwoq6FLQC9qmeuTCK2kmlIwL3erHgTQAnexHJzYN/X53iH4LD
Fo5v4nAZHnMUflex2FhoLd+Xfqkff+cf36d0n/TyyliZyGAK+5Qlh9jmTPDo
/8lad42GgYNJGqKKFIo+Kp49RLx9/hl+lYX13UgfDHWxCeHgjQHf/v/3w4Mg
KZOosyzc5z/flr+Lgyze7ic9J3vhdGC+8dOwM3i3uf7v+twxPE+pL5+41IXv
89eYbmsClOOEM42/j8FhddN/jlxd0GrYXNQxJQZOlnV63F0KrxpeXdV7x4RA
V5XgdNQAHDPHb9xfTGG1TOOzlW4MOB18P+q+vRPz2qMWHxyhAJ9bfDt6WVh6
p7BlzYVhFB2R/26ymEPyIkMu0oiNpyET0Xuf0yEt7Nkrc4ODBIvGK0uJH79y
Loi+TfxE0tT/+JHCMRi1ite/cSPPs1c7b0fMbqiGsbYaSnJgJ9PVKkt4wZfX
8NDvOyPwnP+bs4nkefDAae9vPhQ27hUUOPNwFHem9r2cIvvVsN5vnRDxzS7n
6ffNt4eg3sNNjREPr+U6cnTjbyZuuUcEDyoMgm6VJJ/NZEPTW8v9y88ROA1H
rLp+vANNtp2tiwlfKU7ILnLSotCjeC/LQXQUwR/D3LbxU0g/ortI7DIDzzpz
esSvdOJaD79M8BjJR+Md+jO8DPxeUeBblNWB8vNXeUwSx/DHq8RG6U0X9BJd
Gjju+6D0dUdm1ZExqJRJy57U7oZt86GKtxnHsL+oT1Vtegy2Ccpt5d87Edx4
9K9CKw+2LbUxOXeFQmjN7yQHFybOjsbuViumIabMtenyAOFv/mNf5OtZYKZc
4ZM9Mgy+2ZDP8h+JV9IvVTce6UF6JG9WxEYbRO8bv739PzbaRV7YLdpKQ96J
NJ7Vy87DSHRmqXoQB96c5p8/hTjILI973qHKwpI1C/8IdVF4Es7lsDCXBZ42
utT4wmFUGgbWV13g4OqHxR0p/T3IO+ke8HTnSVgoHts0ycXG119e7+qmyPpC
c/q6Thm2rXBS0kukcENG6EZUOhPPWz5XbD88AH++MHWNGQrrcxce5VnPxjeH
OZsQRTpUvq7Y8X2Kglu4yiOTVWxobbfdPiRKx+49aTq8KWTfW/Omg9N6sHo6
VVIlxw6uVbG3VjpScPr96Ivsgn5oDY40XA92x958fa41cxScu8Jndvb3YnNe
+fbgNEfMv1ek4lxD4bqk7IDxOeKvqrvvB5kOIW7fiw9dpO/aDlrzH/7AhtOz
nwsTqkfAm/X5fhzxymcvRJOESZ+13N9duUuiHY/F6aErFdkwvFTwuf7NECq1
ukyrt36E285BP7MBFhatPCtvEE7DAx2bo7k7A2B7bjWd/ygHYfILSnX//3n9
8X69ofOj4LvxIXtJGwvm5a+dwhJpuCjrc/10bAAYi8pdrFZRCBZ6VWZh2I8i
dxlmWpAnvENrujW+k96vNb3KQ9b75GclkeVtw8jry/20IJiNWzwMvVxmP5xa
mKH0w754Jm2iIKBMIWH4OktTehSOEyEp3/92Y/1h+cQ24jWWU6m7dj0bhWSa
4VJaQh+k7aM3bpulcGIJ9w1V8n5nT05tvKFPR6qs0qs9WzkYPZwu8naSzHUr
x3udMQP8g3aLbqRTiDyjECU8wMQWH/F7+6gBVBinHNxKeMD4KJfVv1tsiG22
/freagQxM7Ehs4QnovdJpCxTHAEDgddpOm3YJcTFDvJnI9nvxpfBRXS8c40o
HilqhmOJSmM78USP9OCtzhU0CC2S0tR7F4jYv5pvLukQPx3rqP5k2g2Gj+Cu
lVWGcGLVsyOa2chVbCt8dbcfAgm6fRWHvOGpVxxqQM5PwH36D+4YDrwklndu
DmBD/6bE9XrioyuT9Kg89SFYtBbvW7WnAleX37UrIjm2cc1I69qGXqw7nZL2
U9YR6xo+pO8hnKD5c4fCA2VyXjWcg+bsP0PGODPfhvSm+O6XjfqkN7lKg3d+
J71JC7tfqXibhc8rPTdslxvAgzPX9s+dTkLfEr0VxZNjkO6Se/F8shNaVbni
NpZCeL3PyqTtHoW3+0z9hMuY6J5UdXe7PYDLzUb+YtocrE/6pxW7lXjxll/H
q8YY2PVXXWY8n43zL+P1dZaO4Mx0Ssab2lb4xfItV2ilcLkrOOjHTZKHxX16
0mVD2BN6P6pQnAPb4NBLxulstM79yXMOHsHeKHNTxQrifXJ/MqYf92MvX7HQ
0ENvLNgwJLKK5EPBg+15l0k+jOasFslTYSFRRKiws5jsV8l9E0m5EXAG32xz
VG4DbXGbXRzhli25xavDHrOxSMpSPj9iBCISRwoVyynkTaxaMnOMBbraTwEj
oSFkvnIWUSL3DRjguyarNwLdm74Jjs8Jtxifiuo6xkH2mPFKujvx+A3+V68k
jmKH84XgkNPkuX9v9Q55PgzlDf4eLtWNqA4TW5u5kXzd8qSlrw4Nmu+e2jmE
n0f0+idH56tz4BmSXq56rhdZrczOW6VnYNm15s8Y6f0PtnvEtx6lwNZqq+3Y
TTw4rzbTw3wMjvJLLbZs7obLMYlNuTcNIML43WhxYwxXNj3NX/2+C4xnbXco
Hl24G0tIaZHzfHZl3adv8sRzR+qN/lNvw9vaueiDJCdlKrs+8IpwwG13Zr8v
WJDY1/ZmYQUH110UmHymhBtrurZvjbOBXOqonG8aC40/F7pfNx/Aee+J9FCd
NNy1XdP+lvCqtufmg3FTPShQmzXx+3gSSxQKfA0bCL82CbavCCL7G2Wj0nlh
CFJ1M6vlmRTucuV+XzLKgv7VNTOH7gwjWMSNnuNFQWxBCkdvvA+HPi+ZJ6Hh
Dp+QL6FucWOgvyjdwinpwvnsjbE16rqQr2OsfrGQA65Dhnf3H2ajpGSy4m8K
HXGFMdbSCmRujPfO130xBINdHxpecarh62eop0tjg6dpQ/nyqH6M3d58VHTA
CyeyXIavhLPx+IAvY+dgP1QE+MyXSPqC+aR2pVEBhRWrmDOKMuQ8me1Sab43
iKtbEv4kkH057cJ3vo3w2MuZpBiD/0bxYehSdzIXhT1D7gWNJHcCqY28gk3f
0PBTdY81i+S/wt2NqRQL9WVjtxQyhuHQG/GwVpoCtTbh9qIfDGy1y/h7XKMb
cymvt234QsEVdnZL41kojxp8O5/k98uhwwvOSlFQEv7kcOJQP3hlf0PexBPP
bSVSNpL+3XOmy9zKmYlSZc7qi4U0uMwuObJjjKy7/iP5qwE0OBZ6FqUz/FFK
H/gR9JaN6b/LULVmBMoVFX/yudtw7vKDc3JJFBwFdixQfsXEznkPTx/1GkDY
pxWHjJI5cFj0UepgFAdr8weWeruzETt4acDWlsLJEWt9x/5RuAjPigsd7ce3
rJeqGpFslF1xC60iubyt5KDml5rPsPWyEVQNZ+Fircpx8wEatPRav8jSg3Al
ufGRaCeFm/JsV8McFjIacMP4D+Hl54+845gspLW5rdl4iYY3nTdXGSwOwPZp
85M/vrJR2Lfm02zaCGzK6kKfCn9F0W2Vl3vJ+gf7GG04bMRAeFjMlfU13yD0
cI72lfRdkman8GqvQUTHuN/Y5VaEQJ/M/ovPOYjLOzXTfKkHaweCY5422CI3
c0bD4xzhc4N+j/XfCF/ssG3NeMTEhti7J+/SCYfcPKRvJtSDhRWv5VYvskRM
XdJ0M1lPG4sTT1WlRnAuoG71iSUkH0r9DO2/knnK5nmjEk9D4Bnx7deCA3D3
SfTLpaS/lkva33y+mY2Ziw8zVQ/QUZ2sHS90lw11iVtyFol0SC6ZVNjJasHy
4SDnyFsUFO4uk1uc04dSsWDjofeuELRJifOJo5B8rQirCvvwzF4jzILfDeeK
t9wPjiHruP5hzd75A+A6npFzSToGPcq8D5W5KVw4ps4X78FAygOHsS1anZB4
s9v5Jw+Ff/8trj7gz0DO+HRJlHUnmg8/rftRQcHDuH8gx4yF0FuDIuXrhnBZ
nqlwfQcHgg1buHSXEW41lXlVe48B3gU7mpVqKWwWNBbY4c5Cf3Sr1j/rIVhH
tv08dJ6cB3Ox6DwuOjpWHg4NzGzG6/2PE15xSA9t7k/d/pucU4GcAk7VMLaf
6DVUZLDRL+ntOzE6ggvafW4VmzqgaX+BGR3IhmxHXBNjKR2dp0r32PU2Q5ta
0Zc3jw0TTW0z3t+DsA24R+O3KkNNbOVOz3Fy3dyHCwzO0yDuPlHs3emPrGd3
1ocpjkG4VNLK53I3drN/ynpPGmOfun9RP/EXnfNfByw2cnAiqQ8hLiz0HFZr
cLrNBuVbvaU6go7cCwkXc9+34M9d9x1LVdngGJxp1Wofgm7i73dG6z5BfmfC
VH4PC2crAqWzLAeRnth4d83St6j8ftmCk0Ch3Gmpl8rLPtLjF9xX97ki0nmw
uEiTeGj3+WOpcoS77JgplzsYqFG69/kc6TX7lQ9oFcs4aHziMDqxnYWooHfZ
qqS3ui0y+8sq+uG6wMxExtgH9d3Bdy8/ovB6wWTAql4m3glmX6MGBrA01X97
VBmFp5S59y2TPqhIZ1+qu+OCL3RxO15vCheN+epebiLc+25Rzn4hGoyiQ+Me
kR637Qo3EDXrBd9v96Xi/53Bdf015kq/KbR4HAy8LcPG+lphp4rtdGg1Xd+q
28nCbF1x/YPDg9g9OaL9bF0hrtL40ioesnHt7auuRQV0xI/yX8ty+4LtGsvU
n6ixYZa+UV63Zwjrbf/+u272Ce3ysQEF+Rzk0Oy0Azx6ILnfdvS5hy0qwyKr
w0xIDtsWGssWj6Ipo1L8SHcfKufurxZpZiGr7QZ76bpBKBv/OxJ4Kh9HQsbt
V7RTWJpnHrQ5hYXBwMUvqS9DYOx+4zbcPobk8H6r8W3E4wQ9ciRslJEjsuaZ
9R2S4+WK2qcz+9Ae0x3z6Y4ruLKXl/m7svHGolirmPBrz/z7H//8bkJisVRS
vg0byxRvPPvIR4P0yCLfanE/NG3fvNg6koNaun/n4///ftOFb3kkC1ioUo5+
FtNL/FCJfx7twwicH4fWHr7yFXf4vURnNNg48FMj5f68YUgI2C+94FuD3wui
v9tnEl7yWaUeX9mPn9HraVbmPojLSS1vuEPyc6FSR67KAJp32qyz33EPIWL/
jTQf4WBRwxcThkYvSsw8ROVunMaeY08sVxNflqTOJ0QWMfHrx4WQc1cHEJFe
9mb8NAcPF0QrTAr24u8tL1Vbp1Moey9kXUQ4YZHVdbvvCiNQmvo45YY2fEx1
8AtI4GAmVne024EDoeZ7DpeI98x82+7Vdp2N1YM+Nj3WZK7rqvI7xchcaMSI
chn8/+e3jWqvpI2S57O+o2DZhwHJkPOTy9lYUL0gdZEpDcrvJ/cNLvRH74oy
aYkbFDyj34nEJDGRLSplx6s0gKLmA3y18zjgMCSPmu5hg/tCxWRUCB2v+1wk
Hr/lQF/H5ESmYw+Uk89Y+cEWpn78QUv0KSx+aqEjED2Kujz5cq2RXvgZhs0u
S2TBOdW/b1kbDVtbYz+FKQZBJqigprqfDZ+CVOebNSOIsioy8H/6FZ+UOrfc
6+TAyEjgn6Icub5+2jHmdiuYW+Wo2dBY2OH5rj3bZRA5cmE2XHxFcLrxK2DD
Zw7UTB/qz+3swV4Ltw3actbIux16dH4OG9IxP2S/DNCx/FJbSa9UK0YePxU4
6M2B5tLqh4t+UNCwZRf8oTNRpdk3UeJCeCldnkdGkImLZbOtqZ/6MeFuo7wp
iY3KtVUy/NF00C3lraNrW5Awa3ByMIYNum0JY7SrH2FWdTFrxnzwYzHviAM5
V+5JXMLy/4awQ+XWsjUna/Az9eyfF1ksnE5a6PLRewC5RjOHtiZnoLk8/1QP
8dyGmlUJp6XZCD589O1jFTruxZ4T1CDcclD1i3rJgj48+iH62/CqE+q2rd4T
asaGjtJSrqc+w3j1qmrAkLsBO49GZjb/YyMeJ3KOHWNAna15x6TsGx4Ln2pP
ciY86eRgLt9CoX3cNj30BhOrY113bgij8O6mgVRicx+0N7grn8lywwrdDz6N
hHcPaUntqX04imQ7p8WWZn343DrVYLWdjXD+LPqJ/iHYLuA/1OL+iXDhQS3l
/DHkygucHPXpQj9nVYxYvQY+crM+qhtyILaiUWqjei92J0YdrD99GqFnduhG
vGDBesjWqSB+AGalkcFL9J+gKiTM0WmYhW37hlx0wmj4verQMynZADiGaMQP
Es+VvSf93bSCgZPc6slNIV2oWp70t1OWg2hThVmlFjZqnswLy/01gpCShY3M
U+TcPl5z+d+yXsy+MVbw8zuFVDn/5cdfUnjeszLbYDkLpXZOJSVOg/BqmHrx
dD8b7SYux3k2D+Ovy7UK0cpaRNx1FVX+S8H9Q01QMemZzj0nNGTInLk3+m2Q
3M6BwKoNhcKkt3cWVczvu8zAk9ULe9vJvO99E9fl/6gP8toejUvCXfHSScyc
6zgbO7rijYzPDENdJTcnO6YeP8MLsg4dYBOOuNUgq0Luy2akSc7W4kFI+bP9
xNOdZxse3N5ARzB3i2fRls+Iqpy01CTnxyLZ/Hq75wB4PogdkLLJwPn79qaG
D9g453mEXvCC9EHhl9cdJl8wFOprsXKEjY3HKq4fDOvHCtP85oXvveAsE7zL
S5mD2Vc6kk8m2PgQ+VN/0yEGGA3GvftHKTCUqicfcvehOrGE0r3vhIDI29w1
bmyMLjT39ukaRvfGuIyFK5ph/qbc75jqGNSaVlWP+3RDbr5mhaCeMZoFs5Y4
9FA4nDcj013Igm+puMG4+DC+c7KLq1LZcDpbHLK+vh/HfzjlD0b6wF7HwWdd
NQfHKgfmugx60D/51rdLywa5D+JyJ/5Q8PdPq9hLOM19fvfZdXp0yC6+cOaK
NTnnV3d2TfLTcPGS3ELzDX54+WPXWvWzFM4/duHC71HkTimP74nvRzT1staB
9JHfnKjYWsU+8C5dGtEQ6wxjiwlf+RcU9vPc37SGj/RY9KdKx+OD6GBeHuhT
Z+PdYONn8200aIT38aStOo+MQDH9Kw4U8kN3FSr+G0WbrJPdyvv9KLz4YU/P
L+JTgqdOtEuwkSttuvSvFB0zDdduv0hgQ2r9uTHv83QkHfjaFnqhBX3bDw4H
63LQ/OyBrMuRXiR3Bmet/nMatO2/Y5JdKWQ/HajbKsqESdgapcnOfsI14VbN
HRQyTe9eDXlM+MN+y9MGzhDmFqooF/RzYLjsxWsBiR4krf5Rvf+eJdqXrIh4
sZaNtRk3u6+FkH43UtfjCq+C4JvTc8sjWMjcHb9Ljk74312g19YwGBLKywa0
CbcMMqXtS+OJ9/3R5aoQd4XJwStjRsR/wtbSftW303A29euJ+zuC0C4zEvZ0
J/ERnfhT+8lcyv1zMkvJZaD5WvcPwUQKgYtKVxYQXs9Jllq99OAAVA9v/+zA
4sArXfl93eIeiOlkat+MOoGlRl5VWwtJv4d0TkiIjcBi5eoMn/FWfD79SnZ4
C4W+9TZHEjeMQvxW8o1js4QT52lOjD5iI9WwcAH3x36UOmbUSTn64PhcvawX
uY7ThzLazlUj8G7J1u6cbAXHWSZNz5aNmBBu+ae3h/Fk8/SCT8sbobhApnvP
LxZOpZcePlU/CAmPwqpZ1gecvuOpcLuF+OFd7vLFmwfBc38ynndZARa9fnW0
o50FV7fx/IeagzhkJVtRovYGJ798U5Wpp2D/0d43zY+Fa4v2bT3gOYQlHY5/
N50bg3Lm9sR/C7uhVbRFr1HjMCjHi55bykl+ynvMNuiMQGTocfPhlDY8OP4n
4wrJfTF/4U+G8UMQ8plSm+GrhiXdYmT3YgoGz1q3OZxjQFLvdkfTlk7cEteJ
Sx5k4d0W+hZf30FMb3TDyvQiHDBM3nuO9Ls5v2aDss4Qdo7uabyYXIH1retV
Kj3YSP7uZSM1NIzESzu4xLY3I9B34UGPqjHsdovwSD1OeAxO+hWG6jhnf6B3
+MIYxKNf3SwfJL5/W8i6n3EAtip/UovNOVhyWdE0K4bCdOZTULRR6LeK3j7n
wkFi+MUDh9so1C/5WfrsDhN0VnJ2vBsHD/7e9N1Co7De1+jNrUImxJptPyje
56Clf2AfUntgWXzGcSjODsfXud9vzqMwvjRkkLmS+P6DYb1j/oNI/ttqFfeT
/P/LhRrq471g5UmE+gk6YbHx2ScW6hz473f5+EGAAjpfCi2OYyAzQWZn23wK
aS22CLNmwKr3yaTm5DfQh06NKJykkMs74sfL248yUQW6XqY7DDauPJmTRUGN
nmuXNM5E07T90UcigzDJ6xf6QXKjdy9p9QcsPP07Zx3QPYRA3eaZhbFshKlk
FwmcosPQ7Js1FFvwg2mQ8XGUeFlJ5XUePnLObUdOSb0+gQs12RHCZzjQMkxr
P/SewncDk8s4wYR8SEZmH+HSmcw5cZ2yEeQpKkaURH3Fmh6tvJMkl558uETO
AQv2OVqSmaaDiDR8fS+TcItzeuc9G7IeQwEmDy8xmeALvHxlSxQLnOlD8YO9
NJhkmbWFugTBzd3rigbxAonqo5ZWsTR8nc/nbeoagMaiR+ytxSxUy545pPqc
BgvLyKQtqoEwjWvcWqo0hnOWDNd5Id1Y8TL6/J82Y3Rs6lT/fYSN7Xt2nZk9
OIyGV2O7PD7UYdFJZ/cjWhzsdJ9rTlCiENf4+MYCBvFXg5Sr46qEA6ft52X9
N4r1MWudNxr14GjPH//lDRRYqiH8GwJJrjAH958OHEKUW2dv2mYOfgmNeTWH
9CI7R7e9bu9ZOIYlvb4jyob+KqftHseHYPYpePOyzZVon63Vu/CBwtxeg4dN
+1kY2lccPjQ5iMd572SfEw4/N3YibOgU8eIltCF9n1GMt0atsCM51cpq11tT
xsBqkeNy/P5deMsudW//Snyq4bXU50cseMtkbFMbHoJM6ov9XKcIh9GT9oUt
pmG+hGG9C5cfzGdD3l9cN4Yz86/ZmN7rRk7m4OYBWROYBq3j6tnLgbZ05o86
UGi8cDy0YcUo3lsP3Kd/I/yT4VGUKN+DdIl/fMN6VljOzrV7qkwhw2pi86+N
pKfCLgk/4u2BylvBe/uujsHaLT5M6ksXvgs3SP/U0EP321jJDblkfxtj4k/c
JP7w8LC2XsoT8IU9n7Eh+WN2mxMRfJ4FUbp7S5T3EG4g+8sDXjYKf65MKpAY
QszvQwkt58qhv2untynpNX5VZN4fGoLemgN7reM/wVpNhi/RiI2LbvPkxW2H
8Sm90KXAqh4OA9HYMUVhHs9Vn/tkH5ocjvz9IkhHsvcKb8tDhBOsj+/Mk+qH
xaNQo0x1DyznzVFa3/7/v2PcsfvKrkHYNtzTrF/4BotiXcLOWlCwXKCj2l4z
ihPikmpmK/ohs5Fr9r97hNMWR6yRvspBxp/HKx6fZmPhTIpzVDYFI3mJD5nT
TJzxVWiZkx3E8k8cSfuNpMfTPKVd9vWDkVrrliPvibBF+uphvmwEvObZNDw9
jOo8i+i68GbEfd/0H8uP+ODJA1OFXBzsYa2/mUrmKVN5ucL2vWwI6f7tGJEg
3ucZ2Sh2uBbcW0VCJ4QpTBW7b7B8Qs6xnrpGingX7t7L6OkbZaPVVqjKenwE
Au9Gb07u74DgXMXVNG0Kf6N5d2m4jGKO5+mhj9q9OFd8iool/SsdOO/xPNK/
FrYfVpaFVuG5TWib+XUOmtoZXvnHODjAWpC4r4eFpDml3j3PWfDqs7eRvT6A
B7dS3GTuZcEzwS2pMJqC64NDQdPhTJQ+SVGjzx9AT+Pl2l+XSd7aLy/VUiJe
+HBQXyCEhVueVMu6XRz0qD51WyxO8jL/o7RcPgOen09VVWlzULPm9CpJMpct
BaIZLlMMLN+RIBiqQUFo0lUyw3IUhRpWGY+/9yBQ9Pm8X9YcsObnR5xLIx4p
6/DNXIQJu8uGB9fOsWFkm3k2dh8DsXFdraIJ3yCkaJxRWE9y5qA5j+XyQfzc
cOH2rguvEbaiSORHHRu2tKntIa6k72p532JfO3aOSyY/76KQnDxPwCyPBWGx
cbe/fMNw3hW2iz+RjZSfOk217f34c+J98J5GH/gYb7itV8LG/gDdVW05/ciX
PhwtXOaNQ4uf7Uu6xcGr/XIpj0gu/pj8y1i7g42hfnbQphk2LomojWioMnD/
+qMjM0e+ocpwo8aqNWwE7ghY0u0xBM4WvtG7/FWwFU296CBG8i1euv3eMRow
oScpP3Ae3JEmi76MsGDWEeE0EDEIIfo7C6qqGOqqNcUumyhQksdFs/hHkZBo
qLEztRtvEyTeFd+mED43dTPjSR9y3sRuSX/uCgG9K/5Jmmzcv7UlzWzhMB7M
uz87cq0GlzxCb6iR87b5xT3aukwGksN4/VhLu6A7YLDmRjEbn/7jeHdvHMH3
bMdtfgptcDE/5tHDw0FjiND6FVbE41f+GBP9SMeJ8fTtuaFsaL6taZJSosPo
9hHaRvPPSPTiY0/NsfA4vKjr9eggtJYGrbndXYr04uJ0E0sO5rc2dAQnUbB7
EX848s8odBb9ddy7jYPI5iDWVbJ+uq5XgxaT/rz4w+b1YuKNDk/kzrSp9UHW
okny6UdnNNU/tcgl8ziZ63BOksyjUdWnvreynijZkL+f2Uf8/QP1+eGaHnw3
lU+++cISRflPx0S52FBhX6X/mxhEQG6yzkuZMsyVePHd1aJwS+td43GHURQn
0taeV+zFcp6lew9tJDlm6UcTvTsEpo7laiG9arx91ixZk0zm8Z6mttYDOoJ2
13UuXv0FTs2bW8Zcx6Bf1c0OnNeNpL+/VB4MHsKeVyECyw6ycX6BsPzAzmG4
lD8cZuyowxZ6VUro8jFs/HW8RuJtN7rLD//tzjCFq1qwmOIE8QHt61dlCwZR
Kfdy1YaYEiQqvHZnHyD7u/H56dhro8jXV9/yZqgXoaaHp8KvEJ+6VTckp8rB
gnaBUMc4FgbSnnltPUf6/sW9dvm/fSho/bzP+Yw7dkkPtj66w8E8QUNrmWAO
4ktNlwuasLHXv/CPKznPpl8WJHGT87x5a7roNeLbUg4q7Ob//37I+rENQ69G
cM0sI1bW5CsSvYU2yZhTWCp/Yc2KqlHs3Xe68xd3Pxxi47b/GSS+KSiheefr
COwv1uQkDXxFajglMX2TDa3x/q201n7MzZe5OFfmg3WvXtIiIlloyeAcucam
kXnlSoTvZZgoqhq3TbFwY8ZlyZQnDUt/TwmuLfTHC8GvB5wLWNj4SOJQa+4A
CrtP8z2by4FrF83IjuQG4+PdMfUHFI68Fnp+V5CJg+5p+zTpbAze3RB1gTaC
vcpSV4J5O2Bm5FfaTnolJbaLucmIhiyhY8by7PO4xt2QfVSEcF2h1VKJaDbO
4kmzs/YIVDZMa72/T3rzF1/++zt9kMvc8feOnit2L9u1audRcl/nF0aTZ8hc
VlfZZAeMYuPf+Rv5kimY9P+1WvmwD699U83K/FwRWa6ocprksMk/Nb7Esh4w
OoQWXveyh3HqkZo9dSykcCuumuEfRFjH8t9lYq9xb1JxWX0gB637Zu9GDfVA
YGr+wW9GJ/F2b/39NT3EL6TniSa8HYF02Ah/qMtXmFxd9m3eBZL/Pda5+0Xo
yLNfXuD2qxnBWxi0iq1j8LW8qbcwsBtikrdNpCONoWz0JLKI8EZNWuMJ8aek
j7wyluQ+bYTm3K53iORgpZXJGbU9HIzIRxr/fM3Cd6bIovE+CvNVeM65l7Og
Jj853KU6DMl8GY+Vx8g6e8tq7Do+jLd+PacUeOqhssl35IcvhUsVjDcF//98
yx996fHNNGz2Xqu0exuFp9FcrCbFUQwejG2Lk+6BV3W21PaLFB4IqO+06O7D
Sk+VQM4PN7i0h976XjaGjuTY6QTLLnDl31vFerMDmooxl97HsnA8X32hzTca
Et4vY0ocCIK/T8s9K342eV/D50elh5ClKC51+0k5KrSWJ1kZcpCpczP8syeF
rGuJ9ZfvjCIq6XTctCgHxvSoG105vcjJHnfimDngoxVdT1eCvO+jLdnVDQx8
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
1fcnXqHxnWhsleAaI/dFp9t7Q5Mu6f0nFskG2WkoO9rt0FTORsvtyxt5LVno
sHh02EeuDz3U65V8LDb6/A7ONaZYGNkps+RLBgPfnK0jry0mPh47PF9OuQ+D
y6in0cs/4ueWvm7ZVxT697B+0V7TYDF+9t/IPB8I3O3MOj3JwrXFH/guNvTi
ynSnwzqJUvi13KCLkj6lCVoolMQzUfwjelxCpgc3+px3bSSvU3C+7byFNXRo
O5mLpv4KJK/76um9jyjcatM0KP/SD0f58L2H3n3HHiq6NbSPjavmC+eVEz+L
aajay7Zh4K373uficznQLrGLiyb75RzwcvPrK/1wPmPjP7xoGMzcLDnF8g6I
58zxmFQxw6GwoT12P9jIq/TK3rClGzJxLd++pboiblPCy5NOFI4dVYuX46Zj
V8CgH4fpi7GQ7Pw0KQ5KtuZ5txdQ+NcQdSM1ZwA6wc7lRT85MAxj71f/0wGe
9TdCrYfMscH+8Zncd2SeLv0tmb+bRTjdNEKvrxdWPD0+x0l+Soo/zd7ER4fg
kyH/rTO+WCDq4GJCPHdfpVhitCEDCwSXNDVWV8P7pdInQXnCJ1Exaz6DhuKC
Y4a+vJ4IDA/aXTNCgX+TweOHSwahIaNcveB9C8qPtBzkleOAZnsn5UQbhYg5
LnWTiwax7c5lhtdpNnbuv/ylfikTvn/TTWJJTp83EwjxJT5r+W2U+9zhLtyL
/l0nLuKI14yvObwdLKQLvyzTPdYLRckVG38mF4LemmYrw8/Bcj/9VjNzwqH2
XfP/vu+HtD5/sf8UC/Nj1CRN3cncqy3oPPg4AIsSdm+8pcmG3JXgvWzLISS/
9povOdoJ2nmBI0pn2eDZb0JT/NONUrcV6s+PuyPi5cjabhmSe0m79U/+GsTS
t8wPBbs6wOV38kfqQw7qHwWwfWM78faTk3vvLhtY/JVQi4wdRom7Y1RBcTvU
hguiemd0sabMN2LXDgrjU5crflLEfz81WX/7Xom2Kx0FxR+GoXysZ960JelN
s6Pm8TVqkE41ymDUkLyo2cF46DmABQb5l8OPNeFO04kXtzLI69/VubyuiQke
76b+33U9EFnFpZKVyMHjscKCbH8OxMwMDB5qU3gmIKHmtpXCoggao725D3o8
SkbjCpWIM3sk5Um8+OpRi9d1X9kw3RP/VymUiRC+bSc2EU6Q1FaLizfjoLTE
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
cAZqTi1he7lhHPKXt17hIvnNtOO4ZpFaL1YsWVhlXKGCnpOG+Q3kOSj8V9GZ
h0P5tmFYpEhJJaQSUUmKNkp0paRNJWvWELLvS6FotbRH8ku0WSIlUShFyJak
yL7MWGbMzPsOUaHI93x/csy8y/Pc932d58wxM+ynkWvVObhS51XVtbYTK+Pd
vrQyKKQl+CYOVLOR+48VXpLVjP0Ricebf1L4t7vU3URhAHufNCndmd6KG3v2
Kfd7D2K7Py8ibqodyg9bfMpfGkDpMD8pomMQI8rKM+pW/f97iooPjeqrIsdN
0EmP1INDWlDQvYB+bBv/Vy44VYsrVe+2HiGeOFfvy1+XfxxMv7w5Xfr/r3/E
67zfd4H075q5nkFqfDTRKtXrL/Dw8+GasvYyGrPPq8w3Okr668hk53f5Pghe
n1r04SCFTQv7Fj3W74dpbPGEze1PuDm++NZM0u8VDvW226Z4GDe0Dpz41o8u
mbmPNHfS2HMrOtPHi4OC627HtQ52kcf3TqteS+Ptu7WqlrIcmIZFTM1o6cDY
sl+va1soyCxLWJubxkbwYouY3cubYaDQNskidTKir6teKd6LMd5X0169PEw7
I3rlxBsePGLfmE4+Z2KujofB1q2hWC6yU3Qqk4el7d9eHXjPhPLOhW/cEkMh
lDFh8M+NhvXs7ryLIlzc2yq0wimfgd1ObiPeX3jIoPe90JbrRUp/z1uZLa8g
uoGT/sqfgomrdwznNwMVMycuHbkXhPzdthcfhpG5MDJ1fc0BLlpu50eUODKx
/0zFve+hNIQfOoit3suF9pWMI5Q1E8Lbz8ieXUzm54w3W3vd+iAyf2BaWWM5
0pvLpUXN+BAs90zPjqCh3HHtz+13HIxvjzw18yEf7PVvnefd46OkM70gO5nC
unTDDS+4fAiteRalJdIJg0Znr9F7Vpi/yPxmYg0F4zmPxh65sLE813fzmnVN
iFzYFScQQ/LXUKH8SFUnLP9bLVSb7IAxbc2VHkl8rP1j6uhzjY9Nn5vPaodS
2H58b6kL8SyVxDYR8Yuk3zVDGw7fS4fzHqyc+ZTw5IKnmXmXOtFk3r20a9wO
sfMePF1KvOm70pbUR2vZuIFZfxfrf8e5meek1myh0Sx43/zDRgbam9cGmRb4
wkYj//5XdxqJV+ZsTxHjQsM5atO5YgbatvE+mZK+qxQPXVzH5qBPc9PpAw4M
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
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}, {{99.5, 
       FormBox["1", TraditionalForm]}, {80.5, 
       FormBox["20", TraditionalForm]}, {60.5, 
       FormBox["40", TraditionalForm]}, {40.5, 
       FormBox["60", TraditionalForm]}, {20.5, 
       FormBox["80", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {59.5, 
       FormBox["60", TraditionalForm]}, {79.5, 
       FormBox["80", TraditionalForm]}, {99.5, 
       FormBox["100", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{
  3.7111882141564255`*^9},ExpressionUUID->"fa717c41-bbce-481f-b168-\
c0c4f03867e3"]
}, Open  ]],

Cell["A much colorful visualization.", "Text",
 CellChangeTimes->{{3.71118824153846*^9, 
  3.711188269707638*^9}},ExpressionUUID->"9b510a2b-89cf-4591-917a-\
6d60b11ae3c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], ",", "20"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Obtain", " ", "a", " ", "random", " ", "sample", " ", "of", " ", "20", 
    " ", "items", " ", "from", " ", "100"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111882730420823`*^9, 
  3.7111883507108164`*^9}},ExpressionUUID->"e55d664e-eb1b-4b4c-8f6a-\
00e0b9d2a423"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26", ",", "10", ",", "38", ",", "51", ",", "18", ",", "21", ",", "64", ",",
    "3", ",", "19", ",", "6", ",", "96", ",", "63", ",", "37", ",", "99", ",",
    "31", ",", "90", ",", "27", ",", "67", ",", "71", ",", "50"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.711188304089306*^9},ExpressionUUID->"473621f7-1fda-487a-828d-\
12278a9ee7b6"]
}, Open  ]],

Cell["We can even visualize things in 3D.", "Text",
 CellChangeTimes->{{3.711703025110345*^9, 
  3.711703041217431*^9}},ExpressionUUID->"aa5add7a-4ea1-4b41-8569-\
eeb8334ef8a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPlot3D", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}]}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "2", "D", " ", "surface", " ", "in", " ", "3", "D", " ", 
    "space"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117030488224816`*^9, 
  3.7117031626290245`*^9}},ExpressionUUID->"4e71d43f-8799-4741-a9f7-\
b0d53a6e0133"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
SteidWsz/7GycdL1u1iH1n8aW0e/miM975D0zbdrnhouDx2I68m7RbvbujT2
i6j9fBatW3SWuOhtSqHHWUp/OW+s576X1H5I3zzctuPEmrSf2fR4QenbO4ye
KTWhuiCiz3ZckuS/RUK3D0p37GeaMuoXrt/uFi09WRI36wg1jlF1Pgrw5bDq
y0pNfI6sAJbhA+e6ctKZcRF9rvOag1ZRqG6H6MUR9gapDnnMuIh+d8/o+JBS
fH9HFhY2xvqra5UxdeIf6JJnrmiD6v2IfnOFxaVZ23B9lALYsSw/uK6pZnIg
esrtURYp+ehc7G9cksBjFtm43kkFghYUL3Q+VoXyy4L/fCK3X83PQHxUICDK
uGL1xDyaI6VHOr+8XuOA6tuJHj/pzLaTq9G9jL/62RmPb2yuQ9xU4FqA6q6d
9ujcnDyP65oRYWmGzh+JX37sr5rjs1oQNxVwGbXfLpW+Z9R3LpCQ3MP9+RnX
QanA/iuzN9r0Q/U5RL/x41OsXQSug1KBDX++jHbYi+p+ie6ffibvVl0FkzNZ
pyReHjTB7hzqR4RH1ZSINrUbZUyd+Gc6psEkN3Rfg+j/uMb5xgrQfQ3ynIW3
X/r9jEXn78TfezFvavU3VLdDdKXkUssjQTXMvBBdbkbdqdzt6PyX6EZKHs5n
WnG9GXn/0NB4a/dGpk78/ktOqTa9rGDmheg2KnGbjuZi/qpw3E77UPA5dO+A
+I+/f/D0cj6630F0VuT4c/8GoLop8pwxLyKmnn6CzuuJ/+zDif0sqf0ocd+6
coTfjUlvUtC4QfS5FbkTxm3CdYAcuLOs+dTepaVMzkSfk1F8d1QUvhfDAXNt
K9eCaZWoPXPgivaRuavHoDoEok+Yn5EVkIv6NdGL/R9ULjxdgsY3Dvja6lnL
zyhmtjfC+0nq2bzqiEbU3rRh5pRLtqa+qJ6c6Ou3+k0/4obruLRhQkBazeam
GmZ7IPrPTKfadQ+rUXvQhsbK4zkNnni80gal65qS10qo3pvo564bZy++X4X6
kTZw4sdpr7bJYcZF8r9MrjD0lgj3Fx4keo+Y1KCC6+r1oIftcUzRgxq3FWj9
1k71WitdXE+oBxFjshV2KlagPOqBgZM7R/IPvo9A3kdw+xJnMLr3Qd5H9pXP
Oz9VPI7pgXMxN03eHN9T0IMZOz3sjWbiewp6kHqw1DdPLhe1Bz3IsmFPi/ep
QO1BD2Yvb1+TkdXA5Eba+4djoqmq8i1MPuR5gmJXqPtUiXjqg8nHPbfChU1M
bkTvnvbpnUE6qpMnz0kvWbkmWVTD1Im/p1LfO/UsuqdA9JOHvarFB3H9jz7I
fU2/8CAN1a0RPf/NVt9HGoVMnuTvFbuPXGm3DNWz/fUPKst+OCyJyfnv82fc
Wl6Xm87kTJ6zIG/IgZUXUX8kfv6aj1nF5uieCNE7sx//khSg9kx0TmHRyTTL
BmZeiM46f/eP0XX0nSV/bvfkh1fJDDSeE31ISkF5bTsan4nOgemquwag9kZ0
YeoXty7lbOb7E/1RWse2Z45ZzPckutjij2OAGe4XpL1ELMvd5Y7r8LtFU4/t
z81SS6G/Z5S+XdDmcTMhB7XnbtH3h52x5vT+vx6tC2+0N8XycJ12t8hy/Cnh
RMMiZrv9W8eium/7vMX56D1lQdeYbTLc/T2T2986k0fvnnVczkDvLwseJ1jJ
56JTmfrfeVT2xc0X5PB9GVl4O/Xtm7iEJBSvLCieDVk1800+UyfPSbu575wM
/w2z3RK/d4Oc94YkXPcuC9Mutex8noK+g0T/xctQkaPGDZqbLGiPzHhssBPd
syZ/76KoXo97XDwfloUoW5vBsTsxZ1nIGabVopKQxdTJc0BLyGV9y0bjiSwU
TJibaP2+EOWFBTs+2jeonSlDeWHBrkGcbA8TfP+LBevueW45zsH3ZVhQmRH7
OEaxEXFmwSLXa1VhF7IRZxXYlf29+/AMXNfKgnnvV8r4+BUjzkR3qNr0sacK
8WRBS2VGiPgx5sYCDdvp7ZueFyFuLDiT7Lqm+8AnxE0F4vKdLg5ei8dhFpje
OTTrqnkek9vfOoeIOas/UPdE6PmzKjg31u32P1iF2qcq5J2su8XTQ/W9RD92
scdgqCfiQHRDnTjTD3roPgvR1ROnN5hfakDtRxV2VXb/nNiI5kVEzwpOnZuW
huZFRJ+k/UlXPxLfh+VAUELPfMXPFag9cOCz1vNVYb2onpno62Kyzu17h+8L
c8D2s9OVWS4SlEcOSGR3r51Th+/5ciD2gOHVLC+cLw5sueb24KNxPvM9yXg5
y2F54nkWqof/ux9VUDBe7hiq0ya62pDJsaL56D4Cea9Fm49nNM9G9dvEb99z
45nDf+h+OtGXQseonGrUL8hz4ieu/DDUCI0/xP/t8Lhny/UkTD5EX6yeoGqs
VIbagzYMWNnlb9WB7i8Qf+vcg939hxcxeRI9XP7R1hEZaPwhuqmL/X5lL9RO
iO7AVjD2e42+g3/ne5afQm2p+UxI3z5YgGhcXl3ea2ZeiD4wLrzGJyYJtTdt
cHzw4NinMLSeIn7JcxNzoT3690bI+9qyhevFt9H3i+gLElM504VoXkf07UXz
ZCfsQHkhulDOr+rhPVQ3+/f8ZSvvT0RXDjMvxD97oWHo+knoHiXRv484UC6f
hv+dAT2w3R1XscGykpkX4ldMkG1eKl/PzAvROwIyhxfrVzA5E523R//LWurf
Hwvp22cz7Rd5tXcHui/5t/7B9XlJcjq+F6wHi6fd5N3eVo/mJzxw0dExdDqK
7quSv2dEl1/Db9VaJmeij7SaX3VqH+rXRB912J81oreEye1v/cD1F2Etk4qY
fIhe/7r1yzJqnBH37csttw4cVm6G6r2J/53Zau+kOtSeiQ7Bg+38/pQxuRF9
cjb3uk0EGh+IbrC5tDt2N6qHJ/rVpvLqwcro31Ugf27w1evwf1R9JsWB6Cu/
XdXKikP3vIj+xtrXccoYdA/07zl7kMZwj3/RvgfRtTryNobT9dvatG47PVv5
v/ZMZlxEj/h6a7pDYCEzLqJ/2Wf8UeF8neh/YGSI6A==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtl3kUV0UdxefNsIrssguy78q+KPu+7/sqmyCgoCACCoorGUK4JGi0GYlm
pGmSSFQcJMIwA42jaEp4TAXjpJiGqPS5584f99w78+b3fvPmu06DOUvHLokh
hGuLEBJ8HiDDNaAjE8MYXMeCLugRaC3eClfm+RD0RHRP9B9BL9aMZ7yc+d7o
Ceib0LXh6jy/GwxgfirjVcwPRk9H34J+EK6g5+hL0TXQ94IrWTOa8VLmH4Or
MDcM/Sv0pegJ6FGsmcf4dvRI9Fz0beiZ6FvQ96OnoJeh16Pvhy/mt+XgzaA8
uh/zw1gzm/Ea9FT0cvR30N3RY9E3orfnvWmPfZmfDN/MfAl0xcL7Lw2XYc1a
UBJdGl4NIrokvDz/t/awEBzmNwMZXw6Xhcsydwf4JeOGjBvAL4E26GZwC7g+
zx8CX+u9YAH4GaIWz+rBf4u21xXwt8G2XQxeZtyZ+VZwA7g2cxtAI3QdeCOo
gq4ErwT7WdeJcUs4waWYWwH2Mm7HuHm0w5SAlsoPGHdg3AL+CxiAbg0/Bepr
3/ATcE3WjkaPZWMLGd+JPqizRs+F6zLfHD0Z/R7cj/Wj4CbJ+7+a+cuTz20B
+gr0IPS16Jvhcaw/Af7E+CrGc+AecBfmdoF/yH7B57MKPR59EjRIPudpzL+e
fVt22Y9uG/xd+9Btgr/9ALpd8PkcQXcP/t7T6CHodugP0YPRbdEfoAei26A/
RQ9Ht0efRY9Ad0A/DmoyrgtPYD+L0Xejb4LHsuZd8Ca6c3Bs1mJNk8KxMCN/
10FwdT63Q6B68vmPZc11+X+PKc7z3l7TXlkzhPEi1lRF1ytsowX5W46ASsk+
NpL5pugu6FnyW/QlhXNCaXRl9CD0WngSv/sQ3IqeCH+g+GFNMz1jzcXo6oXj
+nbZnOcf51ykGJkPbtB/wscVG+gp8GlQMfmsRvDbJfkM3wz2O9nlGfAEz+ow
vgzuk233tHILuhP8HDjAs66MZ8MvK86CfUzBNTTYPw/Jr4O/93foRsF+sjM6
fsbDz0bbYqJ8UjHNmh3BuWQ6/ElwTpoFnwW75ceF1+5Dd4Rnwpfl92/VeTGe
L3vDH0Xn6i7wk9E2GgOfjM6BnTQP1wq29e9Be8Yz4D2grfYB/zM6T3aEy0Sf
rc740ZhzE7gQnJOXKMQZV4SXBdu8I/wseAfdFR4JP5xzRC/4XfjK4Lx9NK9X
bB7LZy4fezDnjp7wJ3Dv4LpwSu8Izqs98/t/Cx7IuawH/HzOg1PgXaAVemq0
b8xjzVfgm+Dcvghsjs6V3eFf5Nw3Tj6cbf1jfY9iLtgnP8uxoxj6HPQPrgt3
Fa6P8s1d8qngHFUh57T14DHG5fUbnQOYWTiuldtayx/BZ9H1qFv+RvnJk8G5
qhW8PdgfW8KPg5fQDYN95SfRsTYU/je4XmcNd8s54TfBNm8CbwP/4dlSxlfB
z0Xn1cbwr6NjsBH8ImiNbgo/Axrr/6LtqvN/EfTLOXAn6CWfhZ8KPvsG8PeD
/auxziDYl5vCPwIv8K6W2lP2d33LFlAjn/lmUK1wTd8EShTuMVaBR6Jrah+4
VOEeYI3+L7q+9oY3weWY64t+I7oPUY79e3Qfotwrn1btvkc5gvGkwvm5Uo6X
+8Db0T2JcnIZuCpz68APouv7QPjhHAvKb0WyrdU//DQ6jw2HfxhdRwfDF8BF
hff2h3xuquPb8vuVu3ZE9xR1wanonN8V3h7dP42KfqZze0Q+ga4WnIf3Zv9R
DjkhOwf3Kq9E22w+/H50rl8HT1OuZc0b4F85v98BbyncD9RBz8r59i3FBrpe
cD2azfeuY/w99I05D59STmT+NsabmP80OpfoeYz+L9Wvj6Nr/V3wIngC8+/r
/Yyryvbwo4X7EOkzsnlwf3gRGBXcv52JzvX3wsej+8nV8DvR9e9W+L3o2NV3
9GdvU+CVzI1Az0GvVY5N9nnljfop52t9a7KvKrcMSj4vvf+FHI+KnT7J/rMC
fTq6pt6j2Mk+r9g5Ed1P6r/0n9r/2+Ch6F6wJrw1+0Zt5Sd4UHAf+wV6QHAf
+/McX6pfW6J7xFryt8J9oPq9nTne1Su+Fd2X6ntXwjOVA8D05PF3mT+p3BPc
q09jfgXj++TjYExw33u8cL+knn9ysj1l1+HZLgfAa9F3hOvhj+AewT3/+GQb
y9bj8rccBq9H99LL4KPRvf0N8NBkW8lmo5PrnXx1UnLukq3HFM7Dr4AxyXVQ
fjsDvRq9AX0k5yz1in+N7mcWw69G94cL4T2F87By3eDCtWaf4gHdIbifPBvd
b+lM+uez2hvsR+oHjoJj0fcf+cC26J5HsdM3x+Ce4HOdAZ8BQwvXuP2qK+x5
DeONrD8U3ZdcE71v1Z0/g4nJuV1+dTjHuGpF78K1dbfWRefiefDTOfeqx34e
3Tw4t5dXjATXmhrR9VF1skJy/lW+KpMcg8pXX0T3atpbleg41R2qXHKOVt3R
hUL5VL1C9eg8oHd+Fd03qEafj+4bVN+bJfdb6q8+j+7R5YfNk+uW+vNuyTaW
P3RNPgvZsmeyD8lnZOerVT/Bf6N7d9k9Jddg1dxXC9csndX6wncZxVrrZFsq
H3ZItod8o22yH8g3DsLtg+9HGwvfWxWbym1z0F/qf3NulL/uLlyvVddkz9l6
Du4s3LuqT2iZbDPZqHNy/CheWiX7iuxeKrkOqb60SL6r6B5UI/kOqF7lXHRP
ox6mbHSfrJq+geeXBOeEC4XvPuoVKyf3vaod1ZJ7SvWK5xRjwb3fl9E9uvL2
+cL3C/WQyvFz0edAEX0/Us9ZLttauaBh8h1Q/WSj5Huf+sxvo2un6vWOwjVL
teuBwvVXflMleU41r3HyHVN9b+no+4L6mSHJvZPyecnou4Nq4tfR/YH6zJrJ
vYp672+i+wP1A/+LvkuoTtVJ7vPUk/8f9xehCw==
          "]], Polygon3DBox[CompressedData["
1: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
jH/54lHxKX9wZTmr3HVvpBWD5zD2cwoOLF7ZQ8kN5SByEXsC8WeC+VGCk7t/
85HXsfdiznPYzyIvlTh/8+Uq5E78V0twT+NDbmXNGlfzUfyyJzJ/b/B8S9Rw
a3krZFSOmjOm5qfxYc0Sf+zxpuTowcSfe8z/Ej2b+HIdclcJzBV75cRLc/Qw
4u0tnmeJHlQ8vAuZXoIT+/19ka9ycGjvF8N/zsGh/Z6dkZ9qTZAriJ/WCvPR
fFmIvF2ipp2aoqZZ6+T4chc5jNzfmmU+LUAW1/P4FPtgMQX/3RLnZf4bz3IE
a481yFr6TYn51hvxwJomtxIfrXWblVira/YsPinRC4kH5os12f21xtsbep7y
2CXot3P0VMfW8zB+5HTi1zvIx+51Ce5mvtrbXZOjhlu77c/kjCfX73fcHsb3
H5Cit3GOvZx47L32GHI/OaC9xyU54sA+3f7LGi4+LjFfS4yNrPvh3JtL1HPx
wnr1Xon8sOf7FX8c/iUp8HkM/nUl+nXx+/IcnP3hmo9v5uDc8vSFObi4eyPX
l0O6R29w/0sp8ORT/I9z4PyCEvnhmS6o+fo140vx30uB/xn7zRK9m3hj7+Q/
jREpOIfx5DPm1/jz2caUsSX+fptjD5bU/F+W4x3G7Vv13Y4Zt++XmOuZeXbW
l99ziDj4Ub3mM7/J0Vf4rmXICSn+6di/2JO4R+6N+GBNtjZbv5qVqNkf1vNt
WkLEqU/rNTFSrLRnaFHiHuvIFyWe5T+W41L0nJ7/D/jfpeiBjReb5WE1fy7L
8U/plBScznj/Cf+nFD25vbn/KM5M8Q/FftV+3md4r+f9I9d/SNGTW39fKdHP
Wg+tj++U4LvWP+ur/4zkB3IauU2XErVDjBar5XRyu+3Qz5bgWHKtfujZYmEO
Pr+juFmC08nt+qCfL3F2Ys9h9QzlWHKtXuiZ+J2RHvj3Ic+UiDW5xQE15uRA
cqGe6KecWyL2rBlyFzmmXLM3ehZ+1xL3W3OsPe6ZZ3NW3Uv3xLP9Z90rz8Cz
Pb2ejWdnLA7PcYbWIGPxZPxvsbctgWVilFhlDFm7c47Ysiexvtoz3ZojVlzv
cTliZsv6PHPYXDaWzYWjakzLocyl0/C/L8GZjO1T8L/D7lmi1omhYmmvun4x
SCw09s3do2sO+IyvU/TQPtsYlffY9xi7/kM7JkLoD/yeV4L72wPIZxZ7bjn+
C1gPPXN7T/nU/DpmrfSMnTsjx5l5VtYvY+DRii/GxlM5eLL/Qq1P80v0Pjul
wKMX8J9McYav4N+Vg9fau1n/3IMvU/RkreuYtVG8d+70HLjvv8DHq1jrjVGv
+U5rozHqWlyjtdaYnlFj2P8fvVLEtv94/M/yRQ5+rO2/lz4pxuyxp9T57pP/
WOSsclX5waBG8Il+KXDIf0j+B/osBz72wX6q7vcnObDZfyn22Atrzk2u/pwa
4/bu9iOzaw7Zu9vDm1v+I/VfqfVmdI53zaj76zvlJHIT+5V7cvC18XV//F5z
0Fy0/5mZY468338r3jsJuTFFTt7H+Msl/tf4fdZXOcgtKXJ8ss8u8T+0Ywr+
LGeUO4opj+nn6Evs9eWPjtmXdK1zfYY81d7fZ9+eoy/xv7R8zH+ufrPfar32
GXJRMeGROkfu1iHFvfZs8gx7dfHOnP48xT8Dc91/GJPqfr7MvP8D1z7pVw==

          "]], Polygon3DBox[CompressedData["
1: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
fpl6
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0E8rw3EAx/Gv+c/kYu1Gbly52pWrOTLDbFFkShRFyVHZM6DsGVDzDMhR
8Qwoyv8NI8prtcPr+/4cfvX99uvP5CdWGkIIc+So7T1Hpx5ogZh9rEX67JKe
MWhf6rBe6w0J+14fGLN/9Y+k3R0JYUofSfHEM9O88EqaN96ZocwsFT7q7/zk
iwxVvpnnhyxx90xql0YZr33jDVVG7Tu9ZcS+0iG90HMG7FM9odc+0kN67H3t
0F3a2WGbNrbYpJUN1mlhjWZWydPEMks0ssgCkfr//wf6KDK8
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{387, 251, 386, 656, 572, 761, 388, 657, 573, 762, 389, 658, 
       574, 763, 390, 659, 536, 391, 660, 575, 764, 392, 661, 576, 765, 393, 
       662, 577, 766, 394, 663, 537, 395}], 
      Line3DBox[{399, 664, 538, 397, 665, 268, 401, 666, 580, 771, 403, 667, 
       582, 774, 405, 668, 539, 407, 670, 671, 540, 409, 672, 586, 779, 411, 
       673, 588, 782, 413, 674, 541, 415}], 
      Line3DBox[{414, 783, 589, 412, 781, 780, 587, 410, 778, 777, 585, 408, 
       776, 584, 669, 406, 775, 583, 404, 773, 772, 581, 402, 770, 769, 579, 
       400, 768, 267, 396, 767, 578, 398}], 
      Line3DBox[{419, 675, 542, 417, 677, 678, 543, 421, 679, 285, 423, 680, 
       593, 789, 425, 681, 544, 427, 683, 684, 545, 429, 686, 687, 546, 431, 
       688, 598, 795, 433, 689, 547, 435}], 
      Line3DBox[{434, 796, 599, 432, 794, 793, 597, 430, 792, 596, 685, 428, 
       791, 595, 682, 426, 790, 594, 424, 788, 787, 592, 422, 786, 284, 420, 
       785, 591, 676, 416, 784, 590, 418}], 
      Line3DBox[{439, 690, 548, 437, 692, 693, 549, 441, 695, 696, 550, 443, 
       697, 302, 445, 698, 551, 447, 700, 701, 552, 449, 703, 704, 553, 451, 
       706, 707, 554, 453, 708, 555, 455}], 
      Line3DBox[{454, 805, 607, 452, 804, 606, 705, 450, 803, 605, 702, 448, 
       802, 604, 699, 446, 801, 603, 444, 800, 301, 442, 799, 602, 694, 440, 
       798, 601, 691, 436, 797, 600, 438}], 
      Line3DBox[{457, 608, 806, 456, 709, 609, 807, 458, 710, 610, 808, 459, 
       711, 611, 809, 460, 318, 461, 712, 612, 810, 462, 713, 613, 811, 463, 
       714, 614, 812, 464, 715, 556, 465}], 
      Line3DBox[{469, 716, 557, 467, 717, 617, 816, 471, 718, 619, 819, 473, 
       719, 621, 822, 475, 720, 558, 477, 721, 335, 479, 722, 624, 827, 481, 
       723, 626, 830, 483, 724, 559, 485}], 
      Line3DBox[{484, 831, 627, 482, 829, 828, 625, 480, 826, 825, 623, 478, 
       824, 334, 476, 823, 622, 474, 821, 820, 620, 472, 818, 817, 618, 470, 
       815, 814, 616, 466, 813, 615, 468}], 
      Line3DBox[{489, 725, 560, 487, 727, 728, 561, 491, 729, 631, 836, 493, 
       730, 633, 839, 495, 731, 562, 497, 733, 734, 563, 499, 735, 352, 501, 
       736, 637, 845, 503, 737, 564, 505}], 
      Line3DBox[{504, 846, 638, 502, 844, 843, 636, 500, 842, 351, 498, 841, 
       635, 732, 496, 840, 634, 494, 838, 837, 632, 492, 835, 834, 630, 490, 
       833, 629, 726, 486, 832, 628, 488}], 
      Line3DBox[{509, 738, 565, 507, 740, 741, 566, 511, 743, 744, 567, 513, 
       745, 643, 852, 515, 746, 568, 517, 748, 749, 569, 519, 751, 752, 570, 
       521, 753, 369, 523, 754, 571, 525}], 
      Line3DBox[{524, 857, 647, 522, 856, 368, 520, 855, 646, 750, 518, 854, 
       645, 747, 516, 853, 644, 514, 851, 850, 642, 512, 849, 641, 742, 510, 
       848, 640, 739, 506, 847, 639, 508}], 
      Line3DBox[{527, 648, 858, 526, 755, 649, 859, 528, 756, 650, 860, 529, 
       757, 651, 861, 530, 652, 862, 531, 758, 653, 863, 532, 759, 654, 864, 
       533, 760, 655, 865, 534, 385, 535}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{101, 251, 102, 767, 266, 664, 131, 784, 281, 675, 146, 797, 
       296, 690, 161, 806, 311, 176, 813, 326, 716, 191, 832, 341, 725, 206, 
       847, 356, 738, 221, 858, 371, 236}], 
      Line3DBox[{103, 252, 656, 105, 267, 665, 132, 282, 676, 677, 147, 297, 
       691, 692, 162, 312, 709, 177, 814, 327, 717, 192, 342, 726, 727, 207, 
       357, 739, 740, 222, 372, 755, 237}], 
      Line3DBox[{107, 254, 657, 109, 769, 269, 666, 134, 284, 679, 149, 299, 
       694, 695, 164, 314, 710, 179, 817, 329, 718, 194, 834, 344, 729, 209, 
       359, 742, 743, 224, 374, 756, 239}], 
      Line3DBox[{111, 256, 658, 113, 772, 271, 667, 136, 787, 286, 680, 151, 
       301, 697, 166, 316, 711, 181, 820, 331, 719, 196, 837, 346, 730, 211, 
       850, 361, 745, 226, 376, 757, 241}], 
      Line3DBox[{115, 258, 659, 116, 775, 273, 668, 138, 790, 288, 681, 153, 
       801, 303, 698, 168, 318, 183, 823, 333, 720, 198, 840, 348, 731, 213, 
       853, 363, 746, 228, 862, 378, 243}], 
      Line3DBox[{117, 259, 660, 119, 274, 669, 670, 139, 289, 682, 683, 154, 
       304, 699, 700, 169, 319, 712, 184, 334, 721, 199, 349, 732, 733, 214, 
       364, 747, 748, 229, 379, 758, 244}], 
      Line3DBox[{121, 261, 661, 123, 777, 276, 672, 141, 291, 685, 686, 156, 
       306, 702, 703, 171, 321, 713, 186, 825, 336, 722, 201, 351, 735, 216, 
       366, 750, 751, 231, 381, 759, 246}], 
      Line3DBox[{125, 263, 662, 127, 780, 278, 673, 143, 793, 293, 688, 158, 
       308, 705, 706, 173, 323, 714, 188, 828, 338, 723, 203, 843, 353, 736, 
       218, 368, 753, 233, 383, 760, 248}], 
      Line3DBox[{129, 265, 663, 130, 783, 280, 674, 145, 796, 295, 689, 160, 
       805, 310, 708, 175, 325, 715, 190, 831, 340, 724, 205, 846, 355, 737, 
       220, 857, 370, 754, 235, 385, 250}], 
      Line3DBox[{238, 373, 859, 223, 741, 358, 848, 208, 728, 343, 833, 193, 
       328, 816, 815, 178, 313, 807, 163, 693, 298, 798, 148, 678, 283, 785, 
       133, 268, 768, 106, 253, 761, 104}], 
      Line3DBox[{240, 375, 860, 225, 744, 360, 849, 210, 345, 836, 835, 195, 
       330, 819, 818, 180, 315, 808, 165, 696, 300, 799, 150, 285, 786, 135, 
       270, 771, 770, 110, 255, 762, 108}], 
      Line3DBox[{242, 377, 861, 227, 362, 852, 851, 212, 347, 839, 838, 197, 
       332, 822, 821, 182, 317, 809, 167, 302, 800, 152, 287, 789, 788, 137, 
       272, 774, 773, 114, 257, 763, 112}], 
      Line3DBox[{245, 380, 863, 230, 749, 365, 854, 215, 734, 350, 841, 200, 
       335, 824, 185, 320, 810, 170, 701, 305, 802, 155, 684, 290, 791, 140, 
       671, 275, 776, 120, 260, 764, 118}], 
      Line3DBox[{247, 382, 864, 232, 752, 367, 855, 217, 352, 842, 202, 337, 
       827, 826, 187, 322, 811, 172, 704, 307, 803, 157, 687, 292, 792, 142, 
       277, 779, 778, 124, 262, 765, 122}], 
      Line3DBox[{249, 384, 865, 234, 369, 856, 219, 354, 845, 844, 204, 339, 
       830, 829, 189, 324, 812, 174, 707, 309, 804, 159, 294, 795, 794, 144, 
       279, 782, 781, 128, 264, 766, 126}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
ZVPh/KFNwX/L4dn335fiNsPTbtqLzbAhTu9kkzIFUbrcYo8eN4Anc/qX7zG1
eGLnVTVHcv3K8EO7vdfLSM+NFIhvbcbIltooWRUKevfuU7vFnoDRFSunNr+L
Q0u1sdWPlgjvx9sJjYUEoDTzu5Bv+4vQ9MHxBtVJwuM9u68U7SyH7a2i7l92
p+Kw+JWRVtLTpI5ov1uzKh3emRlR6lG1+MD04eMTaYRTbBJt0jPTwPf2zsUu
einyslXpPSU9UHm888mEYS1Mjpn/acxuwgU9s9lTZH+urVHzPuaaDPRfB2xr
DQrhYsRRTiA+POb8354AHmcI+hK1foHqhvdf6+WjSI7Y1Vhw+27LQ+2B/Ynv
u1uA79SOI9xkfyJsbpbFTFeAksNXnljpOKzQOTDA1k7BTHrs3Z6pWlRz4Y3Y
LJkF1wWDsyfJ3O0VX/Xj1csqvDpzzJPdKwu/JG8QUqwkPe3UyyoF/UR4z1wj
cEgqF3n5ND9NEh5/xv5XqONaHXz+jJ0q8dUwfSbrX9090mNb2fIZGYvh6isu
y5/dTZDp9UGrmXB9Q+cb/stqZXBNR+WG271cnEjdqqhDODTvcIr0G8MEkNQS
fZucGQ3ShnRFJaLPZLPylH8//fATredX1ekK1DR6/uZJD/FJ9+t/M1rjMfkF
q85hR6Kr43Zm28lzNtsxcteapsNktIzxvaBC5H6lIDNO9ClwvuWHWlYhAHBs
rPmYC/St/9n3kp5w7e63Lb9XWqDtBs/Ydul2ZOZr/EtPoEMHz6pUI8U60K0N
Zyz2Tcf87CjN9niiq3KXhaaOUlB4JFqiwNOBY4tP7Za4/v+9fKTGaudqzJxb
b358exP40plXhZ+lYJ9w+MGOnDq8KWVwzNKnAyybSvf4v6ZDKCf9rv5gO/Jw
plv7G7VDSJDEabXHdGienVTf3VSPT18w2z84NQwnSkfa9V/MQu9JFrdjO5tg
9YnXa7qfBECnRK+5+XNyLsEHJFZNhuF5h1jvwkIZvJniMhn0jwJmx+anctcH
QWsrJWT2rwlrl2QNWM3nYP3wtz3sPi6o/mqVr+qxHEykmX5XI7nmwTV/8s+f
GFyVyNfY/fAxPDdvPrOZ5KBQznPFrsYaVKq22qF0JBsP157S/EzyaFd4xCRj
QBN+1c193bjggzYMLw+1Ez9cG2v6WuNVKp74pSw0o9uKNha3RHqIDnGEplfI
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
PL9vNmW3QPxCvVj3zmLcIBmexvyR9J9nB3STTSNgoHenVYZ7Pdbb3j+pFU16
V+np2pEULZAVsLXPOpcPEbsbfqmQea8PC9f0oVVD5tWzO3NX1aFfitAdmiUF
oCX9qT0hG160lLmuIn07fMS15ZcDBeeS+Zw2DdcA277vlw8+sQIR44qHviT3
mRjiRi0HSsEgXkTWstsRjlxhaNnxhgL7odi6dckFmF6pd/57cA3skZK6y5ZM
egtdbrvI83asmDLnV17jgHxP5r9oyJD5dY2u5/jahX6Dag31awtBdVzTuGyR
DvW3Zb/e1UnE+4nv3z+ZrQJD89bWxVoKDJdDtkvHZ4CxifYD9xMxKPbkuKsu
yWudo8OsrOu6Ie/QlpUF3hL4IlTd+m2GDg1Pcmycld+AcYO26uSHMIg4HFdw
+tYcSDmkeP9BGkwWaCr/ay+Eif7rJ1eT3JmUOTx+b7oFMpsZf833ZUHf1OLS
Hl0K0unzizFHLPBVj2D+r7Iw5PbKlvElPGW/fUPRRyc51Py11fDf/Tr8scy5
5wXpaaeOdQj/3lMNXi7FtvdOF2Clyha7FaL/gXnRX812LVC2LnznWWtEmXdx
l9z3Eg5t9rb9NBiP23c18+gWZeMB49lNx8l5laioPkvANuwerHyc/6gBbryT
vnZ5lA6d4dnvtm94iXKLYudv9zbB4ZPcM2/sSB6Z1iXGvHoNZu3hlR/DsiG+
6eLZJaLzWv7cBZ74egwXUfbq/1qA3zC2+cYLCg4I3/W7S9Xg6/r7tr6tleAR
sqDjR/jRbfNqxy2TbWA2WMm8g6MCmW9IRx3io+CwZzHXWgVEl73Veb4bC/Gx
xZqiMtIPt/jHfI3QzkfWsKwddXNhGO0y9qfxCwX7MzYs6BW1YlUpHpu1K4Kn
FaId6mcI3/VKTDD+6IJn9kG7BXzbsE1+4vKINh12pkQqT98sJnw+IvzPtgDj
z+oUfSM+5qx1WLbjVR7+2h7xWcCyAue8nrbOV1PQJPp7s4jXSxCTa9Y2GqHh
1JpkIZ23xA8/WXAyyBdC06aKns1nKvDrrfXLO0he7/ip1HJGLQ8371T5p36Q
cNLrA1priT5d+qZXRw2kQ+SrwxVcrgg+l/hVRGkU2CW1iFcpJmLZp49cBuLR
uPzjRs7IEgXvrOLiUuYKQNPtTM+hrAg8coJZqI3k4Mi9DzJRpN8Kn+JLM3Rq
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
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{1., 10.}, {1., 10.}, {0, 0.9897446535708803}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.711703086560026*^9, 
  3.711703116727495*^9},ExpressionUUID->"c7b1cd96-1386-4376-9d07-\
30adc9f22ea4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListPointPlot3D", "[", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10", ",", "3"}], "}"}]}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "bunch", " ", "of", " ", "points", " ", "in", " ", "3", "D", " ",
     "space"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117031699759674`*^9, 
  3.7117032169687357`*^9}},ExpressionUUID->"9ea695e2-c6e8-44c7-856a-\
4009bcb58f14"],

Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[0.3315753, 0.4561011, 0.6388182], 
    Point3DBox[{{0.11069177098755367`, 0.41129663659290006`, 
     0.8121818347250565}, {0.7196372056548059, 0.43610065286707034`, 
     0.7329733363761792}, {0.809434163358212, 0.8552508530964484, 
     0.9306610833867386}, {0.8852281556574, 0.2869920686085572, 
     0.5933580827350049}, {0.018528271806072416`, 0.42036914736633024`, 
     0.4681222984639608}, {0.01776648039380535, 0.40581027621754573`, 
     0.8533787721368522}, {0.3925782544532723, 0.39566596467860427`, 
     0.2338341995974369}, {0.3180520490332077, 0.04316811150159272, 
     0.632629813018968}, {0.3019219124661485, 0.5732020558143027, 
     0.2840264321861363}, {0.7761068052194131, 0.15656736748690991`, 
     0.2095038108761198}}]}, 
   {RGBColor[0.7926498, 0.5499369, 0.1278459], 
    Point3DBox[{{0.2006962163737005, 0.7069434057172053, 
     0.6437691052338885}, {0.07684534065772941, 0.2872333009335446, 
     0.3084883167390504}, {0.5801299310382744, 0.8522324920531354, 
     0.04558919809129636}, {0.8450607307554803, 0.6207679153735599, 
     0.9239269342434349}, {0.5779620321247907, 0.1666332591328865, 
     0.3061957417387633}, {0.9536397650957082, 0.3286998678931783, 
     0.9181223305035537}, {0.9712621089979829, 0.34219261342219287`, 
     0.7686267819765848}, {0.44355836320343656`, 0.2862387733421685, 
     0.5464999025975161}, {0.4933981291045135, 0.25771129210252863`, 
     0.30409045033393767`}, {0.7182006907791494, 0.37505878992811104`, 
     0.48327176678557104`}}]}, 
   {RGBColor[0.5041629000000001, 0.6224121, 0.1753965], 
    Point3DBox[{{0.5824102734268648, 0.06763371713087318, 
     0.9759915252721245}, {0.37137814688454407`, 0.5003003960337797, 
     0.3188680608955585}, {0.8368382120489981, 0.11305058768030007`, 
     0.12147265867126067`}, {0.7971514312211518, 0.5349099265263226, 
     0.23753594560181557`}, {0.7244478606706068, 0.23090529815619365`, 
     0.2983441162952609}, {0.013792423760670802`, 0.9480522780316365, 
     0.060344200369917056`}, {0.29808397351070637`, 0.14711974719603527`, 
     0.382737825893255}, {0.5265419832341618, 0.270391129399256, 
     0.6803843099484075}, {0.01897546489584334, 0.2237961372365631, 
     0.6040851414276629}, {0.5843863336420907, 0.2189232251912836, 
     0.6043071350872211}}]}, 
   {RGBColor[0.8302733999999999, 0.3470634, 0.18826110000000001`], 
    Point3DBox[{{0.8790468556823918, 0.6897372087356233, 
     0.027475086021301776`}, {0.05539461220105313, 0.9906134461394214, 
     0.7953381037284293}, {0.6322052867828747, 0.6486606190273052, 
     0.8841925026754482}, {0.8372839436645851, 0.6739879446624504, 
     0.6661217364972989}, {0.14566980384545314`, 0.9818312069138104, 
     0.45064691670286794`}, {0.9594916473312651, 0.2798764995666505, 
     0.8644396595015953}, {0.852485963549277, 0.6505634779312626, 
     0.35768284385082727`}, {0.23238343819438834`, 0.4133466686211442, 
     0.4284972340768072}, {0.6332158135188144, 0.3764653559720519, 
     0.29443933640057085`}, {0.4225956061770393, 0.5391360205246223, 
     0.18860371769526307`}}]}, 
   {RGBColor[0.47563919999999993`, 0.4235616, 0.6312158999999999], 
    Point3DBox[{{0.26679104829054934`, 0.778305205912518, 
     0.5618683767530817}, {0.04179448356790094, 0.16670404088562574`, 
     0.8765688130504559}, {0.8840369239079009, 0.22382509977900722`, 
     0.2509454285518258}, {0.6858081057497531, 0.378116020923543, 
     0.04700828306811111}, {0.6049481270332084, 0.20046977498606733`, 
     0.8762030526582019}, {0.8474396826121702, 0.29418279400257097`, 
     0.20872352614318102`}, {0.13351364610060346`, 0.5700486019237514, 
     0.42460489313402405`}, {0.6198841139570548, 0.3390924985797803, 
     0.6183300603718034}, {0.2207042400745325, 0.6284457000727128, 
     0.4584618662459632}, {0.06383367720836675, 0.9406432628418089, 
     0.4190617672154211}}]}, 
   {RGBColor[0.6948711, 0.3883986, 0.0921483], 
    Point3DBox[{{0.6186798242991896, 0.4901426291705331, 
     0.7632178389159985}, {0.8087162011015621, 0.731633291405634, 
     0.8469444461828848}, {0.5629610649429919, 0.6972815613000412, 
     0.1758949353818755}, {0.7014876917119661, 0.8482948681899234, 
     0.5188219045597036}, {0.4116060648215796, 0.8795486333927223, 
     0.8113647390793957}, {0.9416769808211582, 0.5018150774611452, 
     0.3171750832015845}, {0.4385516430380969, 0.9303623484279548, 
     0.9759442158290068}, {0.3303073346911254, 0.9219620209541857, 
     0.15830501791487595`}, {0.295416399926572, 0.05944485948120004, 
     0.8846223604816532}, {0.523577189176766, 0.9629688740861084, 
     0.8665764989929181}}]}, 
   {RGBColor[0.3275082, 0.5566509, 0.7041141], 
    Point3DBox[{{0.11501631015939595`, 0.8302438841432547, 
     0.3850087837835796}, {0.16277600722974417`, 0.44559506920639325`, 
     0.7350225992808186}, {0.2628164651129583, 0.761749527474815, 
     0.22623975588405454`}, {0.42912917944771123`, 0.805904332676485, 
     0.5972609765122179}, {0.5044802987197474, 0.018538917887172657`, 
     0.3605752727750777}, {0.5718514660702272, 0.1268054041580522, 
     0.6444424890483851}, {0.4570922367887118, 0.6868023633473348, 
     0.12077379152785395`}, {0.5976393856451472, 0.00011205709281481013`, 
     0.3861962995321866}, {0.908961937200776, 0.5671814026686786, 
     0.592370845869872}, {0.4265518042856633, 0.9298743819065114, 
     0.6699028309345456}}]}, 
   {RGBColor[0.9, 0.675, 0.], 
    Point3DBox[{{0.36705379927459525`, 0.2916365340236762, 
     0.7862640566444141}, {0.8827659835907391, 0.9194499776355087, 
     0.566816997736608}, {0.2822065339154427, 0.911239401304998, 
     0.024862412440488146`}, {0.20930452368995134`, 0.16269530595855342`, 
     0.8481671949837692}, {0.1645841595198143, 0.8711559130878077, 
     0.144747466301282}, {0.773954968133052, 0.732345953943538, 
     0.7351881713302852}, {0.6189252210526308, 0.17685632908002957`, 
     0.24623682178215422`}, {0.2335419433601018, 0.05907851227172212, 
     0.474381203352813}, {0.762163139339382, 0.8619161793964041, 
     0.9992300290547678}, {0.4277587620025125, 0.536130096262482, 
     0.49068180733062916`}}]}, 
   {RGBColor[0.5828616, 0.340344, 0.5526333000000001], 
    Point3DBox[{{0.4178259237163673, 0.22579742128126368`, 
     0.7268403595872175}, {0.2427258496460598, 0.8011823900953114, 
     0.34064079840332284`}, {0.5935281175093123, 0.12635431486226123`, 
     0.4854753926327031}, {0.5506415594357918, 0.23774736697930066`, 
     0.407291099482491}, {0.6383931192482162, 0.1509678627912716, 
     0.01000080477396259}, {0.9226866052629858, 0.35863023478926004`, 
     0.6627758816946014}, {0.3474308152336394, 0.22004925082434945`, 
     0.8684394328038083}, {0.5749980867345998, 0.998937091840219, 
     0.6018408010869396}, {0.14110037867224112`, 0.8495691653548996, 
     0.7881674478190015}, {0.5646329289948484, 0.8463055962316393, 
     0.6610754838003192}}]}, 
   {RGBColor[0.5144301, 0.5278347, 0.], 
    Point3DBox[{{0.4054713643098997, 0.3293278366153871, 
     0.1295141464424434}, {0.8509358307254078, 0.9031858059648905, 
     0.16178843638255125`}, {0.945601416006278, 0.8729926536574049, 
     0.9534234521306455}, {0.10206308840374967`, 0.07888764589052477, 
     0.7206037658057185}, {0.5629854039473385, 0.30735960571099774`, 
     0.6996628518800634}, {0.33272548789069223`, 0.18661414002850685`, 
     0.5385548470432713}, {0.8629103492531645, 0.10975045541191086`, 
     0.44287066353325155`}, {0.30518071973202665`, 0.9201843930039248, 
     0.9981650596663254}, {0.7583834612835869, 0.8443321374278037, 
     0.5174069719359136}, {0.11474657886151429`, 0.27642018685139513`, 
     0.688692607750675}}]}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  FaceGridsStyle->Automatic,
  PlotRange->{{0.013792423760670802`, 0.9712621089979829}, {
    0.00011205709281481013`, 0.998937091840219}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7117032191934624`*^9},ExpressionUUID->"0ccd1df6-d895-4dbe-83c1-\
d9cc7312616e"]
}, Open  ]],

Cell["\<\
There are many types of visualization available in the Wolfram Language, \
going through the documentation is a nice way to see whats available.\
\>", "Text",
 CellChangeTimes->{{3.7117032378870807`*^9, 
  3.7117032901357236`*^9}},ExpressionUUID->"493801ca-ea6f-4f13-839c-\
03aba0f8386d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"Range", "[", "100", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "way", " ", "to", " ", "randomize", " ", "a", " ", "list", 
    " ", "things"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111882730420823`*^9, 
  3.7111883918902073`*^9}},ExpressionUUID->"b7383045-8085-4b7e-b4d3-\
6050dd016641"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24", ",", "48", ",", "44", ",", "43", ",", "96", ",", "29", ",", "12", ",",
    "49", ",", "56", ",", "30", ",", "50", ",", "9", ",", "80", ",", "15", 
   ",", "62", ",", "36", ",", "27", ",", "4", ",", "52", ",", "85", ",", "92",
    ",", "76", ",", "28", ",", "79", ",", "37", ",", "1", ",", "39", ",", 
   "83", ",", "87", ",", "81", ",", "35", ",", "75", ",", "14", ",", "51", 
   ",", "61", ",", "34", ",", "18", ",", "98", ",", "84", ",", "2", ",", "82",
    ",", "64", ",", "86", ",", "71", ",", "54", ",", "53", ",", "74", ",", 
   "89", ",", "5", ",", "13", ",", "67", ",", "46", ",", "65", ",", "57", ",",
    "100", ",", "68", ",", "66", ",", "11", ",", "22", ",", "78", ",", "26", 
   ",", "25", ",", "91", ",", "17", ",", "20", ",", "10", ",", "40", ",", 
   "55", ",", "31", ",", "93", ",", "73", ",", "19", ",", "95", ",", "69", 
   ",", "63", ",", "77", ",", "70", ",", "72", ",", "38", ",", "8", ",", "7", 
   ",", "45", ",", "59", ",", "3", ",", "94", ",", "33", ",", "42", ",", "58",
    ",", "60", ",", "6", ",", "90", ",", "23", ",", "21", ",", "16", ",", 
   "99", ",", "32", ",", "41", ",", "97", ",", "88", ",", "47"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7111883946326427`*^9},ExpressionUUID->"3eaf9314-364a-4f22-bfe5-\
4aa67aaee479"]
}, Open  ]],

Cell["\<\
if you have forgotten what Range does, you could literally take out the code \
for Range[100] and run it independently, after which you will see clearly \
what RandomSample does. Breaking up complicated pieces of code in such a \
manner to understand the individual pieces is a skill that you will need when \
reading code in the wild.\
\>", "Text",
 CellChangeTimes->{{3.7111884057019453`*^9, 
  3.7111884971866355`*^9}},ExpressionUUID->"b20f8110-22ea-44be-80d4-\
35f498c7982a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<bread\>\"", ",", "\"\<butter\>\"", ",", "\"\<cheese\>\"", ",", 
     "\"\<milk\>\""}], "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Making", " ", "a", " ", "random", " ", "choice"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111885017178197`*^9, 
  3.7111885405338516`*^9}},ExpressionUUID->"15f5d775-0402-4ed0-9c84-\
f1347df136c7"],

Cell[BoxData["\<\"butter\"\>"], "Output",
 CellChangeTimes->{
  3.7111885413789635`*^9},ExpressionUUID->"18cb8eb4-211d-4605-8cfc-\
b9b39c199cd3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<bread\>\"", ",", "\"\<butter\>\"", ",", "\"\<cheese\>\"", ",", 
     "\"\<milk\>\""}], "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Making", " ", "a", " ", "random", " ", "choice"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7111885017178197`*^9, 
  3.7111885475243187`*^9}},ExpressionUUID->"09fe8772-26db-48bb-812b-\
9f0bb6709962"],

Cell[BoxData["\<\"bread\"\>"], "Output",
 CellChangeTimes->{
  3.7111885493152924`*^9},ExpressionUUID->"3b1f1c2e-4564-40f1-a8c8-\
fcc93b78f231"]
}, Open  ]],

Cell["\<\
We mostly get some random item every time we run RandomChoice on a list of \
items. \
\>", "Text",
 CellChangeTimes->{{3.7111885515672784`*^9, 3.711188582115655*^9}, {
  3.7111886488381577`*^9, 3.7111886547453475`*^9}, {3.711701964663443*^9, 
  3.7117019699811296`*^9}},ExpressionUUID->"2e81139b-cf26-475e-8497-\
002f239a25aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining our own FUNCTIONS", "Chapter",
 CellChangeTimes->{{3.7111880853962464`*^9, 3.7111880871545396`*^9}, {
  3.7117036872539864`*^9, 
  3.711703712083144*^9}},ExpressionUUID->"734f4b63-ed57-4ee7-b544-\
515491017a60"],

Cell["\<\
So far we have used the built-in WL functions to do most of our computation, \
for most well defined tasks there are built-in WL functions that perform them \
very efficiently but for some arbitrary task we might want to perform, there \
may be no built-in functions that do it so we end up having to define our own \
functions. Before you decide to write your functions, it might be wise to \
first of all check the documentation as what you are trying to do might \
already exist, to avoid reinventing the wheel.\
\>", "Text",
 CellChangeTimes->{{3.7117037157428246`*^9, 
  3.71170389490736*^9}},ExpressionUUID->"b1a37dc1-864f-4f68-9bf5-\
d233d8e476b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", " ", "=", " ", 
  RowBox[{"RandomInteger", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.711703905113762*^9, 3.7117039074576607`*^9}, {
  3.7117040248277063`*^9, 
  3.711704039228803*^9}},ExpressionUUID->"998cafb9-aef9-4634-bf3e-\
2f3b40ed3710"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.7117040406413794`*^9, 
  3.711704048111411*^9}},ExpressionUUID->"b8a7babb-bd22-407c-a944-\
3a3f93c4d566"]
}, Open  ]],

Cell["\<\
Above we assign x to a RandomInteger between 0 and 10 using the single equals \
sign, this what you might have seen in many other programming languages. But \
in WL we have another type of assignment\
\>", "Text",
 CellChangeTimes->{{3.7117039124712973`*^9, 3.7117039918129516`*^9}, {
  3.711704056474514*^9, 
  3.711704081268895*^9}},ExpressionUUID->"c2f453aa-5c50-4cc8-a122-\
41ad3aa63a15"],

Cell[BoxData[
 RowBox[{"y", " ", ":=", " ", 
  RowBox[{"RandomInteger", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.711703993618188*^9, 3.711704014902258*^9}, {
  3.711704088360149*^9, 
  3.711704093070253*^9}},ExpressionUUID->"3b0767a3-3ef6-425d-abfe-\
631b5a2d639e"],

Cell["\<\
The first one is called Immediate assignment while the second one is called \
delayed assignment. In the first one a RandomInteger is generated an \
Immediately assigned to a variable, this is like saving that number.\
\>", "Text",
 CellChangeTimes->{{3.711704106473357*^9, 
  3.7117041691703997`*^9}},ExpressionUUID->"3e82b080-495c-4543-83fe-\
af00d23ea35a"],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 CellChangeTimes->{
  3.7117041724554276`*^9},ExpressionUUID->"349e55b1-a1a5-4555-a965-\
baf2fe0b9f0b"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.7117041738856487`*^9},ExpressionUUID->"8a275284-f93c-4917-a4e9-\
689caa321b81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",
 CellChangeTimes->{
  3.71170417516896*^9},ExpressionUUID->"9c20f7db-5f56-48a1-b275-024e652f07f2"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.7117041759586763`*^9},ExpressionUUID->"c90e50b3-e56a-4af0-a124-\
6fdde2fabefe"]
}, Open  ]],

Cell["\<\
No matter how many times we ask for the value of x by executing it with our \
usual SHIFT + ENTER, we get the value that was generated the very first time.\
\>", "Text",
 CellChangeTimes->{{3.711704180374216*^9, 3.7117042326088543`*^9}, {
  3.7117042834077425`*^9, 
  3.71170429401212*^9}},ExpressionUUID->"dd4d693d-6a73-484c-b0f4-\
41e81a05e553"],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.711704297553813*^9},ExpressionUUID->"b15177ba-0737-444f-a772-\
30ba7a05e34d"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.711704298569442*^9},ExpressionUUID->"73d113e3-4784-4e51-90d3-\
b8b1759e68ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{
  3.711704300169473*^9},ExpressionUUID->"1a195af1-f427-4545-ba0e-\
b70ee510e36c"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.7117043010409393`*^9},ExpressionUUID->"08bda5c2-96dd-45c0-b9bc-\
c53d0497da11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["y"], "Input",
 CellChangeTimes->{{3.711704303012617*^9, 
  3.7117043061376023`*^9}},ExpressionUUID->"b85676e1-e56c-437f-9c89-\
fdd97dd719c0"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.711704307069619*^9},ExpressionUUID->"4a8340a4-644c-4753-983e-\
d3a948cf7b48"]
}, Open  ]],

Cell["\<\
In the second case when we first did a delayed assignment of y to a \
RandomInteger, we essentially put the computation of RandomInteger on hold. \
The delayed assignment essentially says do not compute until I explicitly \
request. So whenever we request a value for y we get a new value because we \
are re-evaluating RandomInteger each time.\
\>", "Text",
 CellChangeTimes->{{3.7117043123314886`*^9, 
  3.7117044412576866`*^9}},ExpressionUUID->"99535d2d-dd23-480c-a9b4-\
70da2323d0cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isEven", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"n", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "True", ",", 
    "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.711704482412839*^9, 3.7117045112884016`*^9}, {
  3.711704742693039*^9, 
  3.7117047506661577`*^9}},ExpressionUUID->"7b18fdde-5b61-432c-84da-\
82f46902f5d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.711704528377954*^9, 
  3.7117045315201645`*^9}},ExpressionUUID->"ff25dafa-3817-497a-ac75-\
90160e9f899c"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.7117045326974745`*^9},ExpressionUUID->"19043d65-4fb5-4571-bf94-\
89cad05923bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.7117045346479826`*^9, 
  3.7117045372458415`*^9}},ExpressionUUID->"f5ed6d15-31ae-4b00-921c-\
34519674bf41"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.7117045382988863`*^9},ExpressionUUID->"877e180a-cbbc-4caf-9bda-\
264d93d4c373"]
}, Open  ]],

Cell["\<\
We define a function named isEven which receives a number and checks if its \
even, and returns True or False depending. The parameter named n is assigned \
whatever we pass into this function when we call it, which is further passed \
to the body of the function where further computation takes place, in this \
case a single If function.
Why do we put a single _ after the n? The underscore is called a pattern \
expression in WL. A pattern is an expression which matches another \
expression. In this case we are saying we want to match any single expression \
available in WL. the n is just a name for this pattern which we use to \
remember the pattern inside the body of the function expression.\
\>", "Text",
 CellChangeTimes->{{3.7117046063382015`*^9, 3.7117046230299273`*^9}, {
  3.711704653162109*^9, 3.7117048189798965`*^9}, {3.711706061927354*^9, 
  3.7117062581027355`*^9}},ExpressionUUID->"4365fbe4-7d16-48bf-bcd5-\
d751a139bcb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isOdd", "[", "number_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"number", ",", "2"}], "]"}], "\[Equal]", "0"}], "]"}], ",", 
    " ", "True", ",", " ", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7117062697981033`*^9, 
  3.7117063428785653`*^9}},ExpressionUUID->"41d4c7d3-42eb-4960-a650-\
d2b59d3eeded"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isOdd", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.711706352650928*^9, 
  3.7117063558621373`*^9}},ExpressionUUID->"21d77b46-58b9-4d81-80a4-\
4cf6a89bf8c5"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.7117063568974795`*^9},ExpressionUUID->"eb0b484e-eda3-43bd-8477-\
ba97e8c66e35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isOdd", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.7117063592450204`*^9, 
  3.7117063640502377`*^9}},ExpressionUUID->"a8024081-98f8-46ff-92a2-\
44f999840e0e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.711706365417697*^9},ExpressionUUID->"789be891-b8e6-452a-a3f1-\
aa7cf188c7fd"]
}, Open  ]],

Cell["\<\
As we can see we are not limited to single letters like n for our parameter \
names, we can name our parameters with names like number_ to give the user of \
the function an idea of the parameter type.\
\>", "Text",
 CellChangeTimes->{{3.7117063770156326`*^9, 3.711706417063799*^9}, {
  3.711706517939158*^9, 
  3.711706606748166*^9}},ExpressionUUID->"bcfac329-0930-42d4-8c0a-\
b84941db1daa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isEven", "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.7117066150321083`*^9, 
  3.71170661923053*^9}},ExpressionUUID->"f1818e01-e044-4a2f-aede-\
e7a4b0d757cd"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{"t", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", "True", ",", 
   "False"}], "]"}]], "Output",
 CellChangeTimes->{
  3.7117066206773434`*^9},ExpressionUUID->"4edb99a9-1857-430a-8152-\
b85e4e5d224f"]
}, Open  ]],

Cell["\<\
We see that is used the symbol t inside the function and since I did not \
define the function to handle arbitrary symbols, the call fails and returns \
the body of the function. A nice way to tell the user about what kind of \
arguments a function takes is to include the head type of the parameter after \
the underscore\
\>", "Text",
 CellChangeTimes->{{3.7117066326764574`*^9, 3.7117066924300165`*^9}, {
  3.711707033553089*^9, 3.7117070566370687`*^9}, {3.7117071343537726`*^9, 
  3.711707206026792*^9}},ExpressionUUID->"3fcd43b3-0845-4ae6-892a-\
d1b4a6fda166"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isOdd", "[", "number_Integer", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"number", ",", "2"}], "]"}], "\[Equal]", "0"}], "]"}], ",", 
    " ", "True", ",", " ", "False"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7117070618725586`*^9, 
  3.7117070857800903`*^9}},ExpressionUUID->"a1f99efe-ebdb-4716-a014-\
fe8f92f07f66"],

Cell["We can also put conditions on the arguments to functions", "Text",
 CellChangeTimes->{{3.7124705344605646`*^9, 
  3.7124705630539217`*^9}},ExpressionUUID->"41062c3d-1f6d-497e-baab-\
00d524022ecb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial1", "[", 
   RowBox[{"n_", "/;", 
    RowBox[{"n", ">", "0"}]}], "]"}], ":=", 
  RowBox[{"n", "!"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "the", " ", "factorial", " ", "of", " ", "only", " ", 
    "positive", " ", "integers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712470566877946*^9, 
  3.7124706189194326`*^9}},ExpressionUUID->"735f6d19-b9a1-4cf5-b822-\
5240d8e2ee59"],

Cell["\<\
The condition the n must be greater than 0 is given after the slash-colon /; \
\>", "Text",
 CellChangeTimes->{{3.7124706681218834`*^9, 
  3.7124707068529387`*^9}},ExpressionUUID->"08f855f1-a947-4b50-ad5a-\
c59ca6e61e51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factorial1", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.712470622150983*^9, 
  3.7124706276372757`*^9}},ExpressionUUID->"cbf452a3-62ca-4e3b-9fb8-\
2d965a13b0f0"],

Cell[BoxData["720"], "Output",
 CellChangeTimes->{
  3.7124706289533067`*^9},ExpressionUUID->"2174a939-6f1f-4eeb-9579-\
0a33ee8d5411"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial1", "[", 
   RowBox[{"-", "5"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"doesn", "'"}], "t", " ", "work", " ", "for", " ", "negative", 
    " ", "numbers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712470631855814*^9, 
  3.7124706622423573`*^9}},ExpressionUUID->"55b0f276-5f77-4e9c-85ec-\
0fbd5a9562aa"],

Cell[BoxData[
 RowBox[{"factorial1", "[", 
  RowBox[{"-", "5"}], "]"}]], "Output",
 CellChangeTimes->{
  3.712470639111128*^9},ExpressionUUID->"b090ddc0-f3b6-4ccb-9d5e-\
35f44230c147"]
}, Open  ]],

Cell["We can still define functions with default values", "Text",
 CellChangeTimes->{{3.7124730798097377`*^9, 3.712473091075449*^9}, {
  3.712473139784396*^9, 
  3.7124731570471067`*^9}},ExpressionUUID->"72f889b9-0ba7-40e9-a439-\
c2d348d85fe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fibonacci", "[", "0", "]"}], " ", "=", " ", "0"}], ";", " ", 
  RowBox[{
   RowBox[{"fibonacci", "[", "1", "]"}], "=", "1"}], ";", " ", 
  RowBox[{
   RowBox[{"fibonacci", "[", 
    RowBox[{"n_:", "8"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"fibonacci", "[", "n", "]"}], "=", 
    RowBox[{
     RowBox[{"fibonacci", "[", 
      RowBox[{"n", "-", "1"}], "]"}], "+", 
     RowBox[{"fibonacci", "[", 
      RowBox[{"n", "-", "2"}], "]"}], " "}]}]}]}]], "Input",
 CellChangeTimes->{{3.712473191737424*^9, 3.712473314078923*^9}, {
  3.71247335578425*^9, 3.7124733713482695`*^9}, {3.712473931147464*^9, 
  3.7124739356435843`*^9}, {3.712474028764411*^9, 
  3.7124740301441584`*^9}},ExpressionUUID->"aeefbbda-9e22-4f8b-b398-\
b46b1ed127a6"],

Cell["\<\
We can call this function without providing arguments, not that it is \
necessary I just wanted a demonstration of this facility.\
\>", "Text",
 CellChangeTimes->{{3.712473382615078*^9, 3.71247342964342*^9}, {
  3.7124734614759827`*^9, 3.7124734657030334`*^9}, {3.712473563249838*^9, 
  3.712473584966172*^9}, {3.712473673940612*^9, 
  3.712473693560487*^9}},ExpressionUUID->"49fe866a-21c8-457d-863a-\
df029dba0f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fibonacci", "[", "]"}]], "Input",
 CellChangeTimes->{{3.712473695013629*^9, 
  3.7124736984008617`*^9}},ExpressionUUID->"7cf80978-4b22-4165-a6eb-\
6527f90ea754"],

Cell[BoxData["21"], "Output",
 CellChangeTimes->{3.712473699572132*^9, 3.7124739454001007`*^9, 
  3.712474037721351*^9, 
  3.712474070983218*^9},ExpressionUUID->"cd8f6950-ee0f-42c9-bb0d-\
f5c8e0f7b61c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fibonacci", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7124737053082085`*^9, 
  3.7124737130709724`*^9}},ExpressionUUID->"04374b9d-2a00-409e-81a2-\
ec0d79bded11"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.7124737140161285`*^9, 3.71247394907539*^9, 
  3.7124740784778223`*^9},ExpressionUUID->"10fe6257-ef93-49b7-9252-\
29f4828a8572"]
}, Open  ]],

Cell["\<\
But as usual there is a better way to do this things with built-in functions, \
always use the  documentation to check for a solution to what you want to do, \
you might just find it. It is a convention to use lowercase letters for \
function names that we define ourselves\
\>", "Text",
 CellChangeTimes->{{3.7124737248979883`*^9, 
  3.712473893889742*^9}},ExpressionUUID->"275a08de-f7e6-4a86-8b57-\
d050af40eb13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fibonacci", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.7124738954204135`*^9, 
  3.7124739002322288`*^9}},ExpressionUUID->"ad13f4b2-7e99-431b-8ac3-\
ad1869d81287"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{
  3.71247390127133*^9},ExpressionUUID->"4ac87a76-a531-4ffc-878e-04d7eacade6f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads!", "Chapter",
 CellChangeTimes->{{3.7117072252004156`*^9, 
  3.7117072301916656`*^9}},ExpressionUUID->"74584ab2-0b3a-4602-a241-\
9f089ab1e074"],

Cell["\<\
Expression in the Wolfram Language has a head and we can get the name of the \
head of an expression using Head.\
\>", "Text",
 CellChangeTimes->{{3.711707236917944*^9, 
  3.711707283408104*^9}},ExpressionUUID->"1f54280f-60af-4782-a0e6-\
7ce41bd1d0af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "x", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "remember", " ", "the", " ", "variable", " ", "x", " ", "we", " ", 
    "defined", " ", "sometime", " ", "ago"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711707285079559*^9, 
  3.7117073138411794`*^9}},ExpressionUUID->"57e00963-6324-49a4-82a5-\
b7912a91d244"],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{
  3.711707288425299*^9},ExpressionUUID->"47dd9c35-1f53-4f2b-a928-\
4f747dab9a23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", "t", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "has", " ", "not", " ", "been", " ", "assigned", " ", "anything", " ", 
    "yet", " ", "and", " ", "so", " ", "its", " ", "just", " ", "a", " ", 
    "symbol"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7117073179646006`*^9, 
  3.7117073544245977`*^9}},ExpressionUUID->"b28658ec-431d-43aa-9ade-\
ee36e9003431"],

Cell[BoxData["Symbol"], "Output",
 CellChangeTimes->{
  3.7117073231305385`*^9},ExpressionUUID->"e94894c1-d600-42f9-a6b7-\
c099ce14a915"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{"{", "}"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "curly", " ", "brace", " ", "has", " ", "head", " ", "list"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711707360212712*^9, 
  3.711707394831873*^9}},ExpressionUUID->"d0e99d9e-5191-4879-bed9-\
85d7dac60315"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{
  3.711707399747347*^9},ExpressionUUID->"c8122b5d-d7bc-40d3-acaf-\
7370ef78b1ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "\"\<Apples\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.711707602193471*^9, 
  3.7117076219815536`*^9}},ExpressionUUID->"0cca396c-5ac2-4a30-902d-\
4e5816fe1229"],

Cell[BoxData["String"], "Output",
 CellChangeTimes->{
  3.711707622762191*^9},ExpressionUUID->"727390dc-203d-4f91-bfa8-\
c62781a72651"]
}, Open  ]],

Cell["\<\
Internally the Wolfram Language converts the curly brace {} into something \
with head List. \
\>", "Text",
 CellChangeTimes->{{3.7117074154342833`*^9, 3.711707493580597*^9}, 
   3.711707707413841*^9},ExpressionUUID->"2d0e8492-7309-4345-b672-\
7050e7206d10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.711707527614491*^9, 
  3.7117075555741663`*^9}},ExpressionUUID->"61ebe47a-e8d4-47c4-a0f0-\
f42511b2d871"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{
  3.7117075572913065`*^9},ExpressionUUID->"458282af-7f97-49b0-9278-\
407b4903d100"]
}, Open  ]],

Cell["\<\
Sometimes we want to define a local constant inside a function. \
\>", "Text",
 CellChangeTimes->{{3.7117078599668627`*^9, 3.7117078876450996`*^9}, {
  3.7117081330137577`*^9, 
  3.711708150164044*^9}},ExpressionUUID->"df883bad-44e2-4cd5-b3ed-\
1880166af6cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"byThousand", "[", "value_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"multiplier", " ", "=", " ", "1000"}], "}"}], ",", " ", 
    RowBox[{"value", " ", "*", " ", "multiplier"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.711707897382895*^9, 
  3.711707978122472*^9}},ExpressionUUID->"5fe3fd59-85c0-42cf-95d6-\
0d7cb472771e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"byThousand", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.711707985138764*^9, 
  3.711707987832136*^9}},ExpressionUUID->"5ec805cc-efe2-4e24-946e-\
12263d569a2b"],

Cell[BoxData["10000"], "Output",
 CellChangeTimes->{
  3.711707988686403*^9},ExpressionUUID->"45afa5ca-019b-43f8-a662-\
70a49a6c9f56"]
}, Open  ]],

Cell["\<\
Note that With is just another built-in function and can be used on its own \
without being wrapped inside a function.\
\>", "Text",
 CellChangeTimes->{{3.711708180928665*^9, 
  3.7117082199128437`*^9}},ExpressionUUID->"c6f1ee27-8df5-4603-a5b4-\
f03791c66c33"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gcd", "[", 
   RowBox[{"m0_", ",", "n0_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m", "=", "m0"}], ",", 
      RowBox[{"n", "=", "n0"}]}], "}"}], ",", 
    RowBox[{"(*", " ", 
     RowBox[{
     "We", " ", "capture", " ", "the", " ", "arguments", " ", "and", " ", 
      "assign", " ", "them", " ", "to", " ", "variables", " ", "m", " ", 
      "and", " ", "n"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"n", "\[NotEqual]", "0"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"m", ",", "n"}], "}"}], "=", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{"Mod", "[", 
           RowBox[{"m", ",", "n"}], "]"}]}], "}"}]}]}], "]"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "In", " ", "this", " ", "line", " ", "we", " ", "do", " ", "multiple", 
       " ", "simultaneous", " ", "assignment"}], " ", "*)"}], 
     "\[IndentingNewLine]", "m"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7117083786023035`*^9, 3.711708380431182*^9}, {
  3.711800398514716*^9, 3.7118004472016068`*^9}, {3.7118005863960743`*^9, 
  3.711800619438553*^9}},ExpressionUUID->"a9b02cdf-6315-47f9-a38d-\
8fd9671d3d52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gcd", "[", 
  RowBox[{"18", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.7117083832614703`*^9, 
  3.711708389099694*^9}},ExpressionUUID->"4bf79cb0-077d-4e28-8bf9-\
5a569d0b4eba"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.711708389905264*^9},ExpressionUUID->"146a0160-bbb9-4a56-b527-\
4763b914dd72"]
}, Open  ]],

Cell["\<\
In this case we use Module to define local variables inside a function gcd \
function, gcd stands for greatest common divisor. We did not use With because \
during the computation we change the values of m and n, that is why we need a \
variable rather than a constant. As you gain more experience with WL you will \
know when its appropriate to use With or Module.\
\>", "Text",
 CellChangeTimes->{{3.7117083954177403`*^9, 3.711708561452038*^9}, {
   3.7117994804407873`*^9, 3.7117994975864964`*^9}, 3.71179953771663*^9, 
   3.711799601911755*^9},ExpressionUUID->"506f568d-ea8a-45b3-baa7-\
b9133b1440cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pure functions", "Chapter",
 CellChangeTimes->{{3.71179954295935*^9, 
  3.7117995472322655`*^9}},ExpressionUUID->"53090ffc-4a41-4a7a-8dff-\
9c8bb5d3fc0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"#", "+", "2"}], "&"}]], "Input",
 CellChangeTimes->{{3.711799606583487*^9, 
  3.7117996310393944`*^9}},ExpressionUUID->"85594803-3edd-4f15-8e32-\
d6cccecdc2f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"#1", "+", "2"}], "&"}]], "Output",
 CellChangeTimes->{{3.711799622679415*^9, 
  3.711799631977984*^9}},ExpressionUUID->"3cd25215-0d5f-4ead-9e2c-\
cfa969bf003a"]
}, Open  ]],

Cell["\<\
Above is the definition of a simple pure function. Pure functions are \
sometimes called anonymous functions because we do not need a name when we \
are defining them. The # is called a slot variable, this is the variable that \
will be latter assigned a value when we call the function. the & indicates \
the end of the function. When we evaluate a pure function all that happens is \
that it just returns the entire definition on the output line with the slot \
variable being given a number. \
\>", "Text",
 CellChangeTimes->{{3.7117996387626505`*^9, 
  3.71179985922754*^9}},ExpressionUUID->"4a333716-4fd5-468e-9302-\
2f6315f46164"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"#1", " ", "+", " ", "#2"}], ")"}], "/", "10"}], "&"}]], "Input",
 CellChangeTimes->{{3.7117998640753813`*^9, 3.71179987916284*^9}, {
  3.711800162642518*^9, 
  3.7118002442262316`*^9}},ExpressionUUID->"3b17a43a-a231-4aff-8537-\
d46a94d787ff"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"#1", "+", "#2"}], "10"], "&"}]], "Output",
 CellChangeTimes->{
  3.7117998839079113`*^9, 3.7118001667883277`*^9, {3.71180020035133*^9, 
   3.711800245708099*^9}},ExpressionUUID->"f9054289-1c3b-4b27-b663-\
5dd34ac8e604"]
}, Open  ]],

Cell["\<\
We can also have multiple arguments or parameters to a pure function, each \
parameter being replaced by the appropriate slot number.\
\>", "Text",
 CellChangeTimes->{{3.711799888697095*^9, 3.711799950433712*^9}, 
   3.711800016129178*^9},ExpressionUUID->"1a71b002-45a7-4134-a591-\
009b26660366"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calling functions", "Chapter",
 CellChangeTimes->{{3.711800646393447*^9, 
  3.7118006747918034`*^9}},ExpressionUUID->"3263a6bb-008a-4e28-b991-\
2061b0dab59f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", " ", "+", " ", "2"}], "&"}], "[", "10", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Supply", " ", "a", " ", "single", " ", "argument", " ", "to", " ", "a", 
    " ", "pure", " ", "function"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711800680771531*^9, 3.711800692612086*^9}, {
  3.711800737778103*^9, 
  3.711800779680562*^9}},ExpressionUUID->"485cfd84-1db1-4945-aec3-\
da01992615fd"],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{
  3.711800695020691*^9},ExpressionUUID->"eea445e6-c5cd-4346-89a9-\
fb1af8345d3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#1", " ", "*", " ", "#2"}], ")"}], "/", "#3"}], "&"}], "[", 
   RowBox[{"2", ",", "3", ",", "5"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Multiple", " ", "arguments"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118006971560626`*^9, 3.7118007275657983`*^9}, {
  3.711800828832494*^9, 
  3.71180083658574*^9}},ExpressionUUID->"bf80e959-3b34-47b5-bb0c-\
a79e4e80555f"],

Cell[BoxData[
 FractionBox["6", "5"]], "Output",
 CellChangeTimes->{
  3.711800728589616*^9},ExpressionUUID->"f92f8689-b94e-4942-9961-\
0cc352ad785e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", " ", "*", " ", "#2"}], ")"}], "/", "#3"}], "&"}], "[", 
    RowBox[{"2", ",", "3", ",", "5"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Call", " ", "N", " ", "the", " ", "regular", " ", "way"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118006971560626`*^9, 3.7118007275657983`*^9}, {
  3.711800785990796*^9, 
  3.711800853513425*^9}},ExpressionUUID->"01154ee3-a7d7-49f3-a216-\
b19df811e4f1"],

Cell[BoxData["1.2`"], "Output",
 CellChangeTimes->{{3.7118007945438185`*^9, 
  3.7118008213988347`*^9}},ExpressionUUID->"4260e090-e619-48b5-9ef0-\
1c4f52b812e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"32234", " ", "/", " ", "45"}], "//", "N", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Double", " ", "forward", " ", "slash", " ", "calls", " ", "a", " ", 
    "function", " ", "as", " ", "an", " ", "afterthought"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.71180086304105*^9, 
  3.711800914366066*^9}},ExpressionUUID->"5afaf0e2-2fae-4724-a71c-\
c5527bdead29"],

Cell[BoxData["716.3111111111111`"], "Output",
 CellChangeTimes->{
  3.7118008756702633`*^9},ExpressionUUID->"ac9122d4-261a-423a-8b4b-\
6fdb0d58e5ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", "7", "]"}]], "Input",
 CellChangeTimes->{{3.711800921518545*^9, 
  3.7118009330094357`*^9}},ExpressionUUID->"70b83350-6307-4838-b5f7-\
a400ee4ff75e"],

Cell[BoxData[
 SqrtBox["7"]], "Output",
 CellChangeTimes->{{3.7118009279208956`*^9, 
  3.711800935992555*^9}},ExpressionUUID->"0222900e-c819-4eb8-a181-\
79bfd1624d02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Sqrt", "[", "7", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Another", " ", "way", " ", "to", " ", "call", " ", "the", " ", "N", " ", 
    "funtion"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118009418145347`*^9, 
  3.711801005006417*^9}},ExpressionUUID->"289ae783-a788-4e1a-8c1d-\
c0826d70bb07"],

Cell[BoxData["2.6457513110645907`"], "Output",
 CellChangeTimes->{3.711800963214501*^9, 
  3.7118010070426073`*^9},ExpressionUUID->"d2560a30-2e74-4bec-9df9-\
2268fdde3758"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Recursion", "Chapter",
 CellChangeTimes->{{3.711899615846634*^9, 
  3.7118996175027475`*^9}},ExpressionUUID->"4d6de9db-b5e6-463d-823f-\
e0369d740068"],

Cell["\<\
It is a programming technique where a function calls itself. There are \
certain things to keep in mind when designing a recursive solution to a \
problem in programming. 
1. You must have 1 or more base cases so as to prevent infinite recursion.
2. Reduce the problem to simpler versions of the same problem.\
\>", "Text",
 CellChangeTimes->{{3.7118996417511296`*^9, 3.7118997204242773`*^9}, {
  3.711899763704565*^9, 
  3.7118997973582096`*^9}},ExpressionUUID->"04370413-2122-4d12-ae24-\
378a2d30215e"],

Cell["Recursive multiplication example", "Text",
 CellChangeTimes->{{3.711899892886423*^9, 
  3.711899899443983*^9}},ExpressionUUID->"d1bab50e-f4e9-4171-bfd2-\
08dc62b57ee9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"multiply", "[", 
     RowBox[{"a_", ",", "1"}], "]"}], ":=", "a"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Base", " ", "case"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", " ", 
  RowBox[{"a", "+", 
   RowBox[{"mult", "[", 
    RowBox[{"a", ",", 
     RowBox[{"b", "-", "1"}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.711899845300109*^9, 
  3.711899881372652*^9}},ExpressionUUID->"e17a0d16-a7bc-4acc-9cb7-\
06f1571a3024"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"6", ",", "1"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "base", " ", "case"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7118999069076333`*^9, 
  3.7118999259367943`*^9}},ExpressionUUID->"ba537d6e-899a-43e2-af09-\
24bc151edf82"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.71189992692117*^9},ExpressionUUID->"d837a5e3-2207-477e-a220-2fb5ffebfe9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiply", "[", 
   RowBox[{"9", ",", "7"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "main", " ", "recursion"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711899928874231*^9, 
  3.7118999487465296`*^9}},ExpressionUUID->"7c5376d2-1db7-4774-8b64-\
2c9bc0f77d1e"],

Cell[BoxData["63"], "Output",
 CellChangeTimes->{
  3.7118999496740055`*^9},ExpressionUUID->"be0dc52a-9ddf-4ba7-872a-\
367ff65ddc4e"]
}, Open  ]],

Cell["\<\
There is a much faster way to multiply in WL using the built-in Times \
function, the above program is only to show the concept of recursion\
\>", "Text",
 CellChangeTimes->{{3.7119000696457233`*^9, 
  3.7119001298059425`*^9}},ExpressionUUID->"ed4aee34-6519-436a-83fc-\
71fb05a6e534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Times", "[", 
  RowBox[{"9", ",", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.711900107929778*^9, 
  3.711900113896727*^9}},ExpressionUUID->"d5aaaad5-5fce-49bd-8a83-\
c1357ad73c48"],

Cell[BoxData["63"], "Output",
 CellChangeTimes->{
  3.71190011461547*^9},ExpressionUUID->"3dd6097d-194b-4383-aa79-1ca4dc59f42e"]
}, Open  ]],

Cell["\<\
Find the FACTORIAL recursively. The definition of n! = n *(n-1) * (n-2) * \
(n-3) * ... * 1\
\>", "Text",
 CellChangeTimes->{{3.7118999888023624`*^9, 3.7119000637076683`*^9}, {
  3.711900161999115*^9, 
  3.711900166552828*^9}},ExpressionUUID->"266d3831-40fa-4e60-954d-\
2034d0477cda"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"factorial", "[", "1", "]"}], " ", "=", " ", "1"}], " ", ";", 
  RowBox[{"(*", " ", 
   RowBox[{"Base", " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"factorial", "[", "n_", "]"}], ":=", 
   RowBox[{
    RowBox[{"factorial", "[", "n", "]"}], "=", 
    RowBox[{"n", " ", 
     RowBox[{"factorial", "[", 
      RowBox[{"n", "-", "1"}], "]"}], " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Recursive", " ", "solution", " ", "with", " ", 
        RowBox[{"factorial", "[", "n", "]"}], " ", "spliced", " ", "in", " ", 
        "to", " ", "speed", " ", "up", " ", "computation"}], ",", " ", 
       RowBox[{
       "its", " ", "a", " ", "technique", " ", "called", " ", 
        "memoization"}]}], " ", "*)"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.7119001729541807`*^9, 
  3.711900337600848*^9}},ExpressionUUID->"d3fd54be-eadc-4c6d-8396-\
08d95cccc660"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factorial", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.711900343362749*^9, 
  3.711900356306579*^9}},ExpressionUUID->"27443589-c8d3-4f69-88da-\
f21a2c984236"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{{3.711900349979351*^9, 
  3.7119003577616787`*^9}},ExpressionUUID->"821d010f-698f-43fb-91c5-\
4ae7b1f5c2fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"10", "!"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Using", " ", "the", " ", "more", " ", "optimal", " ", "built"}], 
    "-", "in"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.711900362548913*^9, 
  3.711900381558176*^9}},ExpressionUUID->"726fdce1-d06e-48e9-8efb-\
09f051c1d3d4"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{
  3.711900383183196*^9},ExpressionUUID->"6fa793cf-4e01-4d6e-ae65-\
f0920a5cccdd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pairing things", "Chapter",
 CellChangeTimes->{{3.712292199553811*^9, 
  3.7122922445065713`*^9}},ExpressionUUID->"d7b0ce69-994e-4dff-a187-\
ed84879cbf05"],

Cell["\<\
If we are given lists of items that are related in some way like a list of \
student names and associated scores:\
\>", "Text",
 CellChangeTimes->{{3.7122922502714386`*^9, 3.712292322376396*^9}, 
   3.7122924211460967`*^9},ExpressionUUID->"1cd37c6a-a593-4aca-8642-\
19194221affa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"names", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Vestal\>\"", ",", "\"\<Denis\>\"", ",", "\"\<William\>\"", ",", 
     "\"\<Joe\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scores", " ", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A+\>\"", ",", "\"\<B\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\""}], 
    "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.712292324917313*^9, 
  3.712292414739787*^9}},ExpressionUUID->"055b099c-6f13-4448-a13d-\
2f5dee5f0307"],

Cell["\<\
With each name in the names List associated with a corresponding score in the \
scores list. For example \
\[OpenCurlyDoubleQuote]Vestal\[CloseCurlyDoubleQuote] had an \
\[OpenCurlyDoubleQuote]A+\[OpenCurlyDoubleQuote], because the name and the \
score are in the same position in both lists.
One way of pairing these lists is by Transposing them:\
\>", "Text",
 CellChangeTimes->{{3.712292430017031*^9, 
  3.712292583564929*^9}},ExpressionUUID->"cf34feff-de8b-47b4-8d97-\
0a2d9afd60ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{"names", ",", "scores"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 
  3.712292619948574*^9}},ExpressionUUID->"7cb151f3-6709-4017-a55f-\
cf66538587e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Vestal\"\>", ",", "\<\"A+\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Denis\"\>", ",", "\<\"B\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"William\"\>", ",", "\<\"B\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Joe\"\>", ",", "\<\"C\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7122925951704674`*^9, 
  3.712292621297919*^9}},ExpressionUUID->"26fd51d9-6de8-46ff-8912-\
a1f6cbbc7fd9"]
}, Open  ]],

Cell["\<\
We can query this mini data structure using the usual indexing operations\
\>", "Text",
 CellChangeTimes->{{3.712292649784049*^9, 
  3.7122926661601267`*^9}},ExpressionUUID->"c7ea44f5-6ab6-4f66-a453-\
901eef5dd713"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"names", ",", "scores"}], "}"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "value", " ", "for", " ", "Denis"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 3.712292619948574*^9}, {
  3.7122926801981144`*^9, 
  3.712292720097783*^9}},ExpressionUUID->"856aa528-e8cb-42b7-866a-\
343bc3bef0f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Denis\"\>", ",", "\<\"B\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7122927057049007`*^9},ExpressionUUID->"2c3b3e23-16b5-463d-9a63-\
6c536970edf6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"names", ",", "scores"}], "}"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"4", ",", "2"}], "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", 
    RowBox[{"Joe", "'"}], "s", " ", "Score"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122925863052406`*^9, 3.712292619948574*^9}, {
  3.7122926801981144`*^9, 
  3.712292756781005*^9}},ExpressionUUID->"550263a0-4fd8-4357-9f54-\
c0188c8dce24"],

Cell[BoxData["\<\"C\"\>"], "Output",
 CellChangeTimes->{
  3.7122927410320435`*^9},ExpressionUUID->"b1db83d6-d42a-4184-a759-\
3dfea3341482"]
}, Open  ]],

Cell["\<\
There is a better way to handle these kinds of key -> value pairs in WL, its \
called associations.\
\>", "Text",
 CellChangeTimes->{{3.7122927603481474`*^9, 
  3.712292799809573*^9}},ExpressionUUID->"adb6266e-bd93-4ff8-9729-\
4b2dad22a524"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grades", " ", "=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Vestal\>\"", "\[Rule]", "\"\<A+\>\""}], ",", 
    RowBox[{"\"\<Denis\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
    RowBox[{"\"\<William\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
    RowBox[{"\"\<Joe\>\"", "\[Rule]", "\"\<C\>\""}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.712292994570183*^9, 
  3.7122930788087425`*^9}},ExpressionUUID->"6084c523-ddbf-4fcf-bded-\
615f276de2ff"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"William\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.712293082989256*^9},ExpressionUUID->"8e7899ca-41a2-4d6e-a461-\
5f97e0458a17"]
}, Open  ]],

Cell["\<\
We type a \[OpenCurlyDoubleQuote]less than\[CloseCurlyDoubleQuote] < followed \
by a vertical bar | to start the association. We separate the key value pairs \
with a  dash - followed by a greater than > on the keyboard. This is how we \
create the rule notation -> which we will be see a lot later. The names are \
they Keys while the scores are the Values.\
\>", "Text",
 CellChangeTimes->{{3.7122930930306187`*^9, 
  3.712293247387491*^9}},ExpressionUUID->"f1343662-7f04-4674-bbef-\
a20a5c6db8f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Vestal\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", 
    RowBox[{"Vestal", "'"}], "s", " ", "grade"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293361963917*^9, 
  3.7122933882644253`*^9}},ExpressionUUID->"ea89f89d-ccbd-4cd0-be12-\
002c7d9500ee"],

Cell[BoxData["\<\"A+\"\>"], "Output",
 CellChangeTimes->{
  3.7122933696216106`*^9},ExpressionUUID->"3c3b4cbe-d993-48da-9cae-\
94d94494d688"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Felix\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "If", " ", "we", " ", "try", " ", "to", " ", "get", " ", "a", " ", 
    "missing", " ", "key", " ", "we", " ", "get", " ", "a", " ", 
    RowBox[{"Missing", "[", "]"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122933908341675`*^9, 
  3.7122934321175823`*^9}},ExpressionUUID->"323ea79e-9e1d-4b97-8a4f-\
8737cf098d3a"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"KeyAbsent\"\>", ",", "\<\"Felix\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.7122934000427675`*^9, 
  3.7122934333938684`*^9},ExpressionUUID->"71834551-51e3-49d5-ac04-\
8121a4f01297"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"grades", "[", "\"\<Felix\>\"", "]"}], " ", "=", " ", "\"\<A\>\"", 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "a", " ", "grade", " ", "for", " ", "Felix"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293467855733*^9, 
  3.712293507699806*^9}},ExpressionUUID->"863f9c49-60ff-4d42-923a-\
1280caa069f7"],

Cell[BoxData["\<\"A\"\>"], "Output",
 CellChangeTimes->{
  3.7122934835676303`*^9},ExpressionUUID->"8ed3b4b5-95e4-4cea-924d-\
5c73ebdb9c18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["grades"], "Input",
 CellChangeTimes->{{3.7122934852837887`*^9, 
  3.71229348616733*^9}},ExpressionUUID->"dd3e728d-e420-472a-a560-\
4ffcbb24ccb8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"William\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"Felix\"\>", "\[Rule]", "\<\"A\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7122934876509886`*^9},ExpressionUUID->"5f56b064-6498-4205-9aa5-\
b7fb4b78e30c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"KeyDrop", "[", 
   RowBox[{"grades", ",", "\"\<William\>\""}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Delete", " ", "a", " ", "key"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712293693864764*^9, 
  3.7122937175286064`*^9}},ExpressionUUID->"ba5a2b84-06c0-4966-bd6c-\
0dad6159a985"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Vestal\"\>", "\[Rule]", "\<\"A+\"\>"}], ",", 
   RowBox[{"\<\"Denis\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"Joe\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"Felix\"\>", "\[Rule]", "\<\"A\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.71229370824792*^9},ExpressionUUID->"ddf39b29-090e-4479-a7c0-88a791d05003"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Keys", "[", "grades", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "Keys"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122993709977527`*^9, 
  3.712299392028577*^9}},ExpressionUUID->"6252db37-a50a-43a8-bd04-\
c2d8213d7289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Vestal\"\>", ",", "\<\"Denis\"\>", ",", "\<\"William\"\>", 
   ",", "\<\"Joe\"\>", ",", "\<\"Felix\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712299377976013*^9},ExpressionUUID->"6917c342-c730-4cc3-a777-\
4e558c16004f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Values", "[", "grades", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Get", " ", "the", " ", "Values"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7122993957634916`*^9, 
  3.7122994104434958`*^9}},ExpressionUUID->"3446041e-99f4-478b-bd92-\
e54af59a9dfd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A+\"\>", ",", "\<\"B\"\>", ",", "\<\"B\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"A\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7122994112101235`*^9},ExpressionUUID->"ef75468d-c0ee-4479-8cf2-\
82c768726af3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Searching for stuff", "Chapter",
 CellChangeTimes->{{3.712465879803797*^9, 
  3.712465883189028*^9}},ExpressionUUID->"109a9c98-fe69-4e87-ae5a-\
d1f8a2e7f336"],

Cell["\<\
In many other programming languages you might be required to implement your \
own search algorithms, but because WL has an enormous stack of extremely \
efficient algorithms for doing most things you will want to do there is no \
need to implement these algorithms yourself, you can free yourself to solve \
higher level computational problems rather than trying to optimize some \
algorithms for which far faster implementations have been done by experts. \
Like they say lets not re-invent the wheel. Many purist will argue that \
teaching these \[OpenCurlyDoubleQuote]fundamental\[CloseCurlyDoubleQuote] \
methods are important but in my view this misses the point of using a very \
high level knowledge based language like WL, there are more things in the \
life to bother about. If you are still interested in that kind of stuff you \
will also find implementing your version in WL very efficient.\
\>", "Text",
 CellChangeTimes->{{3.7124658946303062`*^9, 
  3.712466241168831*^9}},ExpressionUUID->"a28ebfd2-d05d-4266-ad5c-\
36e0ad348353"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "20", "]"}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 
  3.712466261508563*^9}},ExpressionUUID->"70f5a2b0-7e86-40be-bf4e-\
6c44b9a80fa6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15",
    ",", "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712466264242068*^9},ExpressionUUID->"ed1b6b0e-d2ac-4910-bcd0-\
82755a95ff0d"]
}, Open  ]],

Cell["Let us select all the even items from this list", "Text",
 CellChangeTimes->{{3.712466267453743*^9, 
  3.712466282739826*^9}},ExpressionUUID->"6581a016-b8ff-43c4-bb19-\
bf05b02eafb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], ",", "EvenQ"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Select", " ", "items", " ", "from", " ", "a", " ", "list", " ", "for", 
     " ", "which", " ", "a", " ", "particular", " ", "function"}], ",", " ", 
    RowBox[{
    "in", " ", "this", " ", "case", " ", "EvenQ", " ", "returns", " ", 
     "true"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 
  3.712466343207712*^9}},ExpressionUUID->"0510f576-c994-4dc7-a7a4-\
73f4fa65c12e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712466303417549*^9},ExpressionUUID->"8b36f326-ad9d-436a-a6f6-\
864a9aec7797"]
}, Open  ]],

Cell["\<\
We can even build our own even function using a pure function\
\>", "Text",
 CellChangeTimes->{{3.712466347402652*^9, 
  3.7124663648720093`*^9}},ExpressionUUID->"e11c832a-3e48-4706-a21c-\
1b9138d32793"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"#", ",", "2"}], "]"}], "\[Equal]", "0"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Select", " ", "items", " ", "from", " ", "a", " ", "list", " ", "for", 
    " ", "which", " ", "a", " ", "particular", " ", "pure", " ", "function", 
    " ", "returns", " ", "true", " ", "#", " ", "here", " ", "represents", 
    " ", "each", " ", "element", " ", "from", " ", "the", " ", "list"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124662587748795`*^9, 3.712466343207712*^9}, {
  3.712466373888235*^9, 3.712466418744852*^9}, {3.712466458572919*^9, 
  3.7124664811038723`*^9}},ExpressionUUID->"b50dbaa7-e6bf-4510-bf15-\
6e487898daee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", 
   "16", ",", "18", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7124664842895412`*^9},ExpressionUUID->"f0e36c14-6e7a-42f3-8fff-\
4adaacd33ed0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"someRandomInts", " ", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7124665672428136`*^9, 
  3.7124666175870037`*^9}},ExpressionUUID->"64538edf-fe36-4b64-8af2-\
2cbd5874080a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "0", ",", "4", ",", "10", ",", "9", ",", "5", ",", "9", ",", "7", 
   ",", "2", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7124666210090394`*^9},ExpressionUUID->"922c8242-5afb-49af-885f-\
fa94e1bde2e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{"someRandomInts", ",", 
    RowBox[{
     RowBox[{"#", " ", ">", "3"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"all", " ", "greater", " ", "than", " ", "3"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124666234658422`*^9, 
  3.7124666773668933`*^9}},ExpressionUUID->"0f2f8bea-ab20-4544-afac-\
4a4eeb992320"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "4", ",", "10", ",", "9", ",", "5", ",", "9", ",", "7"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.712466649742626*^9},ExpressionUUID->"d9e8cf73-4b32-4213-8f4b-\
16d14ffb77c1"]
}, Open  ]],

Cell["You might see the operator form of select used sometimes", "Text",
 CellChangeTimes->{{3.712466729661992*^9, 
  3.7124667415357656`*^9}},ExpressionUUID->"7be3e930-054a-436d-a16c-\
1e53492b3aae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", "OddQ", "]"}], "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.712466745109606*^9, 
  3.712466789585578*^9}},ExpressionUUID->"f608295a-4896-490b-81c3-\
b35e1ec0ad21"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7124667904462023`*^9},ExpressionUUID->"eb34d331-0473-4b1c-a6d7-\
11435349e31b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "n", "]"}], ",", "even", ",", "odd"}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712467529719624*^9, 3.7124676072629023`*^9}, {
  3.7124676866979747`*^9, 
  3.7124676932455873`*^9}},ExpressionUUID->"dca34c9a-cf3d-43b1-8974-\
ebbab99c5d1d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "even"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "even"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7124675844988346`*^9, 3.712467610729541*^9}, {
  3.7124676961579685`*^9, 
  3.7124677185942535`*^9}},ExpressionUUID->"b3c1eeb7-99c9-489a-9ef9-\
900847f014d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"EvenQ", "[", "n", "]"}], ",", "even", ",", "odd"}], 
         "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{"#", ",", "odd"}], "]"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Use", " ", "MemberQ", " ", "to", " ", "Select", " ", "sublists", " ", 
    "that", " ", "contain", " ", "the", " ", "odd", " ", "symbol"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712467529719624*^9, 3.7124676072629023`*^9}, {
  3.712467640067882*^9, 3.712467677763357*^9}, {3.712467725555599*^9, 
  3.7124677908617907`*^9}},ExpressionUUID->"fc9d087a-d84c-4ea8-b0be-\
bfc08605b3e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "odd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "odd"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7124676791740913`*^9, 
  3.71246773499727*^9}},ExpressionUUID->"530c79fb-e798-49fc-9641-\
1de00e3015a3"]
}, Open  ]],

Cell["\<\
One goal I have in this book is to gradually bring the user to understand \
greater levels of complexity within code, the kind you will meet in the real \
world. I am trying as much as possible to automatically generate most of the \
data you see because real world code will require that you hold certain data \
structures mentally and observe operations being done on them. WL is a very \
compact language enabling you to say so much with so little and generate a \
lot of what you want to deal with automatically, so it is imperative that you \
start understanding nested pieces of code.
So rather than create a list manually like {1,2,3,4,5}, I will do Range[5]\
\>", "Text",
 CellChangeTimes->{{3.7124678851502275`*^9, 
  3.7124681074595933`*^9}},ExpressionUUID->"03fc675a-3fe6-42cb-861c-\
2fb4bd21b0e7"],

Cell["More complex conditions", "Text",
 CellChangeTimes->{{3.712468189514041*^9, 
  3.7124681930850644`*^9}},ExpressionUUID->"5f4987f3-678e-42f6-b3bd-\
7fc79903f388"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"#", ",", "3"}], "]"}], " ", "\[Equal]", " ", "0"}], " ", "&&",
       " ", 
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"#", ",", " ", "5"}], "]"}], " ", "\[Equal]", "0"}]}], 
     "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Select", " ", "numbers", " ", "up", " ", "to", " ", "100", " ", "that", 
     " ", "are", " ", "divisible", " ", "by", " ", "both", " ", "3", " ", 
     "and", " ", "5.", " ", "The"}], " ", "&&", " ", 
    RowBox[{"is", " ", "a", " ", "logical", " ", "AND"}]}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7124681994749746`*^9, 3.712468286857792*^9}, {
  3.7124686564302945`*^9, 
  3.712468673106914*^9}},ExpressionUUID->"70065843-7bcb-41d0-80ca-\
0b39ccda8fcf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"15", ",", "30", ",", "45", ",", "60", ",", "75", ",", "90"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7124682883350277`*^9},ExpressionUUID->"520bf899-b6a8-47a2-9dc9-\
c5a4aa98707d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patterns", "Chapter",
 CellChangeTimes->{{3.712468445304388*^9, 3.7124684533280535`*^9}, {
  3.712468530301993*^9, 
  3.7124685427495594`*^9}},ExpressionUUID->"5b265e4d-8891-4298-84bb-\
4f7fc26d457d"],

Cell["\<\
We use patterns in WL to search for stuff and possibly apply some kind of \
transformation to them.\
\>", "Text",
 CellChangeTimes->{{3.7124685535197268`*^9, 3.71246862786994*^9}, {
  3.7124686818755827`*^9, 3.712468691730714*^9}, {3.7124687240391507`*^9, 
  3.7124687278381324`*^9}},ExpressionUUID->"dec093e4-342a-4740-a610-\
0610abd0830d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], "/.", 
  RowBox[{"num_", "\[Rule]", 
   SuperscriptBox["num", "2"], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "using", " ", "a", " ", "named", " ", "pattern", " ", "to", " ", "search",
      " ", "a", " ", "list", " ", "and", " ", "square", " ", "every", " ", 
     "single", " ", "item"}], " ", "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.712468763924532*^9, 
  3.7124689150982323`*^9}},ExpressionUUID->"a8f6ea7a-9dd2-4a98-9daf-\
1b026951929d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712468853501315*^9},ExpressionUUID->"5e3ea5d9-5e98-4baf-aaf6-\
7808f67600f7"]
}, Open  ]],

Cell["\<\
The main pattern here is the underscore _, it matches single anything. It is \
preceded by a name num so that we use num in the transformation on the other \
side of the Rule -> symbol.
double underscore __ matches 1 one or more things while triple underscore \
matches zero or more things, we will see these patterns used in programs we \
will encounter.\
\>", "Text",
 CellChangeTimes->{{3.712469203570334*^9, 3.712469226211088*^9}, {
  3.7124692762001624`*^9, 3.712469330936516*^9}, {3.7124700483282228`*^9, 
  3.712470150358751*^9}},ExpressionUUID->"b44e6676-a34f-4f40-9d33-\
51ba70716665"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"Range", "[", "3", "]"}], ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     SuperscriptBox["i", "n"], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    SuperscriptBox["j", "3"], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712469493226033*^9, 3.712469503271201*^9}, {
  3.7124713269638357`*^9, 3.712471436789711*^9}, {3.712471477172843*^9, 
  3.712471481112101*^9}},ExpressionUUID->"82b6015c-fcd9-43d7-b01c-\
2d5dc27a7a69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "i", ",", 
   SuperscriptBox["i", "2"], ",", 
   SuperscriptBox["i", "3"], ",", 
   SuperscriptBox["j", "3"]}], "}"}]], "Output",
 CellChangeTimes->{3.712471467735742*^9, 
  3.712471526025812*^9},ExpressionUUID->"0147c47c-51ae-48e2-a969-\
b8607db981e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Range", "[", "3", "]"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      SuperscriptBox["i", "n"], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     SuperscriptBox["j", "3"], "}"}]}], "]"}], "/.", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"i", "|", 
     RowBox[{"i", "^", "_"}]}], ")"}], " ", "\[Rule]", " ", "q", "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "This", " ", "rule", " ", "says", " ", "turn", " ", "any", " ", "i", " ", 
     "or", " ", "i", " ", "to", " ", "the", " ", "power", " ", "anything", 
     " ", "to", " ", "q"}], " ", "*)"}], " "}]}]], "Input",
 CellChangeTimes->{{3.712469493226033*^9, 3.712469503271201*^9}, {
  3.7124713269638357`*^9, 3.712471436789711*^9}, {3.712471477172843*^9, 
  3.712471481112101*^9}, {3.7124715680181146`*^9, 3.7124716060359707`*^9}, {
  3.7125911510726533`*^9, 
  3.712591214650171*^9}},ExpressionUUID->"c2f98157-a31e-4149-8a94-\
ad2625055617"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "q", ",", "q", ",", "q", ",", 
   SuperscriptBox["j", "3"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7124716449647417`*^9},ExpressionUUID->"1836ed9f-6c38-4648-9f79-\
238136ca2e06"]
}, Open  ]],

Cell["\<\
The pattern language available in WL is more elegant than regular expressions \
found in other languages.\
\>", "Text",
 CellChangeTimes->{{3.712592582792923*^9, 3.7125925854950023`*^9}, {
  3.71259266238581*^9, 
  3.7125927113008547`*^9}},ExpressionUUID->"f39284ae-65be-4071-9b6c-\
51499b1b3b6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"10", ",", "5"}], "]"}], ",", 
   RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.712592715456014*^9, 
  3.712592779523098*^9}},ExpressionUUID->"a993f750-ffae-4eb7-b293-\
ec253cf65d21"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "8", ",", "0", ",", "7", ",", "8", ",", "\<\"W\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"l\"\>", ",", "\<\"f\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7125927821539173`*^9},ExpressionUUID->"3d3b323f-6293-440e-8006-\
4f65d962a730"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wordsNnumbers", " ", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", "5"}], "]"}], ",", 
     RowBox[{"Characters", "[", "\"\<Wolfram\>\"", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.712592715456014*^9, 
  3.7125928569112434`*^9}},ExpressionUUID->"c24d5cd2-0b96-4515-b620-\
9724bcdcc541"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"r\"\>", ",", "2", ",", "3", ",", "\<\"a\"\>", ",", "8", 
   ",", "\<\"m\"\>", ",", "10", ",", "\<\"o\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"W\"\>", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.712592819347392*^9, 
  3.7125928609958897`*^9},ExpressionUUID->"22b2ce00-a2b6-47b3-9e5f-\
67de6a1ca326"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"wordsNnumbers", ",", "_Integer"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "integers"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712592867242684*^9, 
  3.712592896156571*^9}},ExpressionUUID->"52afa83e-0c7d-4222-9ae9-\
8bce3d3e883f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "8", ",", "10", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712592897291218*^9},ExpressionUUID->"e005ed96-e3f1-470e-899c-\
4bc27451366a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"wordsNnumbers", ",", 
    RowBox[{"Except", "[", "_Integer", "]"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Find", " ", "all", " ", "non"}], "-", "integers"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712592867242684*^9, 3.7125929290373135`*^9}, {
  3.7125929749916344`*^9, 
  3.712592977934416*^9}},ExpressionUUID->"1d23af36-9e76-4035-999c-\
c5e619c86e5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"m\"\>", ",", "\<\"o\"\>", 
   ",", "\<\"f\"\>", ",", "\<\"l\"\>", ",", "\<\"W\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.712592935441183*^9, 
  3.712592982463234*^9},ExpressionUUID->"01d978d2-5b6b-4998-9b4f-\
7935400899a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairsNtriples", " ", "=", " ", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7125930409040923`*^9, 
  3.7125931480464277`*^9}},ExpressionUUID->"eddcadc6-a512-4428-8946-\
f71d30a577f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.71259312819654*^9, 
  3.7125931493038654`*^9}},ExpressionUUID->"f758715a-eed2-4255-ab7d-\
94f9d2b88e69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "pairs"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125932050654736`*^9}},ExpressionUUID->"9bf08129-c1d3-49d5-92ce-\
3b83ba15403a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7125932064226856`*^9},ExpressionUUID->"04371160-ee18-4bcb-9a3a-\
2311b7403e90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "_"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Find", " ", "all", " ", "triples"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125932361608*^9}},ExpressionUUID->"467f7256-18d5-4fc8-83a1-64e23cc2c530"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.712593242486559*^9},ExpressionUUID->"abe35a0c-650b-4dac-94a9-\
1902bca9601c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Cases", "[", 
   RowBox[{"pairsNtriples", ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_", ",", "c_"}], "}"}], "\[Rule]", " ", 
     RowBox[{"a", " ", "+", " ", "b", " ", "+", "c"}]}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sum", " ", "all", " ", "triples"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712593156742966*^9, 
  3.7125933090021*^9}},ExpressionUUID->"e574d242-ddf3-419b-bda2-2b1c63db33f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "5", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712593314982442*^9},ExpressionUUID->"0810ca27-804b-4986-ba47-\
316226cdd025"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sorting stuff", "Chapter",
 CellChangeTimes->{{3.7127231016239243`*^9, 
  3.7127231049197283`*^9}},ExpressionUUID->"8bd1dcf3-a337-4f02-b744-\
909a2cdbd069"],

Cell["\<\
Sorting is putting things in a certain order. For instance we might have a \
bunch of random numbers we wish to arrange in ascending or descending order. \
Its not usually advisable to implement your own sorting algorithms except for \
fun, or maybe you want to discover a sort method that is faster than anything \
ever discovered. WL implements a very efficient sort algorithm and its always \
advisable to use the built-in stuff.\
\>", "Text",
 CellChangeTimes->{{3.7127231321672773`*^9, 3.7127233466109447`*^9}, {
  3.712723400850381*^9, 
  3.7127234442046995`*^9}},ExpressionUUID->"408c55c0-124b-4199-81c0-\
b01a26076607"],

Cell[CellGroupData[{

Cell[BoxData["someRandomInts"], "Input",
 CellChangeTimes->{{3.7127230816178017`*^9, 
  3.712723088435858*^9}},ExpressionUUID->"1aefe7d6-4b6f-453d-b3e2-\
8e0493f2d62b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "0", ",", "4", ",", "10", ",", "9", ",", "5", ",", "9", ",", "7", 
   ",", "2", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7127230905416756`*^9},ExpressionUUID->"d15316ee-ec78-4653-bcf0-\
ff6e92e0c171"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", "someRandomInts", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"In", " ", "ascending", " ", "order"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.712723449638192*^9, 
  3.7127234696698713`*^9}},ExpressionUUID->"c5af9d1a-34dd-44ad-8efa-\
cfeb032819ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "2", ",", "4", ",", "4", ",", "5", ",", "7", ",", "9", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.712723455344245*^9},ExpressionUUID->"070400d8-5946-48ec-ba06-\
e3d9683dde83"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"someRandomInts", ",", " ", 
    RowBox[{
     RowBox[{"#1", " ", ">", " ", "#2"}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "descending", " ", "order", " ", "using", " ", "an", " ", 
    "ordering", " ", "function", " ", "that", " ", "specifies", " ", "that", 
    " ", "the", " ", "previous", " ", "number", " ", "be", " ", "greater", 
    " ", "than", " ", "the", " ", "next", " ", "one"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.712723475707801*^9, 
  3.712723551920385*^9}},ExpressionUUID->"696eb959-2cef-41be-854d-\
9f8d9948dc8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "9", ",", "7", ",", "5", ",", "4", ",", "4", ",", "2", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7127235538023605`*^9},ExpressionUUID->"32feebe7-2a0d-4757-a077-\
02ed95aa2103"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randWords", " ", "=", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{
    RowBox[{"WordList", "[", "]"}], ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "A", " ", "list", " ", "of", " ", "10", " ", "random", " ", "words"}], " ",
    "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127237258978243`*^9, 3.712723764378605*^9}, {
  3.712723870871478*^9, 
  3.712723907352166*^9}},ExpressionUUID->"99f76dbd-7990-4e52-aba5-\
54dabaad31c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"cafe\"\>", ",", "\<\"cat\"\>", ",", "\<\"noradrenaline\"\>", 
   ",", "\<\"ox\"\>", ",", "\<\"consanguineous\"\>", ",", "\<\"impinging\"\>",
    ",", "\<\"garishness\"\>", ",", "\<\"socioeconomically\"\>", 
   ",", "\<\"heavily\"\>", ",", "\<\"peddler\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7127237665179863`*^9, {3.712723855439438*^9, 
   3.7127239104658766`*^9}},ExpressionUUID->"6703ec29-6f2d-4655-a7d8-\
b5b1ad43292c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", "randWords", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sort", " ", "handles", " ", "words", " ", "with", " ", 
    RowBox[{"ease", ".", " ", "Dictionary"}], " ", "order"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239144257603`*^9, 3.7127239419633474`*^9}, {
  3.7127243004869785`*^9, 
  3.712724312211463*^9}},ExpressionUUID->"30c3a623-bfc7-4f6d-b649-\
4dad22a21a1f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"cafe\"\>", ",", "\<\"cat\"\>", ",", "\<\"consanguineous\"\>", 
   ",", "\<\"garishness\"\>", ",", "\<\"heavily\"\>", 
   ",", "\<\"impinging\"\>", ",", "\<\"noradrenaline\"\>", ",", "\<\"ox\"\>", 
   ",", "\<\"peddler\"\>", ",", "\<\"socioeconomically\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7127239238738146`*^9, 
  3.7127239435176387`*^9}},ExpressionUUID->"d01afd2f-2c2d-4313-8a42-\
981cb867ac84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21"}], ",", "21"}], "}"}], ",", "10"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Random", " ", "Integers", " ", "Including", " ", "Negatives"}], 
   " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239960068064`*^9, 
  3.712724040318719*^9}},ExpressionUUID->"9491dd8a-8f8c-4057-aa82-\
38331c860dc9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"-", "3"}], ",", "17", ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "18"}], ",", "14", ",", 
   RowBox[{"-", "17"}], ",", "4", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "13"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7127240175065823`*^9, 
  3.7127240423605566`*^9}},ExpressionUUID->"51654979-cbc7-414c-95e4-\
f2ac83076a0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"%", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", "#1", "]"}], "<", 
      RowBox[{"Abs", "[", "#2", "]"}]}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"%", " ", "Stands", " ", "for", " ", "the", " ", "last", " ", 
    RowBox[{"output", ".", " ", "We"}], " ", "Sort", " ", "by", " ", 
    "Absolute", " ", "value", " ", "using", " ", "an", " ", "ordering", " ", 
    "function"}], "  ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127239960068064`*^9, 
  3.7127242139555063`*^9}},ExpressionUUID->"8086e217-fc7d-4d23-b793-\
11d9f8d739c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "3"}], ",", "4", ",", 
   RowBox[{"-", "6"}], ",", 
   RowBox[{"-", "13"}], ",", "14", ",", 
   RowBox[{"-", "17"}], ",", "17", ",", 
   RowBox[{"-", "18"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7127242185550594`*^9},ExpressionUUID->"caf9351b-42bf-4fca-9665-\
08c75531becf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"randWords", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"StringLength", "[", "#1", "]"}], " ", "<", " ", 
      RowBox[{"StringLength", "[", "#2", "]"}]}], "&"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Sort", " ", "by", " ", "string", " ", "Length"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7127242460318727`*^9, 
  3.712724287323826*^9}},ExpressionUUID->"6106bb61-68a4-4213-8746-\
3c86f382f767"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ox\"\>", ",", "\<\"cat\"\>", ",", "\<\"cafe\"\>", 
   ",", "\<\"peddler\"\>", ",", "\<\"heavily\"\>", ",", "\<\"impinging\"\>", 
   ",", "\<\"garishness\"\>", ",", "\<\"noradrenaline\"\>", 
   ",", "\<\"consanguineous\"\>", ",", "\<\"socioeconomically\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.712724288423807*^9},ExpressionUUID->"923607f6-7742-4e25-a475-\
a774b83a925d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21"}], ",", "21"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7127243417265034`*^9, 3.7127243708015766`*^9}, {
  3.7127244012404056`*^9, 
  3.712724407722045*^9}},ExpressionUUID->"5dd90000-dd82-40d9-bd57-\
a952e46a72ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "16"}], ",", 
     RowBox[{"-", "6"}], ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "15"}], ",", "17", ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "13"}], ",", "14", ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "12"}], ",", 
     RowBox[{"-", "13"}], ",", 
     RowBox[{"-", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "7"}], ",", 
     RowBox[{"-", "20"}], ",", 
     RowBox[{"-", "16"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "21", ",", 
     RowBox[{"-", "18"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", 
     RowBox[{"-", "13"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", 
     RowBox[{"-", "15"}], ",", 
     RowBox[{"-", "16"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"-", "8"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", 
     RowBox[{"-", "7"}], ",", 
     RowBox[{"-", "5"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7127243728068743`*^9, 
  3.712724408634699*^9},ExpressionUUID->"c613f1d7-e47c-46b2-82b9-\
5fd84588147f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphs", "Chapter",
 CellChangeTimes->{{3.7134184605982904`*^9, 
  3.713418461869225*^9}},ExpressionUUID->"1a4e8ba4-ce56-47aa-b09d-\
bcdb9c6e61a7"],

Cell["\<\
A graph is simply a set of nodes (vertices) and edges (arcs). An edge \
connects a pair of nodes.\
\>", "Text",
 CellChangeTimes->{{3.713418512736163*^9, 
  3.713418673215619*^9}},ExpressionUUID->"3494af42-4a2e-4e18-8ede-\
7eace2937b1f"],

Cell["\<\
A graph can be either directed, with arrowheads indicating direction of \
connectivity\
\>", "Text",
 CellChangeTimes->{{3.71341868730322*^9, 3.7134186959954057`*^9}, {
  3.713419012999893*^9, 3.7134190228139057`*^9}, {3.713419067728431*^9, 
  3.7134190751980677`*^9}},ExpressionUUID->"b4a7be38-9de7-4623-8155-\
872563fa0555"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "4"}], ",", 
    RowBox[{"4", "\[Rule]", "5"}], ",", 
    RowBox[{"4", "\[Rule]", "2"}], ",", 
    RowBox[{"2", "\[Rule]", "3"}], ",", 
    RowBox[{"3", "\[Rule]", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 
  3.7134188163212*^9}},ExpressionUUID->"2b74d0bb-e9bb-4096-b81d-e18a27bbf8b3"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 
      5}, {{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}, Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQMll2Rt259et29i0m5+F/TGHia+5aRT+MzgN/YC
ml8e9zx7bu/VuUdW2PafvWtr4vnbQPUCPV/6OGw4HNrOxLivAfJjlHd2XCl4
bc+x+EfPdcMt9n6cjyfNsH5tX1j25+Lz8J32ETkPjCP4XtvP/n2++fWEffb/
Eqea6b18Za/tub7x6ZuD9oeiBOYYnHllr3r+9bJN04/YH33e1Few/ZV9Fmvl
aw/34/ZpTBLhv1a9speSvmws+OukvdyttWFXl72yF8tUbChad8b+lGbLasnl
r+y9WLL0OHY/sNc77hvmsfqVffXkn64KGQ/tP0rGG50AmvfRY/nSiyKP7O38
VG5OBNr3as4z3m0HHtk7dR/+PQPonl3JbTvSsx/bz2hKyzoDdO8Jxs9TGkWe
2Es1pMuJ2by2nyrO2zJ/9xP7bZ+j3aMLX9s/MS+cHJfw1L7xhuBkHdO39jWd
4i1FQP/L+LDtKcx6a/+92+J/FtD/8z3ZC3ZPf2sfa8VZEQX0/xeHVffe7Xlr
nyq6fe0UoP9/1Hoyfrv51n6pgVlENND/bpv4Vux/99a+p8H45xu34/YcrAot
9r/f2ieFvSrf9POkfe6il3p5/9/aK03WuCYE9L/Up/3Nm4D8c+deO3/Y9cD+
0snQ5l6get+k/9M4gP4vevLKW/z9W/udz0VX7gL6v7ww1i781lt7L1NLqwVA
/1tl3Vgcufet/YmwjuZgoP/vxfcu05/x1n6BZlVxPtD/Lw91ub8H+sd11paX
/UD/316xJXAz0L+bREI/BQL9DwCaECv8
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{1, 2}, 0.030449365958857832`], 
         ArrowBox[BezierCurveBox[{
          2, {0.7623445247291688, 0.3734600717479594}, 3}], 
          0.030449365958857832`], 
         ArrowBox[BezierCurveBox[{
          2, {1.0079839270177136`, 0.37343328192618247`}, 3}], 
          0.030449365958857832`], ArrowBox[{3, 1}, 0.030449365958857832`], 
         ArrowBox[{3, 4}, 0.030449365958857832`], 
         ArrowBox[{4, 2}, 0.030449365958857832`], 
         ArrowBox[{4, 5}, 0.030449365958857832`]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.030449365958857832], DiskBox[2, 0.030449365958857832], 
         DiskBox[3, 0.030449365958857832], DiskBox[4, 0.030449365958857832], 
         DiskBox[5, 0.030449365958857832]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.713418793601492*^9, 
  3.7134188203325024`*^9}},ExpressionUUID->"45871fe1-5be2-493d-a2e0-\
1135154ec544"]
}, Open  ]],

Cell["Or undirected", "Text",
 CellChangeTimes->{{3.7134189692690697`*^9, 
  3.7134189728505635`*^9}},ExpressionUUID->"1cdf802d-0b5b-4632-ad72-\
edef1a891267"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "<->", "2"}], ",", 
    RowBox[{"2", "<->", "3"}], ",", 
    RowBox[{"3", "<->", "4"}], ",", 
    RowBox[{"4", "<->", "5"}], ",", 
    RowBox[{"4", "<->", "2"}], ",", 
    RowBox[{"2", "<->", "3"}], ",", 
    RowBox[{"3", "<->", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 3.7134188163212*^9}, {
  3.7134188524275875`*^9, 3.713418885828278*^9}, {3.7134189634279213`*^9, 
  3.7134190071178303`*^9}, {3.713419082186406*^9, 
  3.713419102096507*^9}},ExpressionUUID->"31afa417-e090-4ad8-8e38-\
37d1215d9c4f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw1z2tI02EUBvAhaiairllShqSgSeGFkEqzns1UmoSpM1LTmcPbJDfNCyah
BatEPzS8QXhpFKZZouRgaWpaOhMvuUlKGdk2L+z/912tDEVBe/vggcPhged8
+HlJ5PGZNhwOx4fu/7s3stwsjw3TPA4kpAz5JK1hol2mczauosb70ru2a2vY
653d4kkUgh0sy9K2ow3zKOvpqeGFOfBVDS+7/eh/kLMDsxNKUGZ3pjIyZRmJ
+YP+J/MJGj0+qlSaJdyrmIpMbSaYyIyxbXFdQrX/qLzsPcEXslunyjbht0Pg
65uLBPq84+lOA0YEbyrN3usEFuVKdhTXCL/NGr2SY0FfozRVnWGAcEHA7bK1
QGTqkvVrfkBYZx9xiGbnywsthe2TSCwJzDHuEvA7Yjbr18dhvaKziP8QdEsC
HBPCxxDx6Rm/9jvBPNEqompHcPqqurN6mKBjX+spW/Mw5ro8spKaCGbEJS7h
VYMIMs3ID8gJTvTmZiTH92LV/sljXQiB2pF7PcdfjSG53cp2CYuih07adOov
rZ11eStg0RpnUHygfr228nCRGwvrt4pHWuov8PqlE/xksJg1OjJF/RltHITq
GSSQsKDz1K/xnVXKBhh4upqmb1N/LKfYne1mELqTLDJTv9jYfE7zisHYZ43Z
Sv3iRonMk+avB7erhC8mcbec2xlG+xeC3Wakf8dRWM5r6OhncCvt2HOvi2NQ
5xVP3dAxMLBHh/fXjcBTuOgisjDQsn3WN9TvuzEXks9jseVuI31QPYhY+5W4
p3wWd6TB9wtEvSjNaaqfLmahODIgjA5Q4x84sCk0
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], ArrowBox[{1, 2}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{1, 3}, 0.030449516090916492`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{
           2, {1.008520704478869, 0.37314252471395337`}, 3}], 
           0.030449516090916492`]}, 
         {Arrowheads[0.], 
          ArrowBox[BezierCurveBox[{
           2, {0.7630616598911268, 0.37320243172925066`}, 3}], 
           0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{2, 4}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{3, 4}, 0.030449516090916492`]}, 
         {Arrowheads[0.], ArrowBox[{4, 5}, 0.030449516090916492`]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.030449516090916492], DiskBox[2, 0.030449516090916492], 
         DiskBox[3, 0.030449516090916492], DiskBox[4, 0.030449516090916492], 
         DiskBox[5, 0.030449516090916492]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.7134191045752764`*^9},ExpressionUUID->"00707674-0e86-4096-af28-\
bebff33f4e5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "<->", "2"}], ",", 
      RowBox[{"2", "<->", "3"}], ",", 
      RowBox[{"3", "<->", "4"}], ",", 
      RowBox[{"4", "<->", "5"}], ",", 
      RowBox[{"4", "<->", "2"}], ",", 
      RowBox[{"2", "<->", "3"}], ",", 
      RowBox[{"3", "<->", "1"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Labelling", " ", "vertices"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7134187230135193`*^9, 3.7134188163212*^9}, {
  3.7134188524275875`*^9, 3.713418885828278*^9}, {3.7134189634279213`*^9, 
  3.7134190071178303`*^9}, {3.713419082186406*^9, 3.713419102096507*^9}, {
  3.7134191973649454`*^9, 
  3.7134192374089117`*^9}},ExpressionUUID->"fdeea770-0393-4b3b-b4a6-\
c800d21e657e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 2}, {2, 3}, {3, 1}}}, {
      VertexLabels -> {Automatic}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.3732888953760839}, {0.8858822590869997, 
          0.7463449564432038}}, 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.3732888953760839}, {0.8857001052829949, 0.}}, 
          0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[BezierCurveBox[{{0.8858822590869997, 0.7463449564432038}, {
          1.008520704478869, 0.37314252471395337`}, {0.8857001052829949, 
          0.}}], 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[BezierCurveBox[{{0.8858822590869997, 0.7463449564432038}, {
          0.7630616598911268, 0.37320243172925066`}, {0.8857001052829949, 
          0.}}], 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8858822590869997, 0.7463449564432038}, {
          1.8909953910039246`, 0.37312578724025364`}}, 
          0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8857001052829949, 0.}, {1.8909953910039246`, 
          0.37312578724025364`}}, 0.030449516090916492`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.8909953910039246`, 0.37312578724025364`}, {
          3.0293342076387804`, 0.3732396817489221}}, 0.030449516090916492`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.3732888953760839}, 0.030449516090916492], 
         InsetBox["1", 
          Offset[{2, 2}, {0.030449516090916492, 0.4037384114670004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8858822590869997, 0.7463449564432038}, 
          0.030449516090916492], 
         InsetBox["2", 
          Offset[{2, 2}, {0.9163317751779162, 0.7767944725341203}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8857001052829949, 0.}, 0.030449516090916492], 
         InsetBox["3", 
          Offset[{2, 2}, {0.9161496213739114, 0.030449516090916492}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8909953910039246, 0.37312578724025364}, 
          0.030449516090916492], 
         InsetBox["4", 
          Offset[{2, 2}, {1.921444907094841, 0.40357530333117014}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.0293342076387804, 0.3732396817489221}, 
          0.030449516090916492], 
         InsetBox["5", 
          Offset[{2, 2}, {3.059783723729697, 0.4036891978398386}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.713419211719124*^9},ExpressionUUID->"753d196d-bd69-4226-8699-\
e9fc22e08157"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"el", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "1"}]}], "}"}]}], ";"}]], "Input",Expre\
ssionUUID->"05c5122e-d2a0-4165-99e7-20935a0079a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{"el", ",", 
    RowBox[{"EdgeLabels", "\[Rule]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"el", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        "\[Rule]", 
        SubscriptBox["e", "i"]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "el", "]"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}], "  ", 
  RowBox[{"(*", " ", 
   RowBox[{"Lablelling", " ", "edges", " ", "Individually"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7134196826972218`*^9, 3.713419728493623*^9}, {
  3.7134198760210495`*^9, 
  3.713419900738537*^9}},ExpressionUUID->"7f1f4bbd-995a-4a4d-97cf-\
25fe1192e794"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {3, 1}}}, {
      EdgeLabels -> {
        UndirectedEdge[3, 1] -> Subscript[Private`e, 3], UndirectedEdge[1, 2] -> 
         Subscript[Private`e, 1], UndirectedEdge[2, 3] -> 
         Subscript[Private`e, 2]}, VertexLabels -> {Automatic}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], 
          ArrowBox[{{-0.8660254037844384, -0.49999999999999933`}, {
           0.8660254037844389, -0.5000000000000012}}, 0.020399597244776385`]},
          InsetBox[
          SubscriptBox["e", "1"], {2.7755575615628914*^-16, -0.5000000000000002},
           ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{-0.8660254037844384, -0.49999999999999933`}, {
           1.8369701987210297`*^-16, 1.}}, 0.020399597244776385`]}, InsetBox[
          SubscriptBox["e", "3"], {-0.4330127018922191, 0.25000000000000033}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.8660254037844389, -0.5000000000000012}, {
           1.8369701987210297`*^-16, 1.}}, 0.020399597244776385`]}, InsetBox[
          SubscriptBox["e", "2"], {0.4330127018922196, 0.2499999999999994}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{-0.8660254037844384, -0.49999999999999933}, 
          0.020399597244776385], 
         InsetBox["1", 
          Offset[{2, 2}, {-0.845625806539662, -0.479600402755223}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8660254037844389, -0.5000000000000012}, 
          0.020399597244776385], 
         InsetBox["2", 
          Offset[{2, 2}, {0.8864250010292153, -0.47960040275522486}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8369701987210297*^-16, 1.}, 0.020399597244776385], 
         InsetBox["3", 
          Offset[{2, 2}, {0.02039959724477657, 1.0203995972447764}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.7134198715822372`*^9},ExpressionUUID->"cd90fe14-f911-4787-8f97-\
66e8afaefaa4"]
}, Open  ]],

Cell["\<\
We use graphs to capture useful relationships among entities, like in Social \
networks, the relationships between friends are captured in a graph. A graph \
is usually also called a network.\
\>", "Text",
 CellChangeTimes->{{3.7134204443370667`*^9, 
  3.7134205374207706`*^9}},ExpressionUUID->"d3481413-6f94-48d1-a466-\
95d4b365aa97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<William\>\"", " ", "\[Rule]", " ", "\"\<Elvis\>\""}], ",", 
     RowBox[{"\"\<Elvis\>\"", " ", "\[UndirectedEdge]", "\"\<Sylvia\>\""}], 
     ",", 
     RowBox[{"\"\<Elvis\>\"", "\[Rule]", " ", "\"\<Trina\>\""}], ",", 
     RowBox[{"\"\<Trina\>\"", "\[Rule]", " ", "\"\<Sylvia\>\""}], ",", 
     RowBox[{"\"\<Sylvia\>\"", " ", "\[UndirectedEdge]", "\"\<Vivian\>\""}]}],
     "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.71342055054978*^9, 
  3.7134207329577074`*^9}},ExpressionUUID->"6652ab1b-75a8-4668-9f6b-\
7137ae3af635"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "William", "Elvis", "Sylvia", "Trina", "Vivian"}, {{{1, 2}, {2, 4}, {4, 
       3}}, {{2, 3}, {3, 5}}}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 0.}, {1.0232890200771365`, 0.28594218604150734`}}, 
         0.031293254495300085`], 
        {Arrowheads[0.], 
         ArrowBox[{{1.0232890200771365`, 0.28594218604150734`}, {
          2.1231559613218374`, 0.28530404267550774`}}, 
          0.031293254495300085`]}, 
        ArrowBox[{{1.0232890200771365`, 0.28594218604150734`}, {
         1.5735707686584046`, 0.9655491216866833}}, 0.031293254495300085`], 
        {Arrowheads[0.], 
         ArrowBox[{{2.1231559613218374`, 0.28530404267550774`}, {
          3.1482422081128902`, 0.000428109524294229}}, 
          0.031293254495300085`]}, 
        ArrowBox[{{1.5735707686584046`, 0.9655491216866833}, {
         2.1231559613218374`, 0.28530404267550774`}}, 0.031293254495300085`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.031293254495300085], 
         InsetBox["\<\"William\"\>", 
          Offset[{2, 2}, {0.031293254495300085, 0.031293254495300085}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.0232890200771365, 0.28594218604150734}, 
          0.031293254495300085], 
         InsetBox["\<\"Elvis\"\>", 
          Offset[{2, 2}, {1.0545822745724367, 0.3172354405368074}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.1231559613218374, 0.28530404267550774}, 
          0.031293254495300085], 
         InsetBox["\<\"Sylvia\"\>", 
          Offset[{2, 2}, {2.1544492158171376, 0.3165972971708078}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5735707686584046, 0.9655491216866833}, 
          0.031293254495300085], 
         InsetBox["\<\"Trina\"\>", 
          Offset[{2, 2}, {1.6048640231537048, 0.9968423761819833}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.1482422081128902, 0.000428109524294229}, 
          0.031293254495300085], 
         InsetBox["\<\"Vivian\"\>", 
          Offset[{2, 2}, {3.1795354626081904, 0.031721364019594314}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.71342072325931*^9, 
  3.7134207349971476`*^9}},ExpressionUUID->"aba3735c-0567-420a-b627-\
f973e404c382"]
}, Open  ]],

Cell[TextData[{
 "A simple social network graph, the directed edges, the ones with an \
arrowhead are one way follow relationships like the one on Twitter and \
Instagram, for instance: William follows Elvis but Elvis does not follow \
William. Sylvia and Vivian both follow each other. \nWe can model all sorts \
of situations with graphs, Your Google maps usually uses a graph to find the \
Shortest Path between two location.\nThere are other networks like Financial \
networks etc.\n\n",
 StyleBox["Uses of Graphs", "Chapter"]
}], "Text",
 CellChangeTimes->{{3.7134207565766153`*^9, 3.713420792009548*^9}, {
  3.7134208475121393`*^9, 3.71342095801989*^9}, {3.7134210043419447`*^9, 
  3.713421110341259*^9}, {3.7134255102944984`*^9, 3.7134255510078335`*^9}, {
  3.7134257861146235`*^9, 
  3.713425827499996*^9}},ExpressionUUID->"c1f776f9-f17f-47af-842c-\
ad5bcd18ffec"],

Cell["\<\
Once we have a graph, we can ask several useful questions on the structures \
contained in the graph, this is how we use graphs as computational objects. \
e.g. 
1. Finding connected elements and paths
2. Finding the shortest path between elements
3. Breaking up or partitioning the graph into sets of connected elements.\
\>", "Text",
 CellChangeTimes->{{3.713425833428476*^9, 3.7134259920251946`*^9}, 
   3.7134260833752995`*^9},ExpressionUUID->"54b2009f-7e8a-4aeb-aac8-\
1cc7f3e18330"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cityConnections", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Boston\>\"", " ", "\[Rule]", "\"\<Providence\>\""}], ",", 
     RowBox[{"\"\<Boston\>\"", "\[Rule]", "\"\<New York\>\""}], ",", 
     RowBox[{"\"\<Providence\>\"", "\[Rule]", "\"\<Boston\>\""}], ",", 
     RowBox[{"\"\<Providence\>\"", "\[Rule]", "\"\<New York\>\""}], ",", 
     RowBox[{"\"\<New York\>\"", "\[Rule]", "\"\<Chicago\>\""}], ",", 
     RowBox[{"\"\<Chicago\>\"", " ", "\[Rule]", " ", "\"\<Denver\>\""}], ",", 
     RowBox[{"\"\<Chicago\>\"", "\[Rule]", "\"\<Phoenix\>\""}], ",", 
     RowBox[{"\"\<Denver\>\"", "\[Rule]", "\"\<Phoenix\>\""}], ",", 
     RowBox[{"\"\<Denver\>\"", "\[Rule]", "\"\<New York\>\""}], ",", 
     RowBox[{"\"\<Los Angeles\>\"", "\[Rule]", "\"\<Boston\>\""}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7134272736687517`*^9, 
  3.71342751446379*^9}},ExpressionUUID->"8086408f-f6ec-4af5-be6d-\
bcfcfe27fc66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"cityConnections", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7134274961844463`*^9, 
  3.7134275318394947`*^9}},ExpressionUUID->"63e66c3b-f18a-49b3-a2b7-\
6ba928936f8d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Boston", "Providence", "New York", "Chicago", "Denver", "Phoenix", 
       "Los Angeles"}, {{{1, 2}, {1, 3}, {2, 1}, {2, 3}, {3, 4}, {4, 5}, {4, 
       6}, {5, 6}, {5, 3}, {7, 1}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[BezierCurveBox[{{3.24987144819767, 0.6668189220357814}, {
         3.129431782666525, 0.25773650385663255`}, {2.7896877135845686`, 
         0.}}], 0.03910806023677517], 
        ArrowBox[{{3.24987144819767, 0.6668189220357814}, {
         1.9644619272073327`, 0.5341467196946399}}, 0.03910806023677517], 
        ArrowBox[BezierCurveBox[{{2.7896877135845686`, 0.}, {
         2.910127379115715, 0.409082418179313}, {3.24987144819767, 
         0.6668189220357814}}], 0.03910806023677517], 
        ArrowBox[{{2.7896877135845686`, 0.}, {1.9644619272073327`, 
         0.5341467196946399}}, 0.03910806023677517], 
        ArrowBox[{{1.9644619272073327`, 0.5341467196946399}, {
         0.8291723072361612, 0.329475201525349}}, 0.03910806023677517], 
        ArrowBox[{{0.8291723072361612, 0.329475201525349}, {
         0.9003322202398651, 0.9752702235940252}}, 0.03910806023677517], 
        ArrowBox[{{0.8291723072361612, 0.329475201525349}, {0., 
         0.7433314133219788}}, 0.03910806023677517], 
        ArrowBox[{{0.9003322202398651, 0.9752702235940252}, {
         1.9644619272073327`, 0.5341467196946399}}, 0.03910806023677517], 
        ArrowBox[{{0.9003322202398651, 0.9752702235940252}, {0., 
         0.7433314133219788}}, 0.03910806023677517], 
        ArrowBox[{{4.335575933385031, 0.9298313620136192}, {3.24987144819767, 
         0.6668189220357814}}, 0.03910806023677517]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{3.24987144819767, 0.6668189220357814}, 0.03910806023677517],
          InsetBox["\<\"Boston\"\>", 
          Offset[{2, 2}, {3.288979508434445, 0.7059269822725566}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.7896877135845686, 0.}, 0.03910806023677517], 
         InsetBox["\<\"Providence\"\>", 
          Offset[{2, 2}, {2.828795773821344, 0.03910806023677517}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.9644619272073327, 0.5341467196946399}, 
          0.03910806023677517], 
         InsetBox["\<\"New York\"\>", 
          Offset[{2, 2}, {2.003569987444108, 0.573254779931415}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8291723072361612, 0.329475201525349}, 
          0.03910806023677517], 
         InsetBox["\<\"Chicago\"\>", 
          Offset[{2, 2}, {0.8682803674729364, 0.36858326176212414}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9003322202398651, 0.9752702235940252}, 
          0.03910806023677517], 
         InsetBox["\<\"Denver\"\>", 
          Offset[{2, 2}, {0.9394402804766403, 1.0143782838308004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7433314133219788}, 0.03910806023677517], 
         InsetBox["\<\"Phoenix\"\>", 
          Offset[{2, 2}, {0.03910806023677517, 0.782439473558754}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.335575933385031, 0.9298313620136192}, 
          0.03910806023677517], 
         InsetBox["\<\"Los Angeles\"\>", 
          Offset[{2, 2}, {4.374683993621806, 0.9689394222503943}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.7134275328541756`*^9},ExpressionUUID->"6cae90a8-d017-4be1-9813-\
c6fb87ae2724"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.713421087533976*^9, 
  3.713421095971572*^9}},ExpressionUUID->"8750f3be-ea6c-4b5b-82a8-\
ec675acd9e14"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.713420652186842*^9, 
  3.713420662499941*^9}},ExpressionUUID->"069b7555-4d87-432f-a3dd-\
38df31cd4eb1"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{672, 686},
WindowMargins->{{Automatic, -1}, {Automatic, 0}},
Magnification:>1.2 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 27, 2017)",
StyleDefinitions->"MyBook.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 294, 7, 438, "Title", "ExpressionUUID" -> \
"7c3dbef3-8a63-485f-b543-fc7190da5a74"],
Cell[880, 31, 4053, 55, 1890, "Text", "ExpressionUUID" -> \
"4506d9e4-679f-4218-99c7-2df9db597aec"],
Cell[4936, 88, 232, 5, 110, "Input", "ExpressionUUID" -> \
"4b337215-3c95-4454-9532-9d26f49641cf"],
Cell[CellGroupData[{
Cell[5193, 97, 180, 3, 87, "Chapter", "ExpressionUUID" -> \
"5fe6002f-de64-431c-a34a-e62e2d2f51f9"],
Cell[5376, 102, 395, 7, 90, "Text", "ExpressionUUID" -> \
"7c3f7ad1-34fe-47a7-becb-ece0a6a9f6df"],
Cell[5774, 111, 473, 6, 141, "Text", "ExpressionUUID" -> \
"11b3c337-ea7c-467f-849c-a77eb77e6424"],
Cell[6250, 119, 310, 6, 123, "Input", "ExpressionUUID" -> \
"bf20315d-1409-414b-bd4f-ea656aa68979"],
Cell[CellGroupData[{
Cell[6585, 129, 187, 4, 37, "Input", "ExpressionUUID" -> \
"306400a2-e4f1-4051-bf2e-714f7d9732b2"],
Cell[6775, 135, 131, 3, 37, "Output", "ExpressionUUID" -> \
"20293d44-0db2-44fc-872b-c0e7eec5bbed"]
}, Open  ]],
Cell[6921, 141, 991, 19, 90, "Text", "ExpressionUUID" -> \
"73091189-8c8a-4697-bdaa-ea61372ab0be"],
Cell[CellGroupData[{
Cell[7937, 164, 343, 8, 62, "Input", "ExpressionUUID" -> \
"51125039-0900-4662-8dd8-bb570df78afd"],
Cell[8283, 174, 157, 4, 37, "Output", "ExpressionUUID" -> \
"38313433-192c-4d39-a60a-199df63c054e"]
}, Open  ]],
Cell[8455, 181, 1103, 21, 141, "Text", "ExpressionUUID" -> \
"70bbae10-bfe6-4010-808d-4737f477289b"],
Cell[CellGroupData[{
Cell[9583, 206, 211, 5, 37, "Input", "ExpressionUUID" -> \
"91f55f99-7dbb-4892-8b44-ce3547186b36"],
Cell[9797, 213, 159, 4, 37, "Output", "ExpressionUUID" -> \
"dabe8734-da8f-4ebb-9506-1da00f07080a"]
}, Open  ]],
Cell[9971, 220, 883, 13, 141, "Text", "ExpressionUUID" -> \
"5bd824f2-55d2-49e7-bd8d-e507db97b10a"],
Cell[CellGroupData[{
Cell[10879, 237, 181, 4, 37, "Input", "ExpressionUUID" -> \
"690b62d7-0d8c-41e3-9cea-079461634274"],
Cell[11063, 243, 135, 3, 37, "Output", "ExpressionUUID" -> \
"311fe9fb-b0b5-4377-91c1-8039b3432efb"]
}, Open  ]],
Cell[11213, 249, 1615, 29, 192, "Text", "ExpressionUUID" -> \
"924e8405-4977-4fac-8745-1e75905a360b"],
Cell[CellGroupData[{
Cell[12853, 282, 246, 6, 37, "Input", "ExpressionUUID" -> \
"df7eda82-d099-4a7a-8315-5134bc34395e"],
Cell[13102, 290, 177, 5, 37, "Output", "ExpressionUUID" -> \
"9886bcce-0ea0-4a2a-b6f0-346ccbc032c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13316, 300, 131, 3, 37, "Input", "ExpressionUUID" -> \
"b09c1766-acdc-4994-9f2a-a5c9fb7e4f86"],
Cell[13450, 305, 177, 5, 37, "Output", "ExpressionUUID" -> \
"053bd49b-ea53-4346-91ba-0db9d1ecc98d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13664, 315, 174, 4, 37, "Input", "ExpressionUUID" -> \
"0a60e1ca-646b-42ab-b56b-e65a9184fda5"],
Cell[13841, 321, 134, 3, 37, "Output", "ExpressionUUID" -> \
"53c8d018-27d4-4752-ae4f-1d394edbb7f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14012, 329, 160, 3, 37, "Input", "ExpressionUUID" -> \
"430c929f-10e6-4ab0-8a5b-a830863291a5"],
Cell[14175, 334, 135, 3, 37, "Output", "ExpressionUUID" -> \
"c017e96d-8809-46ba-b587-e1db0b39e805"]
}, Open  ]],
Cell[14325, 340, 574, 9, 65, "Text", "ExpressionUUID" -> \
"edde2530-d118-4a95-9a9b-f1ae25941725"],
Cell[CellGroupData[{
Cell[14924, 353, 210, 5, 37, "Input", "ExpressionUUID" -> \
"2df8e679-b078-495c-ab34-e209cc85e1de"],
Cell[15137, 360, 149, 3, 37, "Output", "ExpressionUUID" -> \
"20fb45a0-1814-4719-99c0-816501a9bdca"]
}, Open  ]],
Cell[15301, 366, 431, 7, 39, "Text", "ExpressionUUID" -> \
"cd0b408c-268c-4d2b-9034-3f446ef7824a"],
Cell[CellGroupData[{
Cell[15757, 377, 547, 14, 87, "Input", "ExpressionUUID" -> \
"f2eac72f-c378-443d-a919-834e7c4a4c45"],
Cell[16307, 393, 291, 7, 50, "Output", "ExpressionUUID" -> \
"77a194be-c56f-4ffa-9b2e-7358e94f22f5"]
}, Open  ]],
Cell[16613, 403, 1303, 19, 192, "Text", "ExpressionUUID" -> \
"b634790b-45ff-49eb-88cb-b129b384db8e"],
Cell[CellGroupData[{
Cell[17941, 426, 258, 5, 37, "Input", "ExpressionUUID" -> \
"f70fb48d-99db-43e7-a181-fa01ce2a416f"],
Cell[18202, 433, 164, 3, 37, "Output", "ExpressionUUID" -> \
"286f6d4f-9456-4d41-859c-cebe0681a754"]
}, Open  ]],
Cell[18381, 439, 618, 10, 39, "Text", "ExpressionUUID" -> \
"bcacf8d0-79bd-48a1-ac31-c7270e6163a4"],
Cell[CellGroupData[{
Cell[19024, 453, 210, 4, 37, "Input", "ExpressionUUID" -> \
"65a3924c-638e-4dfe-af51-b94603288588"],
Cell[19237, 459, 147, 3, 37, "Output", "ExpressionUUID" -> \
"95f80195-2711-4ac5-ad5b-2df1300427a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19421, 467, 244, 5, 37, "Input", "ExpressionUUID" -> \
"cbacefb0-18c1-469c-b479-928a85cb1821"],
Cell[19668, 474, 145, 2, 37, "Output", "ExpressionUUID" -> \
"e1570b41-daa0-4b55-bf89-d6f490d3fba9"]
}, Open  ]],
Cell[19828, 479, 370, 8, 39, "Text", "ExpressionUUID" -> \
"f214137c-4c84-4341-ae22-5fad06f3b237"],
Cell[CellGroupData[{
Cell[20223, 491, 278, 7, 37, "Input", "ExpressionUUID" -> \
"29026ca6-b1ac-4655-95b2-fc454dbb9611"],
Cell[20504, 500, 151, 3, 37, "Output", "ExpressionUUID" -> \
"38695d4e-3cb4-4b80-8461-ac38bde307bf"]
}, Open  ]],
Cell[20670, 506, 680, 13, 115, "Text", "ExpressionUUID" -> \
"abfdbf88-2c66-4838-ba03-f80d3219e221"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21399, 525, 239, 4, 121, "Title", "ExpressionUUID" -> \
"cb6f74ad-97a8-44c3-985f-4ad9dcfb4ed0"],
Cell[21641, 531, 173, 3, 39, "Text", "ExpressionUUID" -> \
"4d6802d4-bd3a-4433-bd1d-f3f21b93e176"],
Cell[CellGroupData[{
Cell[21839, 538, 355, 9, 37, "Input", "ExpressionUUID" -> \
"ac989517-71d9-4ba7-b9f8-308011dfc5f0"],
Cell[22197, 549, 265, 7, 37, "Output", "ExpressionUUID" -> \
"b5854f6d-bd25-4aaa-93d1-9770f84dc545"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22499, 561, 441, 11, 37, "Input", "ExpressionUUID" -> \
"7bd35aaa-abff-42c6-ac0b-c44f454ae8ab"],
Cell[22943, 574, 131, 3, 37, "Output", "ExpressionUUID" -> \
"dc0a941a-ef1c-4115-a061-5fec79188a17"]
}, Open  ]],
Cell[23089, 580, 699, 12, 90, "Text", "ExpressionUUID" -> \
"671921bf-5ce0-4adc-952c-fbfe94524441"],
Cell[CellGroupData[{
Cell[23813, 596, 223, 5, 37, "Input", "ExpressionUUID" -> \
"1a52395f-649d-46ae-82c8-5259fb36b6e4"],
Cell[24039, 603, 263, 7, 37, "Output", "ExpressionUUID" -> \
"47e023f6-d984-4e5f-8a86-65d609a1938d"]
}, Open  ]],
Cell[24317, 613, 221, 5, 39, "Text", "ExpressionUUID" -> \
"997c440b-ba2a-483d-a6e5-e485a6724cf4"],
Cell[CellGroupData[{
Cell[24563, 622, 314, 8, 37, "Input", "ExpressionUUID" -> \
"d738fa35-8b63-4d0d-99c2-14f0feed0d2f"],
Cell[24880, 632, 270, 7, 37, "Output", "ExpressionUUID" -> \
"3b8df1a3-9c29-4775-8747-06fc41520452"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25187, 644, 350, 9, 37, "Input", "ExpressionUUID" -> \
"4305bdf0-993b-4d2e-b72f-88bbe1feb030"],
Cell[25540, 655, 270, 7, 37, "Output", "ExpressionUUID" -> \
"0f0f8aa2-c100-49c8-8764-ae262e24f3b7"]
}, Open  ]],
Cell[25825, 665, 272, 6, 39, "Text", "ExpressionUUID" -> \
"0cf4125e-017c-4490-8056-7e9dbdd532a1"],
Cell[CellGroupData[{
Cell[26122, 675, 449, 10, 37, "Input", "ExpressionUUID" -> \
"568c97cf-df54-455d-bf3f-da45940eeccb"],
Cell[26574, 687, 279, 7, 37, "Output", "ExpressionUUID" -> \
"5a74bbb9-64dc-48c3-9930-15887a9e1737"]
}, Open  ]],
Cell[26868, 697, 191, 3, 39, "Text", "ExpressionUUID" -> \
"58331823-8045-4f1a-9d7e-bb4156b1d26d"],
Cell[CellGroupData[{
Cell[27084, 704, 512, 12, 39, "Input", "ExpressionUUID" -> \
"0d2accf4-bb12-4e10-a4cb-8445d904ca47"],
Cell[27599, 718, 318, 8, 37, "Output", "ExpressionUUID" -> \
"4b062ee1-32c5-496c-94e6-3b2de4ce8417"]
}, Open  ]],
Cell[27932, 729, 167, 3, 39, "Text", "ExpressionUUID" -> \
"bf951bad-9afd-4e3d-8e65-24a457a7f2cd"],
Cell[CellGroupData[{
Cell[28124, 736, 435, 8, 37, "Input", "ExpressionUUID" -> \
"0a1dbde5-d1b2-4b76-a13f-c6bab2881bb4"],
Cell[28562, 746, 550, 11, 37, "Output", "ExpressionUUID" -> \
"398d9a31-26cd-464c-827f-50d63b5f339b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29149, 762, 459, 9, 37, "Input", "ExpressionUUID" -> \
"e12e4570-a604-478e-9ead-e17995cfb60f"],
Cell[29611, 773, 296, 7, 37, "Output", "ExpressionUUID" -> \
"8a48c643-9e01-4787-a07c-27150743b45e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29944, 785, 674, 19, 37, "Input", "ExpressionUUID" -> \
"5f491059-0bea-403e-b18c-48a80d508ae9"],
Cell[30621, 806, 208, 5, 37, "Output", "ExpressionUUID" -> \
"8997fcd7-13f6-4941-8b7b-26fe85565181"]
}, Open  ]],
Cell[30844, 814, 1731, 25, 166, "Text", "ExpressionUUID" -> \
"9a52fa59-a1ff-4f2a-b1b5-9c65a0f566b7"],
Cell[CellGroupData[{
Cell[32600, 843, 477, 12, 37, "Input", "ExpressionUUID" -> \
"37abc7cc-3de0-4907-bba7-4c749d4eca85"],
Cell[33080, 857, 265, 7, 37, "Output", "ExpressionUUID" -> \
"b7ce08fc-7a66-4aa9-af77-af9900336bdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33382, 869, 284, 7, 37, "Input", "ExpressionUUID" -> \
"525785cb-c41f-4475-8ae3-4f72113c4876"],
Cell[33669, 878, 265, 7, 37, "Output", "ExpressionUUID" -> \
"04154715-eb84-4e8a-94de-9bb2592b4e4e"]
}, Open  ]],
Cell[33949, 888, 227, 5, 39, "Text", "ExpressionUUID" -> \
"f5c08311-674a-4834-9cb0-88ad60fab9eb"],
Cell[CellGroupData[{
Cell[34201, 897, 450, 13, 37, "Input", "ExpressionUUID" -> \
"bcaa2a65-9761-4c80-9648-7b2353624ab4"],
Cell[34654, 912, 255, 7, 37, "Output", "ExpressionUUID" -> \
"a62ac86e-c3e6-4874-9c07-8a197ab5a06c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34946, 924, 383, 10, 37, "Input", "ExpressionUUID" -> \
"8b93eb64-8ded-4088-8b6d-81be486721e1"],
Cell[35332, 936, 206, 5, 37, "Output", "ExpressionUUID" -> \
"c75ab501-6c9d-48b7-a893-34b9156d3804"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35575, 946, 614, 17, 37, "Input", "ExpressionUUID" -> \
"03cb62f8-4c2c-4f60-849d-009d168b32b1"],
Cell[36192, 965, 234, 5, 37, "Output", "ExpressionUUID" -> \
"76712a76-6d53-4019-8b41-c26cf7bb878e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36463, 975, 413, 11, 37, "Input", "ExpressionUUID" -> \
"f73fdb83-96cb-48e5-bfd9-a81ba5fde081"],
Cell[36879, 988, 267, 6, 37, "Output", "ExpressionUUID" -> \
"8ec30046-d31c-4c7a-a6f3-c4b2aeba3272"]
}, Open  ]],
Cell[37161, 997, 206, 3, 39, "Text", "ExpressionUUID" -> \
"f5c0bb9c-9bb6-430e-a719-75c5ab5bb212"],
Cell[CellGroupData[{
Cell[37392, 1004, 292, 7, 37, "Input", "ExpressionUUID" -> \
"e2f98ef6-22c7-4feb-b73b-5f0d057134c0"],
Cell[37687, 1013, 224, 6, 37, "Output", "ExpressionUUID" -> \
"65c4fd12-391b-4350-b48b-9d5328f1e271"]
}, Open  ]],
Cell[37926, 1022, 251, 6, 39, "Text", "ExpressionUUID" -> \
"ade9a64f-a6b9-49b6-811b-7faacb71d36e"],
Cell[CellGroupData[{
Cell[38202, 1032, 221, 4, 87, "Chapter", "ExpressionUUID" -> \
"5f48f5a5-bea2-4cc1-be84-a2789741980a"],
Cell[CellGroupData[{
Cell[38448, 1040, 180, 3, 37, "Input", "ExpressionUUID" -> \
"743d4b1a-69a1-4e34-b177-7e2bb3c91d43"],
Cell[38631, 1045, 179, 3, 37, "Output", "ExpressionUUID" -> \
"00a0d492-bd82-4bc2-86a5-1880f009de94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38847, 1053, 403, 10, 37, "Input", "ExpressionUUID" -> \
"2023a673-6b82-4290-9dee-d7d4a363244a"],
Cell[39253, 1065, 159, 3, 37, "Output", "ExpressionUUID" -> \
"36caec89-86fb-44f5-a532-6944947a7bc5"]
}, Open  ]],
Cell[39427, 1071, 240, 4, 39, "Text", "ExpressionUUID" -> \
"37644616-68f6-4c66-bd5b-31e2c47e4286"],
Cell[CellGroupData[{
Cell[39692, 1079, 232, 5, 37, "Input", "ExpressionUUID" -> \
"0eaa7c15-53eb-4f5d-9dc4-7ca2f93c7039"],
Cell[39927, 1086, 133, 3, 37, "Output", "ExpressionUUID" -> \
"378d5e00-dcaf-403d-ac5d-6fe939ea78f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40097, 1094, 231, 5, 37, "Input", "ExpressionUUID" -> \
"e31e7a91-2264-455c-b6f4-2cf029fd7def"],
Cell[40331, 1101, 164, 3, 37, "Output", "ExpressionUUID" -> \
"7a42d756-066b-4a4a-91bf-c68e4f6ada8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40532, 1109, 352, 9, 37, "Input", "ExpressionUUID" -> \
"aab03e6c-16b2-4569-9abe-2ac4bc0bdc61"],
Cell[40887, 1120, 164, 3, 37, "Output", "ExpressionUUID" -> \
"03430633-70ce-46b1-a631-6e728edc0b4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41088, 1128, 466, 11, 37, "Input", "ExpressionUUID" -> \
"11d36e85-fcb6-4ddd-8410-8000e84eed63"],
Cell[41557, 1141, 201, 6, 37, "Output", "ExpressionUUID" -> \
"14de0bdc-51d8-4d7c-a371-35104a75221d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41795, 1152, 466, 11, 37, "Input", "ExpressionUUID" -> \
"332f50ea-92ee-44fd-a06c-2c5cd696e74b"],
Cell[42264, 1165, 203, 6, 37, "Output", "ExpressionUUID" -> \
"84188255-74f9-44b5-8cb6-4ba353d18af5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42504, 1176, 460, 12, 37, "Input", "ExpressionUUID" -> \
"28c1ee3f-169e-470d-9f2b-3dbba4b777a9"],
Cell[42967, 1190, 166, 3, 37, "Output", "ExpressionUUID" -> \
"4b71d9c7-194f-4265-8f85-10aad3a8c7fb"]
}, Open  ]],
Cell[43148, 1196, 200, 3, 39, "Text", "ExpressionUUID" -> \
"c6dd73c7-76a0-471e-8d5c-982d0e3855c6"],
Cell[CellGroupData[{
Cell[43373, 1203, 269, 7, 37, "Input", "ExpressionUUID" -> \
"9985b93d-6d34-40ed-a61a-cebaa8a39457"],
Cell[43645, 1212, 287, 6, 37, "Output", "ExpressionUUID" -> \
"304e9329-d12e-403b-9c79-6679fc42cea7"]
}, Open  ]],
Cell[43947, 1221, 186, 3, 39, "Text", "ExpressionUUID" -> \
"d0a0c5fc-78c3-4f00-b2d8-698fdb23ce1c"],
Cell[CellGroupData[{
Cell[44158, 1228, 344, 8, 37, "Input", "ExpressionUUID" -> \
"0bf1d187-8a2e-49b7-a186-25c2f8d7140c"],
Cell[44505, 1238, 144, 3, 37, "Output", "ExpressionUUID" -> \
"2309e849-e64e-49c3-adb1-22b412b6caab"]
}, Open  ]],
Cell[44664, 1244, 391, 8, 39, "Text", "ExpressionUUID" -> \
"5b2da926-4e51-45c9-86a9-c8d31f5c6aab"],
Cell[CellGroupData[{
Cell[45080, 1256, 205, 4, 37, "Input", "ExpressionUUID" -> \
"a061dcd8-1912-42f4-8236-7d4a98e51509"],
Cell[45288, 1262, 287, 6, 37, "Output", "ExpressionUUID" -> \
"1fb5cedd-04a8-4fc4-a7ae-bb0890da1473"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45612, 1273, 242, 5, 37, "Input", "ExpressionUUID" -> \
"886ab161-55af-4059-8126-291aaf0c60aa"],
Cell[45857, 1280, 146, 3, 37, "Output", "ExpressionUUID" -> \
"e9e8e494-a1c4-462e-87ce-928da7d7f378"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46040, 1288, 226, 5, 37, "Input", "ExpressionUUID" -> \
"2410d6e8-2b0f-4299-b776-d84a9273210b"],
Cell[46269, 1295, 667, 11, 37, "Output", "ExpressionUUID" -> \
"fcb2d16d-e510-43df-9491-8d4075b3d6c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46973, 1311, 294, 7, 37, "Input", "ExpressionUUID" -> \
"a2b8f5bb-4a20-4428-b6d5-d0ec447ca447"],
Cell[47270, 1320, 199, 5, 37, "Output", "ExpressionUUID" -> \
"7c5edf76-dcd2-403f-b057-da8eba20a0d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47506, 1330, 294, 7, 37, "Input", "ExpressionUUID" -> \
"39406239-b9c8-4cc2-ad02-6e87e1856858"],
Cell[47803, 1339, 260, 8, 37, "Output", "ExpressionUUID" -> \
"82f485e9-a873-4c69-af8b-b64fd5105bfc"]
}, Open  ]],
Cell[48078, 1350, 359, 8, 39, "Text", "ExpressionUUID" -> \
"7128c5c2-63eb-407c-9a98-56d6fec78cbb"],
Cell[CellGroupData[{
Cell[48462, 1362, 359, 9, 37, "Input", "ExpressionUUID" -> \
"c4608d16-8a97-46fe-8896-cd1e41db4e71"],
Cell[48824, 1373, 308, 7, 37, "Output", "ExpressionUUID" -> \
"a6979bc5-4179-4827-950f-f3bfb102d534"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49169, 1385, 402, 10, 37, "Input", "ExpressionUUID" -> \
"af199ccd-b1b3-4375-8d33-ca8b4da8b799"],
Cell[49574, 1397, 147, 3, 37, "Output", "ExpressionUUID" -> \
"686fdd5b-d1cf-45e1-a71c-da51326c106c"]
}, Open  ]],
Cell[49736, 1403, 235, 6, 39, "Text", "ExpressionUUID" -> \
"c6ca7304-bb78-4e8b-8508-b18e389bce98"],
Cell[CellGroupData[{
Cell[49996, 1413, 409, 9, 37, "Input", "ExpressionUUID" -> \
"fa3bef8a-bd21-4675-b04b-61aa68b3c1e1"],
Cell[50408, 1424, 306, 7, 37, "Output", "ExpressionUUID" -> \
"8e09d8c6-d3a8-4a67-835f-4648bd433600"]
}, Open  ]],
Cell[50729, 1434, 360, 7, 39, "Text", "ExpressionUUID" -> \
"ee735575-275a-449c-9fd1-6da0d2db894d"],
Cell[CellGroupData[{
Cell[51114, 1445, 468, 11, 37, "Input", "ExpressionUUID" -> \
"03f21add-7fce-4efd-9d6f-b0cb40d77a40"],
Cell[51585, 1458, 169, 3, 37, "Output", "ExpressionUUID" -> \
"31b8bd79-78b4-4c61-9658-c90c7c2c6881"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51803, 1467, 161, 3, 87, "Chapter", "ExpressionUUID" -> \
"60f27124-f057-4f9c-a274-f72704f6e623"],
Cell[51967, 1472, 667, 12, 90, "Text", "ExpressionUUID" -> \
"95849297-24bf-46c2-82fb-977b421e636f"],
Cell[CellGroupData[{
Cell[52659, 1488, 263, 7, 37, "Input", "ExpressionUUID" -> \
"a0aedc42-469b-4a50-9084-1e62e2470c66"],
Cell[52925, 1497, 218, 6, 37, "Output", "ExpressionUUID" -> \
"cf27e69f-b9ce-4e82-9776-f2d467021c66"]
}, Open  ]],
Cell[53158, 1506, 494, 9, 65, "Text", "ExpressionUUID" -> \
"23630771-50c9-4b53-ab11-b3fe8802cfcc"],
Cell[CellGroupData[{
Cell[53677, 1519, 353, 9, 37, "Input", "ExpressionUUID" -> \
"6c4e7757-118c-43b7-8e53-b409558e66fa"],
Cell[54033, 1530, 211, 5, 37, "Output", "ExpressionUUID" -> \
"f39787bf-b061-4435-951b-36314e5162eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54281, 1540, 415, 11, 37, "Input", "ExpressionUUID" -> \
"40768d08-930a-4196-a0b7-d77ba0a4145f"],
Cell[54699, 1553, 229, 6, 37, "Output", "ExpressionUUID" -> \
"aef829e9-318a-4f8f-9751-8c5e24ee576f"]
}, Open  ]],
Cell[54943, 1562, 383, 8, 39, "Text", "ExpressionUUID" -> \
"2a108525-4152-4793-a45a-39d5414267ef"],
Cell[CellGroupData[{
Cell[55351, 1574, 428, 11, 37, "Input", "ExpressionUUID" -> \
"05a75915-5d81-4b23-bb99-4cdd48eb79bf"],
Cell[55782, 1587, 258, 7, 37, "Output", "ExpressionUUID" -> \
"98d5ef7e-23a1-4d4d-b744-ef2a31257452"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56077, 1599, 605, 17, 37, "Input", "ExpressionUUID" -> \
"f973aba2-39a9-4275-a7a9-21de28168295"],
Cell[56685, 1618, 370, 11, 37, "Output", "ExpressionUUID" -> \
"eaf533db-e3ec-4cac-acd8-8f6294839d03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57092, 1634, 621, 18, 37, "Input", "ExpressionUUID" -> \
"ea89a69e-adff-4d7e-b371-89e46de34a0a"],
Cell[57716, 1654, 186, 5, 37, "Output", "ExpressionUUID" -> \
"d52ffbcb-1ec4-4255-89c1-697b236b0533"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57939, 1664, 189, 4, 37, "Input", "ExpressionUUID" -> \
"f58b13c5-fc7c-421b-8ae4-18ec07e7c804"],
Cell[58131, 1670, 263, 7, 37, "Output", "ExpressionUUID" -> \
"3617d5c0-6c0d-47a3-a9ee-d28709e7bf02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58431, 1682, 345, 9, 37, "Input", "ExpressionUUID" -> \
"15042344-7b70-47cd-8635-041e7e0be0b8"],
Cell[58779, 1693, 156, 3, 37, "Output", "ExpressionUUID" -> \
"23c56922-818c-4fa2-a5e2-cdf370e6a551"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58972, 1701, 351, 9, 37, "Input", "ExpressionUUID" -> \
"156ba887-b3ef-4e32-a6ba-908c7b03a153"],
Cell[59326, 1712, 132, 3, 37, "Output", "ExpressionUUID" -> \
"6249ea8d-23c9-4b2d-b478-92cb20010f79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59495, 1720, 432, 12, 37, "Input", "ExpressionUUID" -> \
"13166a2e-8db5-4228-9f60-4d40ef17dbc7"],
Cell[59930, 1734, 207, 5, 37, "Output", "ExpressionUUID" -> \
"f35bbbce-78c1-4d3f-8130-deadf22536f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60174, 1744, 348, 10, 37, "Input", "ExpressionUUID" -> \
"c528848e-a53c-4b1e-85f6-fce2e142a5f5"],
Cell[60525, 1756, 133, 3, 37, "Output", "ExpressionUUID" -> \
"c2f71aca-c873-4135-8966-3e0eb644c0b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60695, 1764, 351, 9, 37, "Input", "ExpressionUUID" -> \
"5ec1636c-0cae-45e2-97ad-68221256ebe2"],
Cell[61049, 1775, 133, 3, 37, "Output", "ExpressionUUID" -> \
"293f616e-3db1-4c05-853c-4aba8d57c519"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61219, 1783, 219, 5, 37, "Input", "ExpressionUUID" -> \
"9e96abaa-0f78-4a6c-b7d8-0cf201d14972"],
Cell[61441, 1790, 132, 3, 37, "Output", "ExpressionUUID" -> \
"412a9e55-3bb2-498b-81ac-5fdca767992c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61610, 1798, 323, 8, 37, "Input", "ExpressionUUID" -> \
"66a7b646-cb12-4ba5-8ddf-4dec5999ec52"],
Cell[61936, 1808, 281, 7, 37, "Output", "ExpressionUUID" -> \
"0bb82926-a2ba-4536-a437-fc9db222190f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62254, 1820, 322, 8, 37, "Input", "ExpressionUUID" -> \
"384238c9-5036-4288-895a-0d30f7c6c413"],
Cell[62579, 1830, 278, 7, 37, "Output", "ExpressionUUID" -> \
"46122b57-271d-446f-aabf-8eabd7bead9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62894, 1842, 448, 13, 37, "Input", "ExpressionUUID" -> \
"33910216-3e81-431a-a38e-e2890aef2bfb"],
Cell[63345, 1857, 186, 5, 37, "Output", "ExpressionUUID" -> \
"05ce95b4-2656-44e7-ae84-9f671d4b0acf"]
}, Open  ]],
Cell[63546, 1865, 156, 3, 39, "Text", "ExpressionUUID" -> \
"2828a095-50f8-43c5-a0fb-be991a2326ba"],
Cell[CellGroupData[{
Cell[63727, 1872, 472, 14, 37, "Input", "ExpressionUUID" -> \
"cd9104ef-fe22-4d20-ad6a-2e9c9ea957e5"],
Cell[64202, 1888, 132, 3, 37, "Output", "ExpressionUUID" -> \
"893ef6b0-e32c-4cc8-8694-e0a034a3e4b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64371, 1896, 474, 14, 37, "Input", "ExpressionUUID" -> \
"a057bb35-a788-478f-9df6-6b013d403a2a"],
Cell[64848, 1912, 143, 3, 37, "Output", "ExpressionUUID" -> \
"5599f130-df35-4201-bacc-613283e88c95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65028, 1920, 609, 18, 37, "Input", "ExpressionUUID" -> \
"d2e6367a-c315-43d2-a2ab-657f2fc138bb"],
Cell[65640, 1940, 154, 3, 37, "Output", "ExpressionUUID" -> \
"a0702395-0648-4226-a146-63c35283b8ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65831, 1948, 685, 18, 37, "Input", "ExpressionUUID" -> \
"c46a22a3-2f45-4420-98e3-6c7abf016427"],
Cell[66519, 1968, 151, 2, 37, "Output", "ExpressionUUID" -> \
"41b7926d-a881-4c57-b900-b78a172b2f48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66707, 1975, 572, 15, 37, "Input", "ExpressionUUID" -> \
"f7eddaa0-4132-4d52-b97f-7585c5c86b18"],
Cell[67282, 1992, 167, 3, 37, "Output", "ExpressionUUID" -> \
"866f2cd4-dba8-4dcf-9b4d-57f4dba59a11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67486, 2000, 465, 14, 37, "Input", "ExpressionUUID" -> \
"61740371-f185-444a-bddf-bcf065da2923"],
Cell[67954, 2016, 189, 5, 37, "Output", "ExpressionUUID" -> \
"37bba63e-3d23-4d33-82dc-3e011067c58b"]
}, Open  ]],
Cell[68158, 2024, 453, 13, 62, "Input", "ExpressionUUID" -> \
"7a10110f-42e5-4882-b2e3-0cdefd997817"],
Cell[CellGroupData[{
Cell[68636, 2041, 463, 12, 37, "Input", "ExpressionUUID" -> \
"f7399b56-72a5-40fe-bc4d-3cffbd93bdaf"],
Cell[69102, 2055, 264, 7, 37, "Output", "ExpressionUUID" -> \
"1956f496-dbbe-4b6e-bea4-fe593465f651"]
}, Open  ]],
Cell[69381, 2065, 319, 9, 37, "Input", "ExpressionUUID" -> \
"17b05099-e380-4d8d-bf66-1c40a112c1e4"],
Cell[CellGroupData[{
Cell[69725, 2078, 379, 10, 37, "Input", "ExpressionUUID" -> \
"4726cee0-967d-46fb-ab94-61b673c16a09"],
Cell[70107, 2090, 340, 8, 37, "Output", "ExpressionUUID" -> \
"cb8a1e5d-5b17-4157-abe5-a88d6ab7fb8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70484, 2103, 367, 10, 37, "Input", "ExpressionUUID" -> \
"121aec8d-e927-4c74-bc6b-62619d9aefd9"],
Cell[70854, 2115, 221, 6, 37, "Output", "ExpressionUUID" -> \
"5fdf8d00-707b-4924-8843-7ccaa4533816"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71112, 2126, 341, 9, 37, "Input", "ExpressionUUID" -> \
"45497e0a-1bdf-47be-840c-05569ec3b68b"],
Cell[71456, 2137, 246, 6, 37, "Output", "ExpressionUUID" -> \
"93cede66-df5a-4f45-bbec-59ff4061fc06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71739, 2148, 468, 11, 37, "Input", "ExpressionUUID" -> \
"ddb37545-5ff0-49bc-89d1-7ee4716b4c8e"],
Cell[72210, 2161, 254, 5, 37, "Output", "ExpressionUUID" -> \
"f4d4d0a0-9eba-4311-ae2b-75232275c8a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72501, 2171, 281, 7, 37, "Input", "ExpressionUUID" -> \
"8b2e8d55-9e77-4d9d-a492-0de038d0fe27"],
Cell[72785, 2180, 207, 5, 37, "Output", "ExpressionUUID" -> \
"4f7e112c-825a-4498-823a-8caef316e8e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73029, 2190, 400, 10, 37, "Input", "ExpressionUUID" -> \
"c6cf689e-af24-478d-a655-9acd16016435"],
Cell[73432, 2202, 211, 5, 37, "Output", "ExpressionUUID" -> \
"fdd70869-5a2e-4338-8c82-3272206ad844"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73680, 2212, 356, 10, 37, "Input", "ExpressionUUID" -> \
"98e1ad60-b5e6-4ed3-acd7-2fac38e676c1"],
Cell[74039, 2224, 197, 5, 37, "Output", "ExpressionUUID" -> \
"9ce79be8-0f35-4788-bc7c-f30c892af009"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74273, 2234, 224, 5, 37, "Input", "ExpressionUUID" -> \
"65190e17-9a96-4074-b51a-a06def6272bb"],
Cell[74500, 2241, 379, 8, 37, "Output", "ExpressionUUID" -> \
"2d6c3ffc-40ac-4fbb-afee-4ab795b07a6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74916, 2254, 504, 15, 37, "Input", "ExpressionUUID" -> \
"bcfbca03-3861-4d44-8956-bcf6a38a9a3e"],
Cell[75423, 2271, 345, 8, 37, "Output", "ExpressionUUID" -> \
"583f7fbf-991c-4067-a40b-d498952ad0f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75805, 2284, 395, 10, 37, "Input", "ExpressionUUID" -> \
"f728d6d6-e54b-405c-8cfd-affa227a921d"],
Cell[76203, 2296, 184, 4, 37, "Output", "ExpressionUUID" -> \
"6b4425db-67f5-4bc0-a674-1ad195285fbd"]
}, Open  ]],
Cell[76402, 2303, 169, 3, 39, "Text", "ExpressionUUID" -> \
"c1d59209-95be-4e98-9efb-63c8cc16a741"],
Cell[CellGroupData[{
Cell[76596, 2310, 368, 10, 37, "Input", "ExpressionUUID" -> \
"7220b72a-7d00-4396-a20f-af187c354c35"],
Cell[76967, 2322, 312, 7, 37, "Output", "ExpressionUUID" -> \
"97405f5d-16e7-44e2-9001-f448e7f43a45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77316, 2334, 267, 6, 37, "Input", "ExpressionUUID" -> \
"28ffa0a9-6276-4c7c-b34b-6ea77c7665a6"],
Cell[77586, 2342, 291, 7, 37, "Output", "ExpressionUUID" -> \
"7eb243dd-a955-47b2-a1b4-79edd55740f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77914, 2354, 216, 5, 37, "Input", "ExpressionUUID" -> \
"d768ac44-436d-4ea4-ae4a-14aa993af858"],
Cell[78133, 2361, 1339, 38, 294, "Output", "ExpressionUUID" -> \
"8f4eaca6-6914-4671-adc3-ef81424dbaf5"]
}, Open  ]],
Cell[79487, 2402, 166, 3, 39, "Text", "ExpressionUUID" -> \
"451adfce-08e5-4f02-bf45-f723a8e3139c"],
Cell[CellGroupData[{
Cell[79678, 2409, 200, 4, 37, "Input", "ExpressionUUID" -> \
"f5472c69-bd49-477e-8b6f-96d7e79c7819"],
Cell[79881, 2415, 1333, 37, 294, "Output", "ExpressionUUID" -> \
"67bcebcd-835e-46fc-8b46-77fa078e2fc3"]
}, Open  ]],
Cell[81229, 2455, 165, 3, 39, "Text", "ExpressionUUID" -> \
"83eaf475-fc47-4212-b0cd-5c3fee18931a"],
Cell[CellGroupData[{
Cell[81419, 2462, 411, 12, 37, "Input", "ExpressionUUID" -> \
"9a44ba5a-2a6e-4d3d-bc5a-d9a76a297b8b"],
Cell[81833, 2476, 492, 14, 37, "Output", "ExpressionUUID" -> \
"25bf31be-8c74-47bf-a260-ce0d1b330883"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82362, 2495, 411, 12, 37, "Input", "ExpressionUUID" -> \
"9f209797-86d5-4031-b0ed-80a7a8bc516b"],
Cell[82776, 2509, 598, 17, 37, "Output", "ExpressionUUID" -> \
"f7ffaed8-fbbf-4104-a966-c8c09db7bee5"]
}, Open  ]],
Cell[83389, 2529, 197, 3, 39, "Text", "ExpressionUUID" -> \
"3998bbbe-994b-4aba-913d-b7306acd32a3"],
Cell[CellGroupData[{
Cell[83611, 2536, 283, 6, 37, "Input", "ExpressionUUID" -> \
"06a73449-67be-447c-a1f2-e57e68522a96"],
Cell[83897, 2544, 35111, 968, 950, "Output", "ExpressionUUID" -> \
"13d0515a-b309-430f-866c-4cdc64dd23ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119045, 3517, 537, 15, 37, "Input", "ExpressionUUID" -> \
"7ce66f05-c969-43de-bcf3-a3108dfdd53d"],
Cell[119585, 3534, 1438, 39, 79, "Output", "ExpressionUUID" -> \
"36c84260-ae79-4a9a-b2ac-7c6d613e96c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121060, 3578, 714, 17, 62, "Input", "ExpressionUUID" -> \
"8eec41c7-b5b0-49cc-aa71-66407767c29e"],
Cell[121777, 3597, 198, 5, 37, "Output", "ExpressionUUID" -> \
"0661bc6a-f980-4ecb-b963-9cd3f1918f1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122012, 3607, 473, 13, 37, "Input", "ExpressionUUID" -> \
"eff775ea-1f68-48cc-b9fd-33fe01f9b7e6"],
Cell[122488, 3622, 372, 8, 37, "Output", "ExpressionUUID" -> \
"c95a4c40-8b23-4df3-b2a0-0abb8a91c2c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122897, 3635, 567, 15, 37, "Input", "ExpressionUUID" -> \
"be247507-8031-4408-8536-35972af24bd8"],
Cell[123467, 3652, 157, 3, 37, "Output", "ExpressionUUID" -> \
"d7bba04d-3a6f-4420-89cd-bb43ffb74ec5"]
}, Open  ]],
Cell[123639, 3658, 177, 3, 39, "Text", "ExpressionUUID" -> \
"7d7a7b29-689c-4dc0-9db6-96c4a7ad2817"],
Cell[CellGroupData[{
Cell[123841, 3665, 221, 5, 37, "Input", "ExpressionUUID" -> \
"86898dd7-22e1-4800-8832-d5543bf90864"],
Cell[124065, 3672, 1303, 20, 86, "Output", "ExpressionUUID" -> \
"ad9e60d6-71d8-4e16-8a74-4fa7b670104c"]
}, Open  ]],
Cell[125383, 3695, 261, 6, 39, "Text", "ExpressionUUID" -> \
"1c5eabf5-02f8-4440-be42-7c5729a476f5"],
Cell[CellGroupData[{
Cell[125669, 3705, 312, 7, 37, "Input", "ExpressionUUID" -> \
"768dbebc-1f5d-422e-8797-df66d07354a9"],
Cell[125984, 3714, 1798, 46, 290, "Output", "ExpressionUUID" -> \
"418289ae-57ca-4bfd-9ab7-6cad8e28b15d"]
}, Open  ]],
Cell[127797, 3763, 215, 5, 39, "Text", "ExpressionUUID" -> \
"ab954d14-49c8-4cb3-856d-e436472bb05e"],
Cell[CellGroupData[{
Cell[128037, 3772, 357, 7, 37, "Input", "ExpressionUUID" -> \
"551751f6-13f5-4d9f-bd4b-1bed640ed359"],
Cell[128397, 3781, 4671, 133, 289, "Output", "ExpressionUUID" -> \
"0912fba8-f967-43dd-b752-1de52efc1ed8"]
}, Open  ]],
Cell[133083, 3917, 182, 3, 39, "Text", "ExpressionUUID" -> \
"6642c1fc-4fc2-4fb6-99ea-2f11aa52a211"],
Cell[CellGroupData[{
Cell[133290, 3924, 267, 7, 37, "Input", "ExpressionUUID" -> \
"d860fea0-3597-44bb-a25f-21e1ddadbbb6"],
Cell[133560, 3933, 9695, 237, 182, "Output", "ExpressionUUID" -> \
"350f9893-95b8-458d-a56d-7a5c9ec951e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143292, 4175, 545, 15, 37, "Input", "ExpressionUUID" -> \
"276d9446-2ce8-4efc-8a7f-05091805ff68"],
Cell[143840, 4192, 156, 3, 37, "Output", "ExpressionUUID" -> \
"7efbb2af-f84e-44bc-a580-db246efc6b43"]
}, Open  ]],
Cell[144011, 4198, 182, 3, 39, "Text", "ExpressionUUID" -> \
"8c6ffb4d-1950-462b-b50f-68672f31c47a"],
Cell[CellGroupData[{
Cell[144218, 4205, 357, 9, 37, "Input", "ExpressionUUID" -> \
"a7b5bfa5-4e15-47f1-8028-c41b348ba64b"],
Cell[144578, 4216, 102574, 1687, 449, "Output", "ExpressionUUID" -> \
"850191c4-b8c8-4687-9541-7fab52814b01"]
}, Open  ]],
Cell[247167, 5906, 172, 3, 39, "Text", "ExpressionUUID" -> \
"1114e16e-3a04-491d-91c0-75b865f21ce0"],
Cell[CellGroupData[{
Cell[247364, 5913, 430, 11, 37, "Input", "ExpressionUUID" -> \
"4b369036-3306-4e83-bac8-48b4442d8eb2"],
Cell[247797, 5926, 102545, 1688, 138, "Output", "ExpressionUUID" -> \
"cb24afb1-db63-4995-b296-2cac29275ead"]
}, Open  ]],
Cell[350357, 7617, 558, 10, 115, "Text", "ExpressionUUID" -> \
"a50b41f3-4770-4545-9ced-fd3ad134f6ea"],
Cell[CellGroupData[{
Cell[350940, 7631, 307, 8, 37, "Input", "ExpressionUUID" -> \
"04a31bb9-36c8-47a5-97b8-47c3dd3edaa8"],
Cell[351250, 7641, 307643, 5054, 440, "Output", "ExpressionUUID" -> \
"fa717c41-bbce-481f-b168-c0c4f03867e3"]
}, Open  ]],
Cell[658908, 12698, 171, 3, 39, "Text", "ExpressionUUID" -> \
"9b510a2b-89cf-4591-917a-6d60b11ae3c9"],
Cell[CellGroupData[{
Cell[659104, 12705, 443, 11, 37, "Input", "ExpressionUUID" -> \
"e55d664e-eb1b-4b4c-8f6a-00e0b9d2a423"],
Cell[659550, 12718, 387, 9, 37, "Output", "ExpressionUUID" -> \
"473621f7-1fda-487a-828d-12278a9ee7b6"]
}, Open  ]],
Cell[659952, 12730, 177, 3, 39, "Text", "ExpressionUUID" -> \
"aa5add7a-4ea1-4b41-8569-eeb8334ef8a3"],
Cell[CellGroupData[{
Cell[660154, 12737, 463, 13, 37, "Input", "ExpressionUUID" -> \
"4e71d43f-8799-4741-a9f7-b0d53a6e0133"],
Cell[660620, 12752, 57109, 945, 366, "Output", "ExpressionUUID" -> \
"c7b1cd96-1386-4376-9d07-30adc9f22ea4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[717766, 13702, 487, 13, 37, "Input", "ExpressionUUID" -> \
"9ea695e2-c6e8-44c7-856a-4009bcb58f14"],
Cell[718256, 13717, 8193, 136, 354, "Output", "ExpressionUUID" -> \
"0ccd1df6-d895-4dbe-83c1-d9cc7312616e"]
}, Open  ]],
Cell[726464, 13856, 298, 6, 65, "Text", "ExpressionUUID" -> \
"493801ca-ea6f-4f13-839c-03aba0f8386d"],
Cell[CellGroupData[{
Cell[726787, 13866, 396, 10, 37, "Input", "ExpressionUUID" -> \
"b7383045-8085-4b7e-b4d3-6050dd016641"],
Cell[727186, 13878, 1311, 21, 134, "Output", "ExpressionUUID" -> \
"3eaf9314-364a-4f22-bfe5-4aa67aaee479"]
}, Open  ]],
Cell[728512, 13902, 489, 9, 115, "Text", "ExpressionUUID" -> \
"b20f8110-22ea-44be-80d4-35f498c7982a"],
Cell[CellGroupData[{
Cell[729026, 13915, 445, 12, 62, "Input", "ExpressionUUID" -> \
"15f5d775-0402-4ed0-9c84-f1347df136c7"],
Cell[729474, 13929, 145, 3, 37, "Output", "ExpressionUUID" -> \
"18cb8eb4-211d-4605-8cfc-b9b39c199cd3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[729656, 13937, 445, 12, 62, "Input", "ExpressionUUID" -> \
"09fe8772-26db-48bb-812b-9f0bb6709962"],
Cell[730104, 13951, 144, 3, 37, "Output", "ExpressionUUID" -> \
"3b1f1c2e-4564-40f1-a8c8-fcc93b78f231"]
}, Open  ]],
Cell[730263, 13957, 337, 7, 39, "Text", "ExpressionUUID" -> \
"2e81139b-cf26-475e-8497-002f239a25aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[730637, 13969, 226, 4, 87, "Chapter", "ExpressionUUID" -> \
"734f4b63-ed57-4ee7-b544-515491017a60"],
Cell[730866, 13975, 665, 11, 166, "Text", "ExpressionUUID" -> \
"b1a37dc1-864f-4f68-9bf5-d233d8e476b3"],
Cell[CellGroupData[{
Cell[731556, 13990, 279, 6, 37, "Input", "ExpressionUUID" -> \
"998cafb9-aef9-4634-bf3e-2f3b40ed3710"],
Cell[731838, 13998, 156, 3, 37, "Output", "ExpressionUUID" -> \
"b8a7babb-bd22-407c-a944-3a3f93c4d566"]
}, Open  ]],
Cell[732009, 14004, 402, 8, 90, "Text", "ExpressionUUID" -> \
"c2f453aa-5c50-4cc8-a122-41ad3aa63a15"],
Cell[732414, 14014, 276, 6, 37, "Input", "ExpressionUUID" -> \
"3b0767a3-3ef6-425d-abfe-631b5a2d639e"],
Cell[732693, 14022, 369, 7, 90, "Text", "ExpressionUUID" -> \
"3e82b080-495c-4543-83fe-af00d23ea35a"],
Cell[CellGroupData[{
Cell[733087, 14033, 131, 3, 37, "Input", "ExpressionUUID" -> \
"349e55b1-a1a5-4555-a965-baf2fe0b9f0b"],
Cell[733221, 14038, 132, 3, 37, "Output", "ExpressionUUID" -> \
"8a275284-f93c-4917-a4e9-689caa321b81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[733390, 14046, 126, 2, 37, "Input", "ExpressionUUID" -> \
"9c20f7db-5f56-48a1-b275-024e652f07f2"],
Cell[733519, 14050, 132, 3, 37, "Output", "ExpressionUUID" -> \
"c90e50b3-e56a-4af0-a124-6fdde2fabefe"]
}, Open  ]],
Cell[733666, 14056, 357, 7, 65, "Text", "ExpressionUUID" -> \
"dd4d693d-6a73-484c-b0f4-41e81a05e553"],
Cell[CellGroupData[{
Cell[734048, 14067, 129, 3, 37, "Input", "ExpressionUUID" -> \
"b15177ba-0737-444f-a772-30ba7a05e34d"],
Cell[734180, 14072, 130, 3, 37, "Output", "ExpressionUUID" -> \
"73d113e3-4784-4e51-90d3-b8b1759e68ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[734347, 14080, 129, 3, 37, "Input", "ExpressionUUID" -> \
"1a195af1-f427-4545-ba0e-b70ee510e36c"],
Cell[734479, 14085, 132, 3, 37, "Output", "ExpressionUUID" -> \
"08bda5c2-96dd-45c0-b9bc-c53d0497da11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[734648, 14093, 155, 3, 37, "Input", "ExpressionUUID" -> \
"b85676e1-e56c-437f-9c89-fdd97dd719c0"],
Cell[734806, 14098, 130, 3, 37, "Output", "ExpressionUUID" -> \
"4a8340a4-644c-4753-983e-d3a948cf7b48"]
}, Open  ]],
Cell[734951, 14104, 498, 9, 115, "Text", "ExpressionUUID" -> \
"99535d2d-dd23-480c-a9b4-70da2323d0cd"],
Cell[735452, 14115, 430, 12, 37, "Input", "ExpressionUUID" -> \
"7b18fdde-5b61-432c-84da-82f46902f5d8"],
Cell[CellGroupData[{
Cell[735907, 14131, 187, 4, 37, "Input", "ExpressionUUID" -> \
"ff25dafa-3817-497a-ac75-90160e9f899c"],
Cell[736097, 14137, 135, 3, 37, "Output", "ExpressionUUID" -> \
"19043d65-4fb5-4571-bf94-89cad05923bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[736269, 14145, 189, 4, 37, "Input", "ExpressionUUID" -> \
"f5ed6d15-31ae-4b00-921c-34519674bf41"],
Cell[736461, 14151, 136, 3, 37, "Output", "ExpressionUUID" -> \
"877e180a-cbbc-4caf-9bda-264d93d4c373"]
}, Open  ]],
Cell[736612, 14157, 954, 15, 218, "Text", "ExpressionUUID" -> \
"4365fbe4-7d16-48bf-bcd5-d751a139bcb2"],
Cell[737569, 14174, 435, 12, 37, "Input", "ExpressionUUID" -> \
"41d4c7d3-42eb-4960-a650-d2b59d3eeded"],
Cell[CellGroupData[{
Cell[738029, 14190, 186, 4, 37, "Input", "ExpressionUUID" -> \
"21d77b46-58b9-4d81-80a4-4cf6a89bf8c5"],
Cell[738218, 14196, 136, 3, 37, "Output", "ExpressionUUID" -> \
"eb0b484e-eda3-43bd-8477-ba97e8c66e35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[738391, 14204, 188, 4, 37, "Input", "ExpressionUUID" -> \
"a8024081-98f8-46ff-92a2-44f999840e0e"],
Cell[738582, 14210, 133, 3, 37, "Output", "ExpressionUUID" -> \
"789be891-b8e6-452a-a3f1-aa7cf188c7fd"]
}, Open  ]],
Cell[738730, 14216, 402, 8, 90, "Text", "ExpressionUUID" -> \
"bcfac329-0930-42d4-8c0a-b84941db1daa"],
Cell[CellGroupData[{
Cell[739157, 14228, 186, 4, 37, "Input", "ExpressionUUID" -> \
"f1818e01-e044-4a2f-aede-e7a4b0d757cd"],
Cell[739346, 14234, 293, 9, 37, "Output", "ExpressionUUID" -> \
"4edb99a9-1857-430a-8152-b85e4e5d224f"]
}, Open  ]],
Cell[739654, 14246, 575, 10, 115, "Text", "ExpressionUUID" -> \
"3fcd43b3-0845-4ae6-892a-d1b4a6fda166"],
Cell[740232, 14258, 442, 12, 37, "Input", "ExpressionUUID" -> \
"a1f99efe-ebdb-4716-a014-fe8f92f07f66"],
Cell[740677, 14272, 202, 3, 39, "Text", "ExpressionUUID" -> \
"41062c3d-1f6d-497e-baab-00d524022ecb"],
Cell[740882, 14277, 443, 12, 37, "Input", "ExpressionUUID" -> \
"735f6d19-b9a1-4cf5-b822-5240d8e2ee59"],
Cell[741328, 14291, 231, 5, 39, "Text", "ExpressionUUID" -> \
"08f855f1-a947-4b50-ad5a-c59ca6e61e51"],
Cell[CellGroupData[{
Cell[741584, 14300, 191, 4, 37, "Input", "ExpressionUUID" -> \
"cbf452a3-62ca-4e3b-9fb8-2d965a13b0f0"],
Cell[741778, 14306, 134, 3, 37, "Output", "ExpressionUUID" -> \
"2174a939-6f1f-4eeb-9579-0a33ee8d5411"]
}, Open  ]],
Cell[CellGroupData[{
Cell[741949, 14314, 374, 10, 37, "Input", "ExpressionUUID" -> \
"55b0f276-5f77-4e9c-85ec-0fbd5a9562aa"],
Cell[742326, 14326, 184, 5, 37, "Output", "ExpressionUUID" -> \
"b090ddc0-f3b6-4ccb-9d5e-35f44230c147"]
}, Open  ]],
Cell[742525, 14334, 244, 4, 39, "Text", "ExpressionUUID" -> \
"72f889b9-0ba7-40e9-a439-c2d348d85fe8"],
Cell[742772, 14340, 781, 20, 62, "Input", "ExpressionUUID" -> \
"aeefbbda-9e22-4f8b-b398-b46b1ed127a6"],
Cell[743556, 14362, 426, 8, 65, "Text", "ExpressionUUID" -> \
"49fe866a-21c8-457d-863a-df029dba0f98"],
Cell[CellGroupData[{
Cell[744007, 14374, 185, 4, 37, "Input", "ExpressionUUID" -> \
"7cf80978-4b22-4165-a6eb-6527f90ea754"],
Cell[744195, 14380, 202, 4, 37, "Output", "ExpressionUUID" -> \
"cd8f6950-ee0f-42c9-bb0d-f5c8e0f7b61c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[744434, 14389, 193, 4, 37, "Input", "ExpressionUUID" -> \
"04374b9d-2a00-409e-81a2-ec0d79bded11"],
Cell[744630, 14395, 178, 3, 73, "Output", "ExpressionUUID" -> \
"10fe6257-ef93-49b7-9252-29f4828a8572"]
}, Open  ]],
Cell[744823, 14401, 425, 8, 90, "Text", "ExpressionUUID" -> \
"275a08de-f7e6-4a86-8b57-d050af40eb13"],
Cell[CellGroupData[{
Cell[745273, 14413, 193, 4, 37, "Input", "ExpressionUUID" -> \
"ad13f4b2-7e99-431b-8ac3-ad1869d81287"],
Cell[745469, 14419, 128, 2, 37, "Output", "ExpressionUUID" -> \
"4ac87a76-a531-4ffc-878e-04d7eacade6f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[745646, 14427, 155, 3, 87, "Chapter", "ExpressionUUID" -> \
"74584ab2-0b3a-4602-a241-9f089ab1e074"],
Cell[745804, 14432, 262, 6, 65, "Text", "ExpressionUUID" -> \
"1f54280f-60af-4782-a0e6-7ce41bd1d0af"],
Cell[CellGroupData[{
Cell[746091, 14442, 368, 9, 37, "Input", "ExpressionUUID" -> \
"57e00963-6324-49a4-82a5-b7912a91d244"],
Cell[746462, 14453, 136, 3, 37, "Output", "ExpressionUUID" -> \
"47dd9c35-1f53-4f2b-a928-4f747dab9a23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[746635, 14461, 419, 10, 62, "Input", "ExpressionUUID" -> \
"b28658ec-431d-43aa-9ade-ee36e9003431"],
Cell[747057, 14473, 137, 3, 37, "Output", "ExpressionUUID" -> \
"e94894c1-d600-42f9-a6b7-c099ce14a915"]
}, Open  ]],
Cell[CellGroupData[{
Cell[747231, 14481, 350, 10, 37, "Input", "ExpressionUUID" -> \
"d0e99d9e-5191-4879-bed9-85d7dac60315"],
Cell[747584, 14493, 133, 3, 37, "Output", "ExpressionUUID" -> \
"c8122b5d-d7bc-40d3-acaf-7370ef78b1ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[747754, 14501, 198, 4, 37, "Input", "ExpressionUUID" -> \
"0cca396c-5ac2-4a30-902d-4e5816fe1229"],
Cell[747955, 14507, 135, 3, 37, "Output", "ExpressionUUID" -> \
"727390dc-203d-4f91-bfa8-c62781a72651"]
}, Open  ]],
Cell[748105, 14513, 268, 6, 39, "Text", "ExpressionUUID" -> \
"2d0e8492-7309-4345-b672-7050e7206d10"],
Cell[CellGroupData[{
Cell[748398, 14523, 246, 6, 37, "Input", "ExpressionUUID" -> \
"61ebe47a-e8d4-47c4-a0f0-f42511b2d871"],
Cell[748647, 14531, 320, 11, 54, "Output", "ExpressionUUID" -> \
"458282af-7f97-49b0-9278-407b4903d100"]
}, Open  ]],
Cell[748982, 14545, 269, 6, 39, "Text", "ExpressionUUID" -> \
"df883bad-44e2-4cd5-b3ed-1880166af6cf"],
Cell[749254, 14553, 399, 10, 37, "Input", "ExpressionUUID" -> \
"5fe3fd59-85c0-42cf-95d6-0d7cb472771e"],
Cell[CellGroupData[{
Cell[749678, 14567, 190, 4, 37, "Input", "ExpressionUUID" -> \
"5ec805cc-efe2-4e24-946e-12263d569a2b"],
Cell[749871, 14573, 134, 3, 37, "Output", "ExpressionUUID" -> \
"45afa5ca-019b-43f8-a662-70a49a6c9f56"]
}, Open  ]],
Cell[750020, 14579, 270, 6, 65, "Text", "ExpressionUUID" -> \
"c6f1ee27-8df5-4603-a5b4-f03791c66c33"],
Cell[750293, 14587, 1350, 34, 182, "Input", "ExpressionUUID" -> \
"a9b02cdf-6315-47f9-a38d-8fd9671d3d52"],
Cell[CellGroupData[{
Cell[751668, 14625, 209, 5, 37, "Input", "ExpressionUUID" -> \
"4bf79cb0-077d-4e28-8bf9-5a569d0b4eba"],
Cell[751880, 14632, 130, 3, 37, "Output", "ExpressionUUID" -> \
"146a0160-bbb9-4a56-b527-4763b914dd72"]
}, Open  ]],
Cell[752025, 14638, 615, 10, 115, "Text", "ExpressionUUID" -> \
"506f568d-ea8a-45b3-baa7-b9133b1440cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[752677, 14653, 160, 3, 87, "Chapter", "ExpressionUUID" -> \
"53090ffc-4a41-4a7a-8dff-9c8bb5d3fc0d"],
Cell[CellGroupData[{
Cell[752862, 14660, 195, 5, 37, "Input", "ExpressionUUID" -> \
"85594803-3edd-4f15-8e32-d6cccecdc2f8"],
Cell[753060, 14667, 195, 5, 37, "Output", "ExpressionUUID" -> \
"3cd25215-0d5f-4ead-9e2c-cfa969bf003a"]
}, Open  ]],
Cell[753270, 14675, 646, 11, 166, "Text", "ExpressionUUID" -> \
"4a333716-4fd5-468e-9302-2f6315f46164"],
Cell[CellGroupData[{
Cell[753941, 14690, 307, 8, 37, "Input", "ExpressionUUID" -> \
"3b17a43a-a231-4aff-8537-d46a94d787ff"],
Cell[754251, 14700, 270, 7, 55, "Output", "ExpressionUUID" -> \
"f9054289-1c3b-4b27-b663-5dd34ac8e604"]
}, Open  ]],
Cell[754536, 14710, 306, 6, 65, "Text", "ExpressionUUID" -> \
"1a71b002-45a7-4134-a591-009b26660366"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754879, 14721, 164, 3, 87, "Chapter", "ExpressionUUID" -> \
"3263a6bb-008a-4e28-b991-2061b0dab59f"],
Cell[CellGroupData[{
Cell[755068, 14728, 463, 12, 37, "Input", "ExpressionUUID" -> \
"485cfd84-1db1-4945-aec3-da01992615fd"],
Cell[755534, 14742, 131, 3, 37, "Output", "ExpressionUUID" -> \
"eea445e6-c5cd-4346-89a9-fb1af8345d3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[755702, 14750, 473, 13, 37, "Input", "ExpressionUUID" -> \
"bf80e959-3b34-47b5-bb0c-a79e4e80555f"],
Cell[756178, 14765, 150, 4, 55, "Output", "ExpressionUUID" -> \
"f92f8689-b94e-4942-9961-0cc352ad785e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[756365, 14774, 540, 15, 37, "Input", "ExpressionUUID" -> \
"01154ee3-a7d7-49f3-a216-b19df811e4f1"],
Cell[756908, 14791, 161, 3, 37, "Output", "ExpressionUUID" -> \
"4260e090-e619-48b5-9ef0-1c4f52b812e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[757106, 14799, 404, 10, 37, "Input", "ExpressionUUID" -> \
"5afaf0e2-2fae-4724-a71c-c5527bdead29"],
Cell[757513, 14811, 149, 3, 37, "Output", "ExpressionUUID" -> \
"ac9122d4-261a-423a-8b4b-6fdb0d58e5ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[757699, 14819, 185, 4, 37, "Input", "ExpressionUUID" -> \
"70b83350-6307-4838-b5f7-a400ee4ff75e"],
Cell[757887, 14825, 167, 4, 41, "Output", "ExpressionUUID" -> \
"0222900e-c819-4eb8-a181-79bfd1624d02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[758091, 14834, 356, 9, 37, "Input", "ExpressionUUID" -> \
"289ae783-a788-4e1a-8c1d-c0826d70bb07"],
Cell[758450, 14845, 172, 3, 37, "Output", "ExpressionUUID" -> \
"d2560a30-2e74-4bec-9df9-2268fdde3758"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[758671, 14854, 156, 3, 87, "Chapter", "ExpressionUUID" -> \
"4d6de9db-b5e6-463d-823f-e0369d740068"],
Cell[758830, 14859, 514, 10, 115, "Text", "ExpressionUUID" -> \
"04370413-2122-4d12-ae24-378a2d30215e"],
Cell[759347, 14871, 174, 3, 39, "Text", "ExpressionUUID" -> \
"d1bab50e-f4e9-4171-bfd2-08dc62b57ee9"],
Cell[759524, 14876, 572, 17, 62, "Input", "ExpressionUUID" -> \
"e17a0d16-a7bc-4acc-9cb7-06f1571a3024"],
Cell[CellGroupData[{
Cell[760121, 14897, 316, 8, 37, "Input", "ExpressionUUID" -> \
"ba537d6e-899a-43e2-af09-24bc151edf82"],
Cell[760440, 14907, 127, 2, 37, "Output", "ExpressionUUID" -> \
"d837a5e3-2207-477e-a220-2fb5ffebfe9b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[760604, 14914, 319, 8, 37, "Input", "ExpressionUUID" -> \
"7c5376d2-1db7-4774-8b64-2c9bc0f77d1e"],
Cell[760926, 14924, 133, 3, 37, "Output", "ExpressionUUID" -> \
"be0dc52a-9ddf-4ba7-872a-367ff65ddc4e"]
}, Open  ]],
Cell[761074, 14930, 294, 6, 65, "Text", "ExpressionUUID" -> \
"ed4aee34-6519-436a-83fc-71fb05a6e534"],
Cell[CellGroupData[{
Cell[761393, 14940, 207, 5, 37, "Input", "ExpressionUUID" -> \
"d5aaaad5-5fce-49bd-8a83-c1357ad73c48"],
Cell[761603, 14947, 128, 2, 37, "Output", "ExpressionUUID" -> \
"3dd6097d-194b-4383-aa79-1ca4dc59f42e"]
}, Open  ]],
Cell[761746, 14952, 294, 7, 39, "Text", "ExpressionUUID" -> \
"266d3831-40fa-4e60-954d-2034d0477cda"],
Cell[762043, 14961, 940, 23, 134, "Input", "ExpressionUUID" -> \
"d3fd54be-eadc-4c6d-8396-08d95cccc660"],
Cell[CellGroupData[{
Cell[763008, 14988, 189, 4, 37, "Input", "ExpressionUUID" -> \
"27443589-c8d3-4f69-88da-f21a2c984236"],
Cell[763200, 14994, 162, 3, 37, "Output", "ExpressionUUID" -> \
"821d010f-698f-43fb-91c5-4ae7b1f5c2fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[763399, 15002, 333, 9, 37, "Input", "ExpressionUUID" -> \
"726fdce1-d06e-48e9-8efb-09f051c1d3d4"],
Cell[763735, 15013, 136, 3, 37, "Output", "ExpressionUUID" -> \
"6fa793cf-4e01-4d6e-ae65-f0920a5cccdd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[763920, 15022, 161, 3, 87, "Chapter", "ExpressionUUID" -> \
"d7b0ce69-994e-4dff-a187-ed84879cbf05"],
Cell[764084, 15027, 290, 6, 65, "Text", "ExpressionUUID" -> \
"1cd37c6a-a593-4aca-8642-19194221affa"],
Cell[764377, 15035, 528, 15, 62, "Input", "ExpressionUUID" -> \
"055b099c-6f13-4448-a13d-2f5dee5f0307"],
Cell[764908, 15052, 497, 10, 115, "Text", "ExpressionUUID" -> \
"cf34feff-de8b-47b4-8d97-0a2d9afd60ad"],
Cell[CellGroupData[{
Cell[765430, 15066, 246, 6, 37, "Input", "ExpressionUUID" -> \
"7cb151f3-6709-4017-a55f-cf66538587e8"],
Cell[765679, 15074, 499, 13, 37, "Output", "ExpressionUUID" -> \
"26fd51d9-6de8-46ff-8912-a1f6cbbc7fd9"]
}, Open  ]],
Cell[766193, 15090, 225, 5, 39, "Text", "ExpressionUUID" -> \
"c7ea44f5-6ab6-4f66-a453-901eef5dd713"],
Cell[CellGroupData[{
Cell[766443, 15099, 484, 13, 37, "Input", "ExpressionUUID" -> \
"856aa528-e8cb-42b7-866a-343bc3bef0f5"],
Cell[766930, 15114, 197, 5, 37, "Output", "ExpressionUUID" -> \
"2c3b3e23-16b5-463d-9a63-6c536970edf6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[767164, 15124, 504, 14, 37, "Input", "ExpressionUUID" -> \
"550263a0-4fd8-4357-9f54-c0188c8dce24"],
Cell[767671, 15140, 140, 3, 37, "Output", "ExpressionUUID" -> \
"b1db83d6-d42a-4184-a759-3dfea3341482"]
}, Open  ]],
Cell[767826, 15146, 251, 6, 39, "Text", "ExpressionUUID" -> \
"adb6266e-bd93-4ff8-9729-4b2dad22a524"],
Cell[CellGroupData[{
Cell[768102, 15156, 467, 10, 37, "Input", "ExpressionUUID" -> \
"6084c523-ddbf-4fcf-bded-615f276de2ff"],
Cell[768572, 15168, 435, 10, 37, "Output", "ExpressionUUID" -> \
"8e7899ca-41a2-4d6e-a461-5f97e0458a17"]
}, Open  ]],
Cell[769022, 15181, 510, 9, 115, "Text", "ExpressionUUID" -> \
"f1343662-7f04-4674-bbef-a20a5c6db8f5"],
Cell[CellGroupData[{
Cell[769557, 15194, 328, 8, 37, "Input", "ExpressionUUID" -> \
"ea89f89d-ccbd-4cd0-be12-002c7d9500ee"],
Cell[769888, 15204, 141, 3, 37, "Output", "ExpressionUUID" -> \
"3c3b4cbe-d993-48da-9cae-94d94494d688"]
}, Open  ]],
Cell[CellGroupData[{
Cell[770066, 15212, 441, 10, 37, "Input", "ExpressionUUID" -> \
"323ea79e-9e1d-4b97-8a4f-8737cf098d3a"],
Cell[770510, 15224, 240, 5, 37, "Output", "ExpressionUUID" -> \
"71834551-51e3-49d5-ac04-8121a4f01297"]
}, Open  ]],
Cell[CellGroupData[{
Cell[770787, 15234, 356, 9, 37, "Input", "ExpressionUUID" -> \
"863f9c49-60ff-4d42-923a-1280caa069f7"],
Cell[771146, 15245, 140, 3, 37, "Output", "ExpressionUUID" -> \
"8ed3b4b5-95e4-4cea-924d-5c73ebdb9c18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[771323, 15253, 159, 3, 37, "Input", "ExpressionUUID" -> \
"dd3e728d-e420-472a-a560-4ffcbb24ccb8"],
Cell[771485, 15258, 497, 11, 37, "Output", "ExpressionUUID" -> \
"5f56b064-6498-4205-9aa5-b7fb4b78e30c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[772019, 15274, 330, 8, 37, "Input", "ExpressionUUID" -> \
"ba5a2b84-06c0-4966-bd6c-0dad6159a985"],
Cell[772352, 15284, 430, 9, 37, "Output", "ExpressionUUID" -> \
"ddf39b29-090e-4479-a7c0-88a791d05003"]
}, Open  ]],
Cell[CellGroupData[{
Cell[772819, 15298, 289, 7, 37, "Input", "ExpressionUUID" -> \
"6252db37-a50a-43a8-bd04-c2d8213d7289"],
Cell[773111, 15307, 270, 6, 37, "Output", "ExpressionUUID" -> \
"6917c342-c730-4cc3-a777-4e558c16004f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[773418, 15318, 295, 7, 37, "Input", "ExpressionUUID" -> \
"3446041e-99f4-478b-bd92-e54af59a9dfd"],
Cell[773716, 15327, 252, 6, 37, "Output", "ExpressionUUID" -> \
"ef75468d-c0ee-4479-8cf2-82c768726af3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[774017, 15339, 164, 3, 87, "Chapter", "ExpressionUUID" -> \
"109a9c98-fe69-4e87-ae5a-d1f8a2e7f336"],
Cell[774184, 15344, 1054, 16, 268, "Text", "ExpressionUUID" -> \
"a28ebfd2-d05d-4266-ad5c-36e0ad348353"],
Cell[CellGroupData[{
Cell[775263, 15364, 187, 4, 37, "Input", "ExpressionUUID" -> \
"70f5a2b0-7e86-40be-bf4e-6c44b9a80fa6"],
Cell[775453, 15370, 377, 8, 37, "Output", "ExpressionUUID" -> \
"ed1b6b0e-d2ac-4910-bcd0-82755a95ff0d"]
}, Open  ]],
Cell[775845, 15381, 189, 3, 39, "Text", "ExpressionUUID" -> \
"6581a016-b8ff-43c4-bb19-bf05b02eafb4"],
Cell[CellGroupData[{
Cell[776059, 15388, 586, 15, 86, "Input", "ExpressionUUID" -> \
"0510f576-c994-4dc7-a7a4-73f4fa65c12e"],
Cell[776648, 15405, 268, 7, 37, "Output", "ExpressionUUID" -> \
"8b36f326-ad9d-436a-a6f6-864a9aec7797"]
}, Open  ]],
Cell[776931, 15415, 213, 5, 39, "Text", "ExpressionUUID" -> \
"e11c832a-3e48-4706-a21c-1b9138d32793"],
Cell[CellGroupData[{
Cell[777169, 15424, 831, 19, 86, "Input", "ExpressionUUID" -> \
"b50dbaa7-e6bf-4510-bf15-6e487898daee"],
Cell[778003, 15445, 270, 7, 37, "Output", "ExpressionUUID" -> \
"f0e36c14-6e7a-42f3-8fff-4adaacd33ed0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[778310, 15457, 263, 6, 37, "Input", "ExpressionUUID" -> \
"64538edf-fe36-4b64-8af2-2cbd5874080a"],
Cell[778576, 15465, 265, 7, 37, "Output", "ExpressionUUID" -> \
"922c8242-5afb-49af-885f-fa94e1bde2e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[778878, 15477, 394, 11, 37, "Input", "ExpressionUUID" -> \
"0f2f8bea-ab20-4544-afac-4a4eeb992320"],
Cell[779275, 15490, 229, 6, 37, "Output", "ExpressionUUID" -> \
"d9e8cf73-4b32-4213-8f4b-16d14ffb77c1"]
}, Open  ]],
Cell[779519, 15499, 200, 3, 39, "Text", "ExpressionUUID" -> \
"7be3e930-054a-436d-a16c-1e53492b3aae"],
Cell[CellGroupData[{
Cell[779744, 15506, 249, 6, 37, "Input", "ExpressionUUID" -> \
"f608295a-4896-490b-81c3-b35e1ec0ad21"],
Cell[779996, 15514, 207, 5, 37, "Output", "ExpressionUUID" -> \
"eb34d331-0473-4b1c-a6d7-11435349e31b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780240, 15524, 487, 14, 37, "Input", "ExpressionUUID" -> \
"dca34c9a-cf3d-43b1-8974-ebbab99c5d1d"],
Cell[780730, 15540, 850, 26, 62, "Output", "ExpressionUUID" -> \
"b3c1eeb7-99c9-489a-9ef9-900847f014d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[781617, 15571, 919, 25, 62, "Input", "ExpressionUUID" -> \
"fc9d087a-d84c-4ea8-b0be-bfc08605b3e1"],
Cell[782539, 15598, 485, 15, 37, "Output", "ExpressionUUID" -> \
"530c79fb-e798-49fc-9641-1de00e3015a3"]
}, Open  ]],
Cell[783039, 15616, 819, 13, 218, "Text", "ExpressionUUID" -> \
"03fc675a-3fe6-42cb-861c-2fb4bd21b0e7"],
Cell[783861, 15631, 167, 3, 39, "Text", "ExpressionUUID" -> \
"5f4987f3-678e-42f6-b3bd-7fc79903f388"],
Cell[CellGroupData[{
Cell[784053, 15638, 939, 26, 86, "Input", "ExpressionUUID" -> \
"70065843-7bcb-41d0-80ca-0b39ccda8fcf"],
Cell[784995, 15666, 226, 6, 37, "Output", "ExpressionUUID" -> \
"520bf899-b6a8-47a2-9dc9-c5a4aa98707d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[785270, 15678, 206, 4, 87, "Chapter", "ExpressionUUID" -> \
"5b265e4d-8891-4298-84bb-4f7fc26d457d"],
Cell[785479, 15684, 351, 7, 65, "Text", "ExpressionUUID" -> \
"dec093e4-342a-4740-a610-0610abd0830d"],
Cell[CellGroupData[{
Cell[785855, 15695, 510, 12, 87, "Input", "ExpressionUUID" -> \
"a8f6ea7a-9dd2-4a98-9daf-1b026951929d"],
Cell[786368, 15709, 270, 7, 37, "Output", "ExpressionUUID" -> \
"5e3ea5d9-5e98-4baf-aaf6-7808f67600f7"]
}, Open  ]],
Cell[786653, 15719, 604, 11, 115, "Text", "ExpressionUUID" -> \
"b44e6676-a34f-4f40-9d33-51ba70716665"],
Cell[CellGroupData[{
Cell[787282, 15734, 544, 14, 43, "Input", "ExpressionUUID" -> \
"82b6015c-fcd9-43d7-b01c-2d5dc27a7a69"],
Cell[787829, 15750, 322, 8, 43, "Output", "ExpressionUUID" -> \
"0147c47c-51ae-48e2-a969-b8607db981e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[788188, 15763, 1039, 26, 68, "Input", "ExpressionUUID" -> \
"c2f98157-a31e-4149-8a94-ad2625055617"],
Cell[789230, 15791, 252, 6, 43, "Output", "ExpressionUUID" -> \
"1836ed9f-6c38-4648-9f79-238136ca2e06"]
}, Open  ]],
Cell[789497, 15800, 307, 7, 65, "Text", "ExpressionUUID" -> \
"f39284ae-65be-4071-9b6c-51499b1b3b6b"],
Cell[CellGroupData[{
Cell[789829, 15811, 325, 8, 37, "Input", "ExpressionUUID" -> \
"a993f750-ffae-4eb7-b293-ec253cf65d21"],
Cell[790157, 15821, 344, 8, 37, "Output", "ExpressionUUID" -> \
"3d3b323f-6293-440e-8006-4f65d962a730"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790538, 15834, 419, 11, 37, "Input", "ExpressionUUID" -> \
"c24d5cd2-0b96-4515-b620-9724bcdcc541"],
Cell[790960, 15847, 364, 7, 37, "Output", "ExpressionUUID" -> \
"22b2ce00-a2b6-47b3-9e5f-67de6a1ca326"]
}, Open  ]],
Cell[CellGroupData[{
Cell[791361, 15859, 331, 8, 37, "Input", "ExpressionUUID" -> \
"52afa83e-0c7d-4222-9ae9-8bce3d3e883f"],
Cell[791695, 15869, 206, 5, 37, "Output", "ExpressionUUID" -> \
"e005ed96-e3f1-470e-899c-4bc27451366a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[791938, 15879, 450, 12, 37, "Input", "ExpressionUUID" -> \
"1d23af36-9e76-4035-999c-c5e619c86e5d"],
Cell[792391, 15893, 307, 6, 37, "Output", "ExpressionUUID" -> \
"01d978d2-5b6b-4998-9b4f-7935400899a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[792735, 15904, 552, 15, 62, "Input", "ExpressionUUID" -> \
"eddcadc6-a512-4428-8946-f71d30a577f0"],
Cell[793290, 15921, 565, 17, 37, "Output", "ExpressionUUID" -> \
"f758715a-eed2-4255-ab7d-94f9d2b88e69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793892, 15943, 374, 10, 37, "Input", "ExpressionUUID" -> \
"9bf08129-c1d3-49d5-92ce-3b83ba15403a"],
Cell[794269, 15955, 335, 11, 37, "Output", "ExpressionUUID" -> \
"04371160-ee18-4bcb-9a3a-2311b7403e90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[794641, 15971, 380, 9, 37, "Input", "ExpressionUUID" -> \
"467f7256-18d5-4fc8-83a1-64e23cc2c530"],
Cell[795024, 15982, 362, 11, 37, "Output", "ExpressionUUID" -> \
"abe35a0c-650b-4dac-94a9-1902bca9601c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[795423, 15998, 471, 11, 37, "Input", "ExpressionUUID" -> \
"e574d242-ddf3-419b-bda2-2b1c63db33f8"],
Cell[795897, 16011, 185, 5, 37, "Output", "ExpressionUUID" -> \
"0810ca27-804b-4986-ba47-316226cdd025"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[796131, 16022, 162, 3, 87, "Chapter", "ExpressionUUID" -> \
"8bd1dcf3-a337-4f02-b744-909a2cdbd069"],
Cell[796296, 16027, 637, 11, 141, "Text", "ExpressionUUID" -> \
"408c55c0-124b-4199-81c0-b01a26076607"],
Cell[CellGroupData[{
Cell[796958, 16042, 168, 3, 37, "Input", "ExpressionUUID" -> \
"1aefe7d6-4b6f-453d-b3e2-8e0493f2d62b"],
Cell[797129, 16047, 265, 7, 37, "Output", "ExpressionUUID" -> \
"d15316ee-ec78-4653-bcf0-ff6e92e0c171"]
}, Open  ]],
Cell[CellGroupData[{
Cell[797431, 16059, 303, 7, 37, "Input", "ExpressionUUID" -> \
"c5af9d1a-34dd-44ad-8efa-cfeb032819ab"],
Cell[797737, 16068, 263, 7, 37, "Output", "ExpressionUUID" -> \
"070400d8-5946-48ec-ba06-e3d9683dde83"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798037, 16080, 636, 15, 110, "Input", "ExpressionUUID" -> \
"696eb959-2cef-41be-854d-9f8d9948dc8b"],
Cell[798676, 16097, 265, 7, 37, "Output", "ExpressionUUID" -> \
"32feebe7-2a0d-4757-a077-02ed95aa2103"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798978, 16109, 466, 12, 62, "Input", "ExpressionUUID" -> \
"99f76dbd-7990-4e52-aba5-54dabaad31c0"],
Cell[799447, 16123, 477, 9, 62, "Output", "ExpressionUUID" -> \
"6703ec29-6f2d-4655-a7d8-b5b1ad43292c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[799961, 16137, 434, 10, 62, "Input", "ExpressionUUID" -> \
"30c3a623-bfc7-4f6d-b649-4dad22a21a1f"],
Cell[800398, 16149, 454, 9, 62, "Output", "ExpressionUUID" -> \
"d01afd2f-2c2d-4313-8a42-981cb867ac84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[800889, 16163, 428, 12, 62, "Input", "ExpressionUUID" -> \
"9491dd8a-8f8c-4057-aa82-38331c860dc9"],
Cell[801320, 16177, 402, 11, 37, "Output", "ExpressionUUID" -> \
"51654979-cbc7-414c-95e4-f2ac83076a0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[801759, 16193, 622, 15, 86, "Input", "ExpressionUUID" -> \
"8086e217-fc7d-4d23-b793-11d9f8d739c9"],
Cell[802384, 16210, 376, 11, 37, "Output", "ExpressionUUID" -> \
"caf9351b-42bf-4fca-9665-08c75531becf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[802797, 16226, 486, 13, 62, "Input", "ExpressionUUID" -> \
"6106bb61-68a4-4213-8746-3c86f382f767"],
Cell[803286, 16241, 426, 9, 62, "Output", "ExpressionUUID" -> \
"923607f6-7742-4e25-a475-a774b83a925d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[803749, 16255, 429, 12, 37, "Input", "ExpressionUUID" -> \
"5dd90000-dd82-40d9-bd57-a952e46a72ab"],
Cell[804181, 16269, 1367, 48, 86, "Output", "ExpressionUUID" -> \
"c613f1d7-e47c-46b2-82b9-5fd84588147f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[805597, 16323, 153, 3, 87, "Chapter", "ExpressionUUID" -> \
"1a4e8ba4-ce56-47aa-b09d-bcdb9c6e61a7"],
Cell[805753, 16328, 247, 6, 65, "Text", "ExpressionUUID" -> \
"3494af42-4a2e-4e18-8ede-7eace2937b1f"],
Cell[806003, 16336, 336, 7, 65, "Text", "ExpressionUUID" -> \
"b4a7be38-9de7-4623-8155-872563fa0555"],
Cell[CellGroupData[{
Cell[806364, 16347, 496, 12, 37, "Input", "ExpressionUUID" -> \
"2b74d0bb-e9bb-4096-b81d-e18a27bbf8b3"],
Cell[806863, 16361, 2345, 45, 144, "Output", "ExpressionUUID" -> \
"45871fe1-5be2-493d-a2e0-1135154ec544"]
}, Open  ]],
Cell[809223, 16409, 159, 3, 39, "Text", "ExpressionUUID" -> \
"1cdf802d-0b5b-4632-ad72-edef1a891267"],
Cell[CellGroupData[{
Cell[809407, 16416, 620, 15, 37, "Input", "ExpressionUUID" -> \
"31afa417-e090-4ad8-8e38-37d1215d9c4f"],
Cell[810030, 16433, 2471, 48, 144, "Output", "ExpressionUUID" -> \
"00707674-0e86-4096-af28-bebff33f4e5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[812538, 16486, 862, 21, 86, "Input", "ExpressionUUID" -> \
"fdeea770-0393-4b3b-b4a6-c800d21e657e"],
Cell[813403, 16509, 3208, 70, 153, "Output", "ExpressionUUID" -> \
"753d196d-bd69-4226-8699-e9fc22e08157"]
}, Open  ]],
Cell[816626, 16582, 310, 8, 37, "Input", "ExpressionUUID" -> \
"05c5122e-d2a0-4165-99e7-20935a0079a0"],
Cell[CellGroupData[{
Cell[816961, 16594, 788, 21, 86, "Input", "ExpressionUUID" -> \
"7f1f4bbd-995a-4a4d-97cf-25fe1192e794"],
Cell[817752, 16617, 2649, 57, 404, "Output", "ExpressionUUID" -> \
"cd90fe14-f911-4787-8f97-66e8afaefaa4"]
}, Open  ]],
Cell[820416, 16677, 345, 7, 96, "Text", "ExpressionUUID" -> \
"d3481413-6f94-48d1-a466-95d4b365aa97"],
Cell[CellGroupData[{
Cell[820786, 16688, 686, 15, 86, "Input", "ExpressionUUID" -> \
"6652ab1b-75a8-4668-9f6b-7137ae3af635"],
Cell[821475, 16705, 2872, 61, 169, "Output", "ExpressionUUID" -> \
"aba3735c-0567-420a-b627-f973e404c382"]
}, Open  ]],
Cell[824362, 16769, 872, 15, 352, "Text", "ExpressionUUID" -> \
"c1f776f9-f17f-47af-842c-ad5bcd18ffec"],
Cell[825237, 16786, 498, 10, 206, "Text", "ExpressionUUID" -> \
"54b2009f-7e8a-4aeb-aac8-1cc7f3e18330"],
Cell[825738, 16798, 975, 18, 158, "Input", "ExpressionUUID" -> \
"8086408f-f6ec-4af5-be6d-bcfcfe27fc66"],
Cell[CellGroupData[{
Cell[826738, 16820, 277, 6, 37, "Input", "ExpressionUUID" -> \
"63e66c3b-f18a-49b3-a2b7-6ba928936f8d"],
Cell[827018, 16828, 4098, 81, 161, "Output", "ExpressionUUID" -> \
"6cae90a8-d017-4be1-9813-c6fb87ae2724"]
}, Open  ]],
Cell[831131, 16912, 152, 3, 37, "Input", "ExpressionUUID" -> \
"8750f3be-ea6c-4b5b-82a8-ec675acd9e14"],
Cell[831286, 16917, 152, 3, 37, "Input", "ExpressionUUID" -> \
"069b7555-4d87-432f-a3dd-38df31cd4eb1"]
}, Open  ]]
}, Open  ]]
}
]
*)

